@{
    ViewBag.Title = "CAPEX Mapping";
    Layout = "~/Views/Shared/_common_v1.cshtml";
}
@using ECIS.AppServer.Areas.Shell.Controllers
@using ECIS.Core;
@using ECIS.Client.WEIS;
@using MongoDB.Driver;
@using MongoDB.Driver.Builders;
@using MongoDB.Bson;
@using Newtonsoft.Json;
@{
    var m = Query.In("MapName", new BsonArray(ViewBag.ListMapName));
    var mapnamesdel = PCapex.Populate<PCapex>(m).Select(x => x.MapName).Distinct().ToList();
    var pcapex = PCapex.Populate<PCapex>().Where(x => mapnamesdel.Contains(x.MapName)).ToList();
    var casenames = pcapex.GroupBy(x => x.CaseName).Select(x => x.Key).ToList();

    List<string> cs = new List<string>();
    foreach (string cn in casenames)
    {
        if (string.IsNullOrEmpty(cn))
        {
            cs.Add("");
        }
        else
        {
            cs.Add(cn);
        }
    }
    casenames = cs;
    var updateby = pcapex.GroupBy(x => x.UpdateBy).Select(x => x.Key).ToList();
}

<script>
    model.PageId("Administration");
    model.IsProcessing = ko.observable(false);
    //model.isUpload = ko.observable(false);
    model.CaseNames = ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(casenames)));
    model.UpdateBy = ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(updateby)));
    model.backpalantir = function () {
        var url = "@Url.Action("ReportCapex", "palantir")";

        location.href = url;
    }
    model.MapNames = ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(mapnamesdel)));
    @*@Html.Raw(Json.Encode(@ViewBag.ListMapName))*@
    model.MapNamesdsad = ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(@ViewBag.ListMapName)));

    model.PalantirActivityTypes = [{ ActivityText: "DRILLING", ActivityValue: "DRILLING" }, { ActivityText: "COMPLETION", ActivityValue: "COMPLETION" }, { ActivityText: "ABANDONMENT", ActivityValue: "ABANDONMENT" }, { ActivityText: "RIG", ActivityValue: "RIG" }];
    model.LSInfo = ko.observable("@ViewBag.LatestLS");
    console.log(model.LSInfo());
    //model.asd = ko.observable({
    //    LSInforess: ko.observable("halo saya makan")
    //}); 
</script>

<style>
    .k-dropzone {
        padding-left: 15px;
    }

    .k-upload-selected {
        margin-left: 15px;
    }

    #grid .k-toolbar {
        min-height: 27px;
    }

    .category-label {
        color:#000000;
        vertical-align: middle;
        padding-right: .5em;
    }
    
    #category {
        vertical-align: middle;
    }

    .toolbar {
        /*background-color:aliceblue;*/
        float: right;
        margin-right: .8em;
    }
    .toolbar2121 {
        /*background-color:aliceblue;*/
        float: right;
        margin-right: .8em;
        margin-top: 8px;
        padding-right: 220px;
    }




    #grid .k-header[role=columnheader] {
        vertical-align: middle;
    }

        #grid .k-header[role=columnheader][data-field=_id] {
            text-align: center;
        }

        #grid .k-header[role=columnheader][data-field=OpsDuration], #grid .k-header[role=columnheader][data-field=PhRiskDuration] {
            vertical-align: bottom;
            text-align: center;
        }

        #grid .k-header[role=columnheader][data-colspan] {
            text-align: center;
            font-weight: bold;
            color: #a8a8a8;
        }

    #grid [role=rowgroup] [role=row]:nth-child(n+2) [role=columnheader] {
        text-align: center;
        vertical-align: middle;
    }

    #grid [data-field=PhStart], #grid [data-field=PhFinish], #grid [data-field=OpsStart], #grid [data-field=OpsFinish] {
        pointer-events: none;
    }

    .no-padding {
        padding: 0px;
        margin: 0px;
    }

    .customClass {
        background-color: red;
    }
    .k-grid .k-grid-content-locked {
        height: auto !important;
    }
    .deletemp {
        margin-top:5px;
        margin-bottom:10px;
    }
    
    .deletemp .col-md-3, .deletemp .col-md-4 {
        padding: 0px;
        margin: 0px;
    }

    .deletemp .col-md-4 {
        text-align: right;
        min-height: 28px;
    }

        .deletemp .col-md-4 label {
            padding-top: 4px;
        }

    .deletemp .col-md-8 {
        padding-left: 6px;
        padding-right: 6px;
    }
</style>

<div style="padding: 0px 15px 15px;">
    <div class="ec-toolbar">
        <button onclick="model.backpalantir()" class="btn btn-sm btn-warning"><span class="glyphicon glyphicon-arrow-left"></span> Back</button>
    </div>
    <div class="col-md-12 row filter">
        <div class="row" style="margin-bottom:10px">
            <div class="col-md-12">
                <div class="col-md-4">
                    <div class="col-md-4">
                        <label>Map File: </label>
                    </div>
                    <div class="col-md-8">
                        <select id="MapNamesMaping" data-placeholder="Select map files ..."></select>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="col-md-4">
                    <div class="col-md-4">
                        <label>Case Name: </label>
                    </div>
                    <div class="col-md-8">
                        <select id="CaseNames" data-placeholder="Select case name ..."></select>
                    </div>
                </div>
                <div class="col-md-3" data-bind="">
                    <div class="col-md-4">
                        <label>Update By: </label>
                    </div>
                    <div class="col-md-8">
                        <select id="UpdateBy" data-placeholder=" select update by ..."></select>
                    </div>
                </div>
                <div class="col-md-5" data-bind="">
                    <div class="col-md-3">
                        <label>Period: </label>
                    </div>
                    <div class="col-md-9">
                        <input type="text" id="PeriodStart" />
                        &nbsp;-&nbsp;
                        <input type="text" id="PeriodFinish" />
                    </div>
                </div>
            </div>
        </div>
        
        <div class="clearfix"></div>

        <div class="col-md-12">
            <button style="float: right; margin-right: 47px;" class="btn btn-custom btn-sm btn-primary" onclick="model.reloadData()">
                <span class="glyphicon glyphicon-refresh"></span> Refresh
            </button>
        </div>
    </div>

    <div class="row col-md-12 deletemp" style="visibility:hidden">
        <div class="col-md-3">
            <div class="col-md-4">
                <label>Map Name: </label>
            </div>
            <div class="col-md-6">
                <select id="MapNames" data-placeholder="Select map names ..."></select>
            </div>
            <div class="col-md-2">
                <button class="btn btn-custom btn-sm btn-danger" data-bind="click: deletemapcapex">
                    <span class="glyphicon glyphicon-trash"></span> Delete Map
                </button>
            </div>
        </div>
        @*<div class="col-md-3">
            <button class="btn btn-custom btn-sm btn-primary" data-bind="click: regeneratemapcapex">
                <span class="glyphicon glyphicon-list"></span> Regenerate Map
            </button>
        </div>*@
    </div>

    <div data-bind="visible: model.IsProcessing()">
        @Html.Partial("_processing")
    </div>

    <div data-bind="visible: !model.IsProcessing()">
        <div class="col-md-12 no-padding">
            @*<ul class="nav nav-tabs" role="tablist">
                    <li role="presentation" class="active">
                        <a href="#tab1" aria-controls="home" role="tab" data-toggle="tab">GAP</a>
                    </li>
                    <li role="presentation">
                        <a href="#tab2" aria-controls="profile" role="tab" data-toggle="tab">Improvement</a>
                    </li>
                </ul>*@

            @*<div class="tab-content">
                    <div role="tabpanel" class="tab-pane active" id="tab1">

                    </div>
                    <div role="tabpanel" class="tab-pane" id="tab2">
                        <div id="grid2" class="grid grid2"></div>
                    </div>
                </div>*@

            <div class="demo-section k-header" hidden="hidden"><input name="UploadedFile" id="files" type="file" /></div>
            <div id="grid" class="grid grid1"></div>

            <script type="text/x-kendo-template" id="template">
                <div class="toolbar">
                    <label class="category-label">Update With Latest LS: <input data-model="inlastuploadls" type="checkbox" id="inlastuploadls" /></label>
                    <button class="k-button k-button-icontext k-grid-i-columns" onclick="model.updatelatestS()">
                        <span class="glyphicon glyphicon-refresh"></span> Update LS
                    </button>
                </div>
                <div class="toolbar2121">
                    @*<label class="lsupdate-label" for="category">Update With Latest LS</label>*@
                    <span class="btn-sm btn-success" style="padding:10px;cursor:help;"></span>
                </div>
            </script>
            
        </div>
        <div style="clear: both;"></div>
</div>

</div>

<script>
    model.RenderGrid = function (data) {
        var excelName = "DataCapexMap_" + moment(new Date()).format("DD-MMM-YYYY_HH:mm:ss") + ".xlsx";
        $('#grid').replaceWith($('<div />').attr('id', 'grid'));
        $('#grid').kendoGrid(
            {
                toolbar: ["excel", {
                    template: '<button class="k-button k-button-icontext k-grid-i-columns" onclick="return model.savemapcapex()" > ' +
                    '<span class="glyphicon glyphicon-play"></span> Save Map</button>'
                }, { template: $("#template").html() }],
                //{
                //toolbar: ["excel", {
                //    template: ' <button class="k-button k-button-icontext k-grid-i-columns" onclick="return model.savemapcapex()" > ' +
                //    '<span class="glyphicon glyphicon-download"></span>Save Map</button>'+
                //    '<button class="k-button k-button-icontext k-grid-i-columns" onclick="return model.saveplancapexaggrts()" > ' +
                //    '<span class="glyphicon glyphicon-play"></span> Run</button>'
                //}],
                pdf: { fileName: "Capex Mapping.pdf" },
                excel: { fileName: excelName, allPages: true, filterable: true },
                dataSource: { data: data, type: "json", pageSize: 10 },
                editable: true,
                pageable: true,
                sortable: true,
                resizable: true,
                columns: [
                    {
                        field: "CaseName",
                        title: "Case Name",
                        width: 100,
                        type: "string", editable: true
                    }, {
                        field: "ActivityCategory",
                        title: "Activity Category",
                        width: 150
                    },
                    //{
                    //    field: "ActivityCategory",
                    //    title: "Activity Category",
                    //    width: 150,
                    //    template: "#= ActivityTypes(ActivityCategory) #",
                    //    editor: function (container, options) {
                    //        $("<input type='text' data-bind='value : " + options.field + "'/>")
                    //                .appendTo(container)
                    //                .kendoDropDownList({
                    //                    dataSource: new kendo.data.DataSource({
                    //                        data: model.PalantirActivityTypes
                    //                    }),
                    //                    dataTextField: "ActivityText",
                    //                    dataValueField: "ActivityValue",
                    //                    optionLabel: ""
                    //                });
                    //    },
                    //    type: "string", editable: true
                    //},
                    {
                        field: "WellName",
                        title: "Well Name",
                        width: 150,
                        type: "string", editable: false
                    },
                    {
                        field: "ActivityType",
                        title: "Activity Type",
                        width: 150,
                        type: "string", editable: false
                    },
                    {
                        field: "FundingType",
                        title: "Funding <br />Type",
                        width: 60,
                        type: "string", editable: false
                    },
                    {
                        field: "FirmOption",
                        title: "Planning <br />Classification",
                        width: 60,
                        type: "string", editable: false
                    }, {
                        field: "RigName",
                        title: "Rig Name",
                        width: 90,
                        type: "string", editable: false
                    }, {
                        field: "UARigSequenceId",
                        title: "UARigSequenceId",
                        width: 60,
                        type: "string", editable: false
                    }

                    //{ field: "CapexSummary.CapitalDrillingPDDevTang.EDM", title: "Capital Drilling <br/>PD Dev Tang (EDM)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },
                    //{ field: "CapexSummary.CapitalDrillingPDDevTang.EDMSS", title: "Capital Drilling <br/>PD Dev Tang (EDMSS)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },

                    //{ field: "CapexSummary.CapitalDrillingPDDevInTang.EDM", title: "Capital Drilling <br/>PD Dev In Tang (EDM)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },
                    //{ field: "CapexSummary.CapitalDrillingPDDevInTang.EDMSS", title: "Capital Drilling <br/>PD Dev In Tang (EDMSS)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },

                    //{ field: "CapexSummary.CapitalCompletionPDDevTang.EDM", title: "Capital Completion <br/>PD Dev Tang (EDM)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },
                    //{ field: "CapexSummary.CapitalCompletionPDDevTang.EDMSS", title: "Capital Completion <br/>PD Dev Tang (EDMSS)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },

                    //{ field: "CapexSummary.CapitalCompletionPDDevInTang.EDM", title: "Capital Completion <br/>PD Dev In Tang (EDM)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },
                    //{ field: "CapexSummary.CapitalCompletionPDDevInTang.EDMSS", title: "Capital Completion <br/>PD Dev In Tang (EDMSS)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },

                    //{ field: "CapexSummary.EPEXDrillingB2ExplTang.EDM", title: "EPEX Drilling <br/>B2Expl Tang (EDM)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },
                    //{ field: "CapexSummary.EPEXDrillingB2ExplTang.EDMSS", title: "EPEX Drilling <br/>B2Expl Tang (EDMSS)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },

                    //{ field: "CapexSummary.EPEXDrillingB2ExplInTang.EDM", title: "EPEX Drilling <br/>B2Expl In Tang (EDM)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },
                    //{ field: "CapexSummary.EPEXDrillingB2ExplInTang.EDMSS", title: "EPEX Drilling <br/>B2Expl In Tang (EDMSS)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },

                    //{ field: "CapexSummary.EPEXCompletionB2ExplTang.EDM", title: "EPEX Completion <br/>B2Expl Tang (EDM)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },
                    //{ field: "CapexSummary.EPEXCompletionB2ExplTang.EDMSS", title: "EPEX Completion <br/>B2Expl Tang (EDMSS)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },

                    //{ field: "CapexSummary.EPEXCompletionB2ExplInTang.EDM", title: "EPEX Completion <br/>B2Expl In Tang (EDM)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },
                    //{ field: "CapexSummary.EPEXCompletionB2ExplInTang.EDMSS", title: "EPEX Completion <br/>B2Expl In Tang (EDMSS)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },

                    //{ field: "CapexSummary.CapitalExpenDRDVAWells.EDM", title: "Capital Expen <br/>DRDVA Wells (EDM)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },
                    //{ field: "CapexSummary.CapitalExpenDRDVAWells.EDMSS", title: "Capital Expen <br/>DRDVA Wells (EDMSS)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },

                    //{ field: "CapexSummary.CapitalExpenDRSubSeaWells.EDM", title: "Capital Expen <br/>DR Sub Sea Wells (EDM)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },
                    //{ field: "CapexSummary.CapitalExpenDRSubSeaWells.EDMSS", title: "Capital Expen <br/>DR Sub Sea Wells (EDMSS)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },

                    //{ field: "CapexSummary.OPCostIdleRig.EDM", title: "OP Cost <br/>Idle Rig (EDM)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },
                    //{ field: "CapexSummary.OPCostIdleRig.EDMSS", title: "OP Cost <br/>Idle Rig (EDMSS)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },

                    //{ field: "CapexSummary.ContigencyTangWells.EDM", title: "Contigency <br/>Tang Wells (EDM)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },
                    //{ field: "CapexSummary.ContigencyTangWells.EDMSS", title: "Contigency <br/>Tang Wells (EDMSS)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },

                    //{ field: "CapexSummary.ContigencyInTangWells.EDM", title: "Contigency <br/>In Tang Wells (EDM)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } },
                    //{ field: "CapexSummary.ContigencyInTangWells.EDMSS", title: "Contigency <br/>In Tang Wells (EDMSS)", width: 150, type: "string", editable: false, format: "{0:N2}", attributes: { style: "text-align: right" } }

                ],
                excelExport: function (e) {
                    var sheet = e.workbook.sheets[0];
                    for (var rowIndex = 0; rowIndex < sheet.rows.length; rowIndex++) {
                        var row = sheet.rows[rowIndex];
                        for (var cellIndex = 0; cellIndex < row.cells.length; cellIndex++) {
                            if (rowIndex == 0) {
                                row.cells[cellIndex].value = row.cells[cellIndex].value.replace("<br/>", "");
                            }
                        }
                    }
                }
            });

        setTimeout(function () {
            $("#grid").data("kendoGrid").refresh();
        }, 200);
        $("#grid").find('.k-header.k-grid-toolbar').find('.toolbar2121').find('span').text(model.LSInfo());

        //if (model.isUpdateLS()) {
        //    $("#grid").find('.k-header.k-grid-toolbar').find('#udlS').show();
        //} else {
        //    $("#grid").find('.k-header.k-grid-toolbar').find('#udlS').hide();
        //}
    }

    function onComplete(e) {
        // model.LoadDataGrid();
    }

    function onRemove(e) {
        //console.log("Remove :: " + getFileInfo(e));
        model.reloadData();
    }

    function onSelect(e) {
        $(".k-upload-files.k-reset").remove();
        $.each(e.files, function (index, value) {
            //alert(value.extension);
            var ok = value.extension == ".xlsx"
                     || value.extension == ".xls"

            if (!ok) {
                e.preventDefault();
                alert("Please upload only Excel (xls, xlsx) files");
            }
        });
    }

    $(document).ready(function () {
        $("#CaseNames").kendoMultiSelect({
            placeholder: "Select case name ...",
            dataSource: model.CaseNames(),
            filter: "contains"
        });
        $("#UpdateBy").kendoMultiSelect({
            placeholder: "Select Update By ...",
            dataSource: model.UpdateBy(),
            filter: "contains"
        });
        input2datePicker($("#PeriodStart"));
        input2datePicker($("#PeriodFinish"));

        $("#MapNames").kendoDropDownList({
            dataSource: model.MapNames()
        });

        $("#MapNamesMaping").kendoDropDownList({
            dataSource: model.MapNames()
        });


        model.reloadData();
        //$("[data-model=dateStart]").closest(".col-md-8").prev().find("label").html("Plan Schedule:");

        $("#files").kendoUpload({
            async: {
                saveUrl: '@Url.Action("UploadMapCapex", "palantir")',
                //removeUrl: "remove",
                autoUpload: false
            },
            localization: {
                select: 'Upload Map File',
                remove: '',
                cancel: ''
            },
            remove: onRemove,
            complete: onComplete,
            select: onSelect,
            success: function (e) {
                var res = e.response;
                //console.log(res);
                if (res.Result == "NOK") {
                    alert(res.Message);
                    return;
                }

                alert("Upload Success!");
                model.RenderGrid(res.Data.listMap);
            }
        });
    });


    function ActivityTypes(ActivityCategory) {
        for (var i = 0; i < model.PalantirActivityTypes.length; i++) {
            if (model.PalantirActivityTypes[i].ActivityValue == ActivityCategory) {
                return model.PalantirActivityTypes[i].ActivityValue;
            }
        }
    }

    function DateTimeParse(date) {
        return moment(jsonDateStr(date), 'DD-MMM-YYYY').format("DD-MMM-YY");
    }

    function detilByRigName(RigName, WellName) {

        var withRisk;
        if ($('#riskcheck').is(':checked')) {
            withRisk = "1";
        } else {
            withRisk = "0";
        }

        var url = "@Url.Action("DetilByRigName")" + "?RigName=" + RigName + "&WellName=" + WellName + "&risk=" + withRisk;
        //console.log(e);
        ajaxPost(url, "", function (res) {
            //console.log(res.Data);
            //alert(res.Data);
            //alert("ok");
            //console.log(data);
        }, function (a, b, c) {
            console.log(a);
            console.log(b);
            console.log(c);
        });
        return data;
    }

    model.reloadData = function () {
        @*var assQWE = '@Html.Raw(Json.Encode(@ViewBag.ListMapName))';*@
        var mapnamesss = $('#MapNamesMaping').data('kendoDropDownList').value();
        var mapnm = [];
        mapnm.push(mapnamesss);
        var url = "@Url.Action("GetDataCapexMapping", "palantir")";
        var param = {
            //lMapNames: model.MapNamesdsad(),
            lMapNames: mapnm,
            CaseNames: $("#CaseNames").data("kendoMultiSelect").value(),
            UpdateBy: $("#UpdateBy").data("kendoMultiSelect").value(),
            DateStart: $("#PeriodStart").val(),
            DateFinish: $("#PeriodFinish").val(),
        }
        model.IsProcessing(true);

        ajaxPost(url, param, function (res) {
            model.RenderGrid(res.Data);
            model.IsProcessing(false);
        }, function () {
            model.IsProcessing(false);
        });
    }

    model.deletemapcapex = function () {
        var conf = confirm("Are you sure want to delete?");
        if (conf) {
            model.deletemap("capex");
        }
    }

    model.deletemap = function (report) {
        var mapnamesss = $('#MapNames').data('kendoDropDownList').value();
        var mapnm = [];
        mapnm.push(mapnamesss);

        model.IsProcessing(true);
        ajaxPost("@Url.Action("DeleteMap")", { values: mapnm, fields: ["MapName"], report: report, lmapnames: model.MapNamesdsad() }, function (res) {
            console.log(res);
            if (res.Success) {
                model.IsProcessing(false);
                model.reloadData();

                var ddlMapdell = $('#MapNames').data("kendoDropDownList");
                ddlMapdell.setDataSource(res.LMapName);
                ddlMapdell.refresh();
            } else {
                alert(res.Message);
                model.IsProcessing(false);
            }
        }, function () {
            alert(res.Message);
            model.IsProcessing(false);
        });
    }

    model.regeneratemapcapex = function () {
        var mapnamesss = $('#MapNames').data('kendoDropDownList').value();
        var grid = $("#grid").data("kendoGrid");
        var data = grid.dataSource.data();
        data.forEach(function (e) {
            delete e.CapexSummary;
        });

        ajaxPost("@Url.Action("ReGenerate")", { mapname: mapnamesss, list: data }, function (res) {
            if (res.Success) {
                model.IsProcessing(false);
                alert("Save Map And Run Success");
                model.reloadData();
            } else {
                alert(res.Message);
                model.IsProcessing(false);
            }
        }, function () {
            alert(res.Message);
            model.IsProcessing(false);
        });
    }

    model.savemapcapex = function () {
        var mapnamesss = $('#MapNamesMaping').data('kendoDropDownList').value();
        var mapnm = [];
        mapnm.push(mapnamesss);

        var grid = $("#grid").data("kendoGrid");
        var data = grid.dataSource.data();
        //data.forEach(function (e) {
        //    delete e.CapexSummary;
        //});
        model.IsProcessing(true);

        var totalLoop = Math.ceil(data.length / 10);
        var counter = 0;
        var take = 10;
        var skip = 0;
        for (var i = 0; i < totalLoop; i++) {
                var dataToThrow = Enumerable.From(data).Skip(skip).Take(take).ToArray();
                ajaxPost("@Url.Action("SaveMapName")", { list: dataToThrow, mapnames: mapnm, isEdited: true }, function (res) {
                if (res.Result == "OK") {
                    counter++;
                }
            }, function() {

            });
            skip = skip + take;
        }

        var ivl = setInterval(function () {
            if (counter == totalLoop) {
                clearInterval(ivl);
                model.IsProcessing(false);
                alert("Save Map Success");
                model.reloadData();
            }
        }, 100);

        @*ajaxPost("@Url.Action("SaveMapName")", { list: data, mapnames: mapnm, isEdited: true }, function (res) {
            if (res.Result == "NOK") {
                model.IsProcessing(false);
                alert(res.Message);
                return;
            }

            if (res.Data.Status == "NOK") {
                model.IsProcessing(false);
                alert(res.Data.Message);
                return;
            }
            model.IsProcessing(false);
            alert("Save Map Success");
            model.reloadData();

            //var ddlMapaagrts = $('#MapNamesAggrt').data("kendoDropDownList");
            //ddlMapaagrts.setDataSource(res.Data.LMapName);
            //ddlMapaagrts.refresh();
        }, function () {
            model.IsProcessing(false);
        });*@
    }

    model.saveplancapexaggrts = function () {
        var grid = $("#grid").data("kendoGrid");
        var data = grid.dataSource.data();
        data.forEach(function (e) {
            delete e.CapexSummary;
        });
        var mapNameAggrts = $('#MapNamesMaping').data('kendoDropDownList').value();
        ajaxPost("@Url.Action("SavePlanCapex")", { list: data, mapname: mapNameAggrts }, function (res) {
            if (res.Result == "NOK") {
                alert(res.Message);
                return;
            }

            if (res.Data.Status == "NOK") {
                alert(res.Data.Message);
                return;
            }
            //var ddlMapaagrts = $('#MapNamesAggrt').data("kendoDropDownList");
            //ddlMapaagrts.setDataSource(res.Data.LMapName);
            //ddlMapaagrts.refresh();

            alert("Aggregate Map Capex Success.");
            //ExportToExcel(res.Data.listAgg);
        }, function () {

        });

    }

    model.updatelatestS = function () {
        var param = $('[data-model="inlastuploadls"]').is(':checked');
        var grid = $("#grid").data("kendoGrid");
        var data = grid.dataSource.data();

        console.log(param);
        model.IsProcessing(true);
        ajaxPost("@Url.Action("UpdateLS")", { listMap: data, inlastuploadls: param }, function (res) {
            if (res.Result == "NOK") {
                model.IsProcessing(false);
                alert(res.Message);
                return;
            }

            if (res.Data.Status == "NOK") {
                model.IsProcessing(false);
                alert(res.Data.Message);
                return;
            }
            model.IsProcessing(false);
            alert("Update Latest Sequence Success");

            model.RenderGrid(res.Data.listSeq);
        }, function() {
            model.IsProcessing(false);
        });
    }
</script>

<script>
    //function onDataBound(e) {
    //    var grid = $("#grid").data("kendoGrid");
    //    var gridData = grid.dataSource.view();
    //    //console.log(e);

    //    for (var i = 0; i < gridData.length; i++) {
    //        //get the item uid
    //        var currentUid = gridData[i].uid;
    //        //console.log(gridData[i]);

    //        //if the record fits the custom condition
    //        if (gridData[i].EmployeeId % 2 == 0) {
    //            //find the row based on the uid and the custom class
    //            var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
    //            $(currenRow).addClass("customClass");
    //        }
    //    }
    //}
</script>