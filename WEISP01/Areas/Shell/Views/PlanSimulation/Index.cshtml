@using ECIS.Core;
@using ECIS.Client.WEIS;
@using MongoDB.Driver;
@using MongoDB.Driver.Builders;
@using Newtonsoft.Json;
@{
    ViewBag.Title = "Well Plan Simulation";
    Layout = "~/Views/Shared/_common_v1.cshtml";
}


<div>
    <div data-bind="visible: model.IsProcessing()">
        @Html.Partial("_processing")
    </div>
    @*<div class="box">
            <b>This module is use to create Well Plan simulation data, based on existing Well Activities</b>
            <ul type="circle">
                <li>You can tart Simulation by clicking Add <a class="btn-xs btn-success">  Add New Simulation</a> button </li>
                <li>After you have done, saved data will be show inside of Tabel below </li>
            </ul>
        </div>*@
    <div data-bind="visible:model.simulation().mode() == 'Simulation'">
        <div class="ec-toolbar" style="text-align:right">
            <button class="btn btn-success btn-sm" onclick="model.simulation().changeMode('Browser')">
                <span class="glyphicon glyphicon-plus"></span> Add New Simulation
            </button>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div id="gridSimulation"></div>
            </div>
        </div>
    </div>

    <div data-bind="visible:model.simulation().mode() == 'Detail'">

        <script type="text/x-kendo-template" id="grid_detail_template">
            <div style="">
                @*<div data-bind="visible: model.simulation().DetailPhaseProcessing()">
                        @Html.Partial("_processing")
                    </div>*@
                <div class="row" @*data-bind="visible: model.simulation().DetailPhaseProcessing() == false"*@>
                    <div class="ec-toolbar" style="margin-top:15px;">
                        <button class="btn btn-info btn-xs" onclick="model.simulation().addPhase(this)" style="display:none;">
                            <span class="glyphicon glyphicon-plus"></span> Add Phase
                        </button>
                        <input type="hidden" class="DetailId" value="" />
                        <button class="btn btn-warning btn-xs" onclick="model.simulation().updatePhase(this)" style="display:none;margin-left:10px;">
                            <span class="glyphicon glyphicon-save"></span> Save Changes
                        </button>
                        <span style="color:grey;">
                            (Inline editing for Latest Sequence Start &amp; Finish are enabled)
                        </span>
                    </div>
                    <div class="row-detail" data-bind=""></div>
                </div>
            </div>
        </script>


        <div class="ec-toolbar">
            <button class="btn btn-warning btn-sm" onclick="model.simulation().changeMode('Simulation')">
                <span class="glyphicon glyphicon-arrow-left"></span> Back to Simulation List
            </button>
            &nbsp;&nbsp;
            <button class="btn btn-sm btn-custom btn-primary" onclick="detailSimulation(model.simulation().selectedSimulationId())">
                <span class="glyphicon glyphicon-refresh"></span> Refresh
            </button>
            &nbsp;&nbsp;
            <button class="btn btn-success btn-sm" onclick="toggle_gridDetail()">
                <span class="glyphicon glyphicon-eye-open"></span> Show/Hide Grid
            </button>
            &nbsp;&nbsp;
            <button class="btn btn-warning btn-sm" onclick="model.simulation().saveToXLS()">
                <span class="glyphicon glyphicon-export"></span> Save to XLS
            </button>
            &nbsp;&nbsp;

            <button class="btn btn-danger btn-sm" onclick="OpenModal('a')" style="visibility:visible">
                <span class="glyphicon glyphicon-upload"></span> Commit to Well Activities
            </button>

        </div>
        <div class="row">
            <div class="col-md-12">
                <div id="gridDetail"></div>
            </div>
        </div>

        @Html.Partial("_SequenceCharts")
    </div>

    <div class="modal fade myModal" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                        <h4 class="modal-title">Latest Sequence Date</h4>
                    </div>
                    <div class="modal-body">
                        <form id="form_new_phase" class="k-content">
                            <div class="form-group">
                               <div class="col-md-8">
                                   

                                   <label style="text-align:right; font-weight:bold;">Simulation ID : <span data-bind="text:model.simulation().selectedSimulationId()"></span></label><br />
                                   <label style="text-align:right; font-weight:bold;">Latest Sequence Date : </label><input id="inputName" type="text" class="entry-date">
                                </div>
                            </div>
                            <div class="clearfix">&nbsp;</div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-custom btn-sm btn-shell" data-dismiss="modal">
                            Cancel
                        </button>
                        <button type="button" class="btn btn-custom btn-sm btn-primary" onclick="model.simulation().commit()">
                            <span class="glyphicon glyphicon-ok"></span> Load to WEIS
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div data-bind="visible:model.simulation().mode() == 'Browser'">
        @Html.Partial("_Browser")
    </div>
    <div class="col-md-12" data-bind="visible:model.simulation().mode() == 'DetailEdit'">
        @Html.Partial("_Edit")
    </div>
</div>

<!-- Modal Add Phase -->
<div class="modal fade myModal" id="modalAddPhase" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                    <h4 class="modal-title">New Phase</h4>
                </div>
                <div class="modal-body">
                    <form id="form_add_phase" class="k-content">
                        <div class="form-group">
                            <div class="col-md-4">
                                <label style="text-align:right; font-weight:bold;" for="recipient-name" class="control-label">Phase Name:</label>
                            </div>
                            <div class="col-md-8">
                                <input class="text" style="" placeholder="Select Activity Type ..."
                                       required data-required-msg="Insert Phase Name" name="PhaseName" id="NewPhaseName" />
                                <span class="k-invalid-msg" data-for="PhaseName"></span>
                            </div>
                        </div>
                        <div class="clearfix">&nbsp;</div>
                        <div class="form-group">
                            <div class="col-md-4">
                                <label style="text-align:right; font-weight:bold;" class="control-label">Period Start:</label>
                            </div>
                            <div class="col-md-8">
                                <input onblur="model.simulation().CalculateDaysOnPhase(this)" style="width: 200px;"
                                       required data-required-msg="Insert Period Finish" name="PhasePhStart"
                                       data-bind="kendoDatePicker: { format: 'dd-MMM-yyyy', value: model.PhasePhStart } " />
                                <span class="k-invalid-msg" data-for="PhasePhStart"></span>
                            </div>
                        </div>
                        <div class="clearfix">&nbsp;</div>
                        <div class="form-group">
                            <div class="col-md-4">
                                <label style="text-align:right; font-weight:bold;" class="control-label">Period Finish:</label>
                            </div>
                            <div class="col-md-8">
                                <input onblur="model.simulation().CalculateDaysOnPhase(this)" style="width: 200px;"
                                       required data-required-msg="Insert Period Finish" name="PhasePhFinish"
                                       data-bind="kendoDatePicker: { format: 'dd-MMM-yyyy', value: model.PhasePhFinish } " />
                                <span class="k-invalid-msg" data-for="PhasePhFinish"></span>
                            </div>
                        </div>
                        <div class="clearfix">&nbsp;</div>
                        <div class="form-group">
                            <div class="col-md-4">
                                <label style="text-align:right; font-weight:bold;" class="control-label">Total days:</label>
                            </div>
                            <div class="col-md-2">
                                <input class="text" type="text" readonly="readonly" id="DaysCountNewPhase">
                            </div>
                        </div>
                        <div class="clearfix">&nbsp;</div>
                        <div class="form-group">
                            <label class="col-md-4">Non Well Schedule:</label>
                            <div class="col-md-2">
                                <input id="virtual" class="check" type="checkbox" />
                            </div>

                        </div>
                        <div class="clearfix">&nbsp;</div>
                        <div class="form-group">
                            <label class="col-md-4">Shift Future Event Date:</label>
                            <div class="col-md-2" style="position: relative">
                                <input id="shift" class="check" type="checkbox" />
                            </div>

                        </div>
                        <div class="clearfix">&nbsp;</div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-custom btn-sm btn-shell" data-dismiss="modal">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-custom btn-sm btn-primary" onclick="model.simulation().saveNewPhase();">
                        <span class="glyphicon glyphicon-ok"></span> Save
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- End Modal Add Phase -->


<script>

    $(document).ready(function () {

        $("#inputName").kendoDatePicker({
            format: jsonDateFormat,
            start: "month",
            depth: "month",
            parseFormats: ["dd-MMM-yyyy"],
            max: new Date(3001, 1, 1)
        }
        );

        var dateNow = Date();
        //console.log(dateNow);
        var s = moment(dateNow).format('DD-MMM-YYYY');
        //console.log(s);
        $('#inputName').data('kendoDatePicker').value(s);
    });
</script>


<script>
    function toggle_gridDetail() {
        $("#gridDetail").toggle();
    }

    function OpenModal(id) {
        $('#inputFile').val(id);


        $("#myModal").modal('show');
    }
    model.simulation = ko.observable({
        PhaseModel: ko.observable(ko.mapping.fromJS(@MvcTools.Obj2HtmlStr(new WellActivityPhase()))),
        SimulationList: ko.observableArray([]),
        SimulationMap: ko.observableArray([]),
        selectedWellPlanId: ko.observable(),
        mode: ko.observable("Simulation"),
        changeMode: function (mode) {
            if (mode == "Browser") {

                $("#pageTitle").text("Plan Simulation -- Add New Simulation");
                UncheckAll();
                setTimeout(function () {
                    $('#grid').data('kendoGrid').refresh();
                }, 500);

            }
            if (mode == "Simulation") {
                $("#pageTitle").text("Plan Simulation");
            }
            if (mode == "Detail") {
                $("#pageTitle").text("Plan Simulation -- Detail Simulation");
            }
            if (mode == "DetailEdit") {
                $("#pageTitle").text("Plan Simulation -- Detail Simulation -- Edit Data");
            }
            model.simulation().mode(mode);
        },
        populate: function () {
            model.IsProcessing(true);
            ajaxPost("@Url.Action("Populate")", {}, function (res) {
                ////console.log(res);
                //renderGridUsingData(res.Data);
                model.IsProcessing(false);
                var data = res.Data;
                var x = model.simulation();
                x.SimulationList([]);
                x.SimulationMap([]);
                x.SimulationList().push({ DataValue: "", DataText: "None" });
                for (var i = 0; i < data.length; i++) {
                    var a = { DataValue: data[i]._id, DataText: data[i].Title };
                    var ids = [];
                    data[i].WellPlans.forEach(function (each) {
                        ids.push(each._id);
                    });

                    var b = { SimulationId: data[i]._id, WellPlans: ids };
                    x.SimulationMap().push(b);
                    x.SimulationList().push(a);
                }
                $("#ExistingSimulationList").kendoDropDownList({
                    dataSource: model.simulation().SimulationList(),
                    dataTextField: "DataText",
                    dataValueField: "DataValue",
                    change: CopySimulation
                });
                renderGridSimulation(res.Data);
            }, function () {
                model.IsProcessing(false);
            });
        },
        isProcessing: ko.observable(false),
        DetailPhaseProcessing: ko.observable(false),
        selectedSimulationId: ko.observable(),
        selectedDetailId: ko.observable(),
        saveNewPhase: function () {
            var validator = $("#form_add_phase").kendoValidator().data("kendoValidator");

            if (!validator.validate()) {
                return;
            }

            var data = {};
            //data.ActivityId = model.SelectedActivity._id;
            data.ActivityId = model.simulation().selectedDetailId();
            data.PhStart = moment(model.PhasePhStart()).toDate();
            data.PhFinish = moment(model.PhasePhFinish()).toDate();
            data.ActivityType = $("#NewPhaseName").data("kendoDropDownList").value();

            var virtual = false;
            var shift = false;
            if ($("#virtual").is(':checked')) {
                virtual = true;
            }
            if ($("#shift").is(':checked')) {
                shift = true;
            }

            data.Virtual = virtual;
            data.Shift = shift;
            data.SimulationId = model.simulation().selectedSimulationId();
            ////console.log(data);
            ajaxPost("@Url.Action("SaveNewPhase")", data, function (response) {
                $("#modalAddPhase").modal('hide');
                detailSimulation(model.simulation().selectedSimulationId());
            }, function (err) {
                alert('Error occured when saving new phase')
            });
        },
        addPhase: function (obj) {
            var DetailId = $(obj).next().val();
            model.simulation().selectedDetailId(DetailId);
            model.PhasePhStart("");
            model.PhasePhFinish("");
            $("#modalAddPhase").modal("show");
            $("#NewPhaseName").kendoDropDownList({ dataSource: { data: model.simulation().PhaseActivities() } });
        },
        PhaseActivities: ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(DataHelper.Populate<WellActivity>("WEISWellActivities")
                            .SelectMany(d => d.Phases).GroupBy(d => d.ActivityType).Select(d => d.Key).OrderBy(d => (d.Equals("n/a") ? "" : d))))),
        PhaseSelected: ko.observable(),
        CalculateDaysOnPhase: function (t) {
            var start = model.PhasePhStart();
            var finish = model.PhasePhFinish();

            //console.log(start);
            //console.log(finish);

            if (start != null && start != "" && finish != null && finish != "") {
                var diffInDays = (finish - start) / (24 * 60 * 60 * 1000);
                $("#DaysCountNewPhase").val(diffInDays);

            }
            else {
                $("#DaysCountNewPhase").val(0);
            }
        },
        delete_phase: function (PhaseNo, DetailId) {
            //console.log(DetailId);
            var conf = confirm("Are you sure you want to delete this phase?")
            if (conf) {
                var data = {};
                data.ActivityId = DetailId;
                data.SimulationId = model.simulation().selectedSimulationId();
                data.PhaseNo = PhaseNo;
                ajaxPost("@Url.Action("DeletePhase")", data, function (response) {
                    detailSimulation(model.simulation().selectedSimulationId());
                }, function (err) {
                    alert('Error occured when delete a phase');
                });
            }
        },
        updatePhase: function (c) {
            var DetailId = $(c).prev().val();
            var GridWrapperId = "#Detail-wrapper-" + DetailId;

            var updatedRecords = [];

            $(GridWrapperId).data("kendoGrid").dataSource._data.forEach(function (f) {
                if (f.dirty) updatedRecords.push(f);
            });
            if (updatedRecords.length == 0) {
                return;
            }

            var data = {};
            data.simulationId = model.simulation().selectedSimulationId();
            data.WellPlanId = DetailId;
            data.updatedPhases = updatedRecords;

            for (var a = 0; a < data.updatedPhases.length; a++) {
                var b = data.updatedPhases[a];
                for (i in b) if (b.hasOwnProperty(i)) {
                    if (i.indexOf(".") > -1) {
                        delete data.updatedPhases[a][i];
                    }
                }

                var phstart = data.updatedPhases[a].PhSchedule.Start;
                if (phstart instanceof Date) {
                    data.updatedPhases[a].PhSchedule.Start = phstart;
                } else {
                    data.updatedPhases[a].PhSchedule.Start = jsonDateStr(phstart);
                }

                var phfinish = data.updatedPhases[a].PhSchedule.Finish;
                if (phfinish instanceof Date) {
                    data.updatedPhases[a].PhSchedule.Finish = phfinish;
                } else {
                    data.updatedPhases[a].PhSchedule.Finish = jsonDateStr(phfinish);
                }
            }


            ajaxPost("@Url.Action("UpdatePhase", "PlanSimulation")", data,
                function (response) {
                    if (response.Success == false) {
                        alert(response.Message);
                        return;
                    }
                    //select();
                    //model.reloadData();
                    alert("Data Saved!");
                    detailSimulation(model.simulation().selectedSimulationId())
                }, function (err) {
                    alert(err.responseText);
                });

            ////console.log(GridWrapperId);
            //alert("Under Construction!");
        },
        deleteSimulation: function (id) {
            var conf = confirm("Are you sure you want to delete this simulation?")
            if (conf) {
                ajaxPost("@Url.Action("DeleteSimulation")", { id: id }, function (response) {
                    if (!response.Success) {
                        alert('Error occured when delete a simulation');
                        return;
                    }
                    model.simulation().populate();
                }, function (err) {
                    alert('Error occured when delete a simulation');
                });
            }
        },
        saveToXLS: function () {
            var SimId = model.simulation().selectedSimulationId();
            document.location.href = "@Url.Action("ExportSimulationToExcel","PlanSimulation")?simulationId=" + SimId;
        },
        commit: function () {
            var SimId = model.simulation().selectedSimulationId();

            if (confirm('Are sure want to Load Simulation data to Current datas Well Activities ? \nTo make sure you data is correct, you can check your simulation by Exporting it to excel File \nYou can Backup your current well activity datas from Administration - Backup and Restore Menu'))
            {
                var start = $('#inputName').data('kendoDatePicker').value();
                model.IsProcessing(true);
                ajaxPost("@Url.Action("CommitSimulation")", { id: SimId, latestSequenceDate: start }, function (response) {
                    console.log(response); //alert(response);
                    if (response.Result != "OK") {
                        alert('Error occured when Commiting simulations to Well Activities Data');
                        model.IsProcessing(false);
                        $("#myModal").modal('hide');
                        return;
                    }
                    //$("#myModal").modal('hide');
                    alert('Simulation has been loaded to WEIS');
                    model.IsProcessing(false);
                    model.simulation().populate();
                }, function (err) {
                    model.IsProcessing(false);
                    alert('Error occured Commiting simulations ');
                });
            }
        }
    });


    function CopySimulation() {
        UncheckAll();
        var x = model.simulation();
        var CopyFrom = $("#ExistingSimulationList").data("kendoDropDownList").value();
        if (CopyFrom != "") {
            var GetWellPlan = _.where(x.SimulationMap(), { SimulationId: CopyFrom });
            ////console.log(GetWellPlan);
            var WellPlans = GetWellPlan[0].WellPlans;
            ////console.log(WellPlans);
            for (var i = 0; i < WellPlans.length; i++) {
                ////console.log(WellPlans[i]);
                var cbxs = $("#grid.k-grid").find("input[value='" + WellPlans[i] + "'].checkme");
                cbxs.prop("checked", "checked");
            }
        }
    }

    $(document).ready(function () {
        model.simulation().populate();
    })
    function detailSimulation(id) {
        //alert(id);
        var x = model.simulation();
        x.changeMode("Detail");
        x.selectedSimulationId(id);
        model.IsProcessing(true);
        ajaxPost("@Url.Action("DetailSimulation")", { id: id }, function (res) {
            ////console.log(res);
            renderGridDetail(res.Data);
            model.SequenceChart.reloadData();
            model.IsProcessing(false);
        }, function () {
            model.IsProcessing(false);
            //console.log(res.Message);
        });

    }
    function renderGridSimulation(data) {
        data = jsonObjsConvDate(data);
        var gridColumns = [];
        var isRO = "@ViewBag.isRO";

        gridColumns.push(
                { field: "Title", title: "Title", template: "<a style='cursor:pointer' onclick='detailSimulation(\"#: _id #\")'>#: Title #</a>" },
                { field: "LastUpdate", title: "Last Update", template: "#= kendo.toString(LastUpdate,'dd-MMM-yyyy ') #" },
                { title: "Action", width: 120, template: "<button class='btn btn-danger btn-xs' onclick='model.simulation().deleteSimulation(\"#: _id #\")'>Delete</button>" }
        );


        $('#gridSimulation').replaceWith($('<div />').attr('id', 'gridSimulation'));
        $('#gridSimulation').kendoGrid({
            dataSource: {
                //schema: {
                //    model: {
                //        PhStart: 'date',
                //        PhFinish: 'date',
                //        OpsStart: 'date',
                //        OpsFinish: 'date',
                //        fields: {
                //            "VirtualPhase": { type: "boolean", editable: false },
                //        }
                //    }
                //},
                data: data,
                type: "json",
                pageSize: 10
            },

            pageable: true,
            sortable: true,
            resizable: true,
            columns: gridColumns
        });

    }

    function getPhases(e) {
        var id = e.data._id;
        model.selectedWellId(id);
        model.simulation().DetailPhaseProcessing(true);
        var param = { id: model.selectedWellId(), simulationId: model.simulation().selectedSimulationId() };
        ////console.log(param);
        ajaxPost("@Url.Action("select","PlanSimulation")", param, function (data) {
            model.SetActivity(data.Data);
            model.SelectedActivity.PsSchedule.Start(str2date(model.SelectedActivity.PsSchedule.Start()));
            model.SelectedActivity.PsSchedule.Finish(str2date(model.SelectedActivity.PsSchedule.Finish()));
            model.SelectedActivity.OpsSchedule.Start(str2date(model.SelectedActivity.OpsSchedule.Start()));
            model.SelectedActivity.OpsSchedule.Finish(str2date(model.SelectedActivity.OpsSchedule.Finish()));


            model.simulation().DetailPhaseProcessing(false);
            //console.log(data);
            var phases;
            var ActId;
            if (data.Data == null) {
                //phases = model.simulation().PhaseModel();
                phases = [];
                ActId = 0;
            } else {
                //console.log(data.Data);
                phases = jsonObjConvDate2(data.Data.Phases);
                ActId = data.Data._id;
            }

            getRowDetail(e, phases, ActId);
            ////console.log("Select : " + data.Data);
            ////console.log(model.SelectedActivity);
            ////console.log(model.SelectedActivity.VirtualPhase);
            ////console.log(jsonObjConvDate2(data.Data.Phases));
            //return jsonObjConvDate2(data.Data.Phases);
        }, function (err) {
            //return "0";
            model.simulation().DetailPhaseProcessing(false);
        });
    }

    function renderGridDetail(data) {
        data = jsonObjsConvDate(data);
        //console.log(data);
        var gridColumns = [];
        gridColumns.push(
                { field: "_id", title: "ID", width: 50, attributes: { style: 'text-align: center;' }, editor: false },
                { field: "RigName", title: "Rig Name", width: 100 },
                { field: "WellName", title: "Well", width: 150, },
                { field: "UARigSequenceId", title: "Rig Sequence ID", width: 60, },
                //{
                //    field: "NonOP", title: "Non OP", width: 80, locked: true, lockable: true,
                //    template: "#: NonOP==true ? 'Yes' : '' #"
                //},
                {
                    field: "NonOP", title: "Non OP", width: 80,
                    template: "#: NonOP==true ? 'Yes' : '' #"
                },
                {
                    title: "OP-14", columns: [
                      { field: "PsStart", template: "#: jsonDateStr(PsStart) #", title: "Start", width: 90, attributes: { style: 'text-align: center;' } },
                      { field: "PsFinish", template: "#: jsonDateStr(PsFinish) #", title: "Finish", width: 90, attributes: { style: 'text-align: center;' } },
                      { field: "PlanDuration", title: "Days", width: 60, format: "{0:N0}", attributes: { style: 'text-align:right;' } },
                      { field: "PlanCost", title: "Cost<br/>($mm)", width: 60, format: "{0:N1}", attributes: { style: 'text-align:right;' } }
                    ]
                },
                {
                    title: "Latest Sequence", columns: [
                      {
                          field: "PhStart", title: "Start", template: "#: jsonDateStr(OpsStart) #",
                          width: 90, attributes: { style: 'text-align: center;' }
                      },
                      { field: "PhFinish", title: "Finish", template: "#: jsonDateStr(OpsFinish) #", width: 90, attributes: { style: 'text-align: center;' } },
                      { field: "OpsDuration", title: "Duration<br />(Days)", width: 60, format: "{0:N0}", attributes: { style: 'text-align:right;' } },
                      { field: "OpsCost", title: "Cost<br/>($mm)", width: 60, format: "{0:N1}", attributes: { style: 'text-align:right;' } }
                    ]
                },
                // { field: "PhRiskDuration", title: "PL Risk<br/>Duration<br />(Days)", width: 60, format: "{0:N0}", attributes: { style: 'text-align:right;' } },
                {
                    field: "LE", columns: [
                      { field: "LEStart", title: "Start", template: "#: jsonDateStr(LEStart) #", width: 90, attributes: { style: 'text-align: center;' } },
                      { field: "LEFinish", title: "Finish", template: "#: jsonDateStr(LEFinish) #", width: 90, attributes: { style: 'text-align: center;' } },
                      { field: "LEDuration", title: "Duration<br />(Days)", width: 60, format: "{0:N0}", attributes: { style: 'text-align:right;' } },
                      { field: "LECost", title: "Cost<br />(US$ m)", width: 60, format: "{0:N1}", attributes: { style: 'text-align:right;' } }
                    ]
                },
                {
                    field: "AFE", columns: [
                      { field: "AFEDuration", title: "Duration<br />(Days)", width: 60, format: "{0:N0}", attributes: { style: 'text-align:right;' } },
                      { field: "AFECost", title: "Cost<br />(US$ m)", width: 60, format: "{0:N1}", attributes: { style: 'text-align:right;' } },
                    ]
                },
                { field: "Region", title: "Region", width: 80 },
                { field: "OperatingUnit", title: "Operating Unit", width: 80 },
                { field: "RigType", title: "Rig Type", width: 80 },
                { field: "ProjectName", title: "Project Name", width: 120 },
                { field: "AssetName", title: "Asset Name", width: 120 },
                { field: "WorkingInterest", title: "Working Interest", width: 80, format: "{0:N5}", attributes: { style: 'text-align:right;' } },
                { field: "FirmOrOption", title: "Firm/Option", width: 80 },
                { field: "UARigDescription", title: "UA Rig Description", width: 150 }
        );


        $('#gridDetail').replaceWith($('<div />').attr('id', 'gridDetail'));
        $('#gridDetail').kendoGrid({
            dataSource: {
                schema: {
                    model: {
                        PhStart: 'date',
                        PhFinish: 'date',
                        OpsStart: 'date',
                        OpsFinish: 'date',
                        fields: {
                            "VirtualPhase": { type: "boolean", editable: false },
                        }
                    }
                },
                data: data,
                type: "json",
                pageSize: 10
            },

            pageable: true,
            sortable: true,
            resizable: true,
            columns: gridColumns,
            detailTemplate: kendo.template($("#grid_detail_template").html()),
            detailInit: getPhases
        });
    }

    function getRowDetail(e, datas, DetailId) {
        //console.log(e);
        var detailRow = e.detailRow;
        var id = e.data._id;
        detailRow.find(".row-detail").html("").attr('id', "Detail-wrapper-" + id);
        detailRow.find(".DetailId").val(id);
        detailRow.find(".btn").show();
        var columnPhases = [];
        columnPhases.push(
            { title: "Del", field: 'PhaseNo', width: 50, locked: true, lockable: false, template: "<div style='text-align: center'><button onclick='model.simulation().delete_phase(\"#=PhaseNo#\"," + DetailId + ")' class='btn btn-custom btn-danger btn-xs'><span class='glyphicon glyphicon-remove-circle'></span></button></div>" }

            );

        columnPhases.push(
                { title: "Phase", field: "ActivityType", width: 230, locked: true, lockable: false, },
                //{
                //    title: "No well Schedule", field: 'VirtualPhase', width: 100, locked: true, lockable: false, editable: true,
                //    template: '<input onclick="generateEditor(this)" type="checkbox" #= VirtualPhase ? checked="checked" : "" # ></input>'
                //},
                {
                    title: "OP-14", columns: [
                      //{ title: "Level of<br/>Estimate", field: 'LevelOfEstimate', width: 50, template: "<div style='text-align: right'>#=LevelOfEstimate#</div>" },
                      {
                          title: "Start", field: 'PlanSchedule.Start', width: 90, locked: true, lockable: false, format: "{0:dd-MMM-yyyy}",
                          template: "#: jsonDateStr(PlanSchedule.Start) #", attributes: { style: "text-align: center;" }
                      },
                      {
                          title: "Finish", field: 'PlanSchedule.Finish', width: 90, locked: true, lockable: false, format: "{0:dd-MMM-yyyy}",
                          template: "#: jsonDateStr(PlanSchedule.Finish) #", attributes: { style: "text-align: center;" }
                      },
                      { title: "Days", field: 'Plan.Days', width: 70, template: "<div style='text-align: right'>#=kendo.toString(Plan.Days, 'N0')#</div>" },
                      { title: "Cost", field: 'Plan.Cost', width: 80, template: "<div style='text-align: right'>#=kendo.toString(Plan.Cost, 'N1')#</div>" },
                    ]
                },
                {
                    title: "Latest Sequence", columns: [
                      {
                          title: "Start", field: 'PhSchedule.Start', width: 90, locked: true, lockable: false,
                          format: "{0:dd-MMM-yyyy}", attributes: { style: "text-align: center;" }
                      },
                      {
                          title: "Finish", field: 'PhSchedule.Finish', width: 90, locked: true, lockable: false, format: "{0:dd-MMM-yyyy}",
                          template: "#: jsonDateStr(PhSchedule.Finish) #", attributes: { style: "text-align: center;" }
                      },
                      {
                          title: "Days", field: 'OP.Days', width: 60, locked: true, lockable: false, editable: false,
                          template: "<div style='text-align: center'>#=kendo.toString(OP.Days, 'N0')#</div>"
                      },
                      {
                          title: "Cost", field: 'OP.Cost', width: 80, locked: true, lockable: false,
                          template: "<div style='text-align: right'>#=kendo.toString(OP.Cost, 'N1')#</div>"
                      }
                    ]
                },
                {
                    title: "LE", columns: [
                      {
                          title: "Start", field: 'LESchedule.Start', width: 90, locked: true, lockable: false, editable: false, format: "{0:dd-MMM-yyyy}",
                          template: "#: jsonDateStr(LESchedule.Start) #", attributes: { style: "text-align: center;" }
                      },
                      {
                          title: "Finish", field: 'LESchedule.Finish', width: 90, locked: true, lockable: false, editable: false, format: "{0:dd-MMM-yyyy}",
                          template: "#: jsonDateStr(LESchedule.Finish) #", attributes: { style: "text-align: center;" }
                      },
                      { title: "Days", field: 'LE.Days', width: 50, template: "<div style='text-align: right'>#=kendo.toString(LE.Days, 'N0')#</div>", editable: false },
                      { title: "Cost", field: 'LE.Cost', width: 80, template: "<div style='text-align: right'>#=kendo.toString(LE.Cost, 'N1')#</div>", editable: false },
                    ]
                },
                {
                    title: "AFE", columns: [
                      { title: "Days", field: 'AFE.Days', width: 50, template: "<div style='text-align: right'>#=kendo.toString(AFE.Days, 'N0')#</div>" },
                      { title: "Cost", field: 'AFE.Cost', width: 80, template: "<div style='text-align: right'>#=kendo.toString(AFE.Cost, 'N1')#</div>" },
                    ]
                },
                {
                    title: "TQ/Agreed Target", columns: [
                      { title: "Days", field: 'TQ.Days', width: 50, template: "<div style='text-align: right'>#=kendo.toString(TQ.Days, 'N0')#</div>" },
                      { title: "Cost", field: 'TQ.Cost', width: 80, template: "<div style='text-align: right'>#=kendo.toString(TQ.Cost, 'N1')#</div>" },
                    ]
                },
                {
                    title: "Actual", columns: [
                      { title: "Days", field: 'Actual.Days', width: 50, template: "<div style='text-align: right'>#=kendo.toString(Actual.Days, 'N0')#</div>", editable: true },
                      { title: "Cost", field: 'Actual.Cost', width: 80, template: "<div style='text-align: right'>#=kendo.toString(Actual.Cost, 'N1')#</div>", editable: true },
                    ]
                },
                { title: "Weekly Report Date", field: 'LastWeek', width: 100, editable: false, template: "<div data-weekly-report='#= isOnWeeklyReport(LastWeek) #'>#= jsonDateStr(LastWeek) #</div>" },
                { title: "Phase No", field: 'PhaseNo', width: 80, template: "<div style='text-align: center'>#=kendo.toString(PhaseNo, 'N0')#</div>", editable: false }

        );

        var source = new kendo.data.DataSource({
            pageSize: 5,
            data: datas,
            schema: {
                model: {
                    id: "PhaseNo",
                    fields: {
                        "VirtualPhase": { type: "boolean", editable: false },
                        "LevelOfEstimate": { type: "string", editable: false },
                        "ActivityType": { type: "string", editable: false },
                        "ActivityDescEst": { type: "string", editable: false },
                        "PlanSchedule.Start": { type: "date", editable: false },
                        "PlanSchedule.Finish": { type: "date", editable: false },
                        "PhSchedule.Start": { type: "date", editable: true },
                        "PhSchedule.Finish": { type: "date", editable: true },
                        "PhSchedule.Days": { type: "number", editable: false },
                        "LESchedule.Start": { type: "date", editable: false },
                        "LESchedule.Finish": { type: "date", editable: false },
                        "LESchedule.Days": { type: "number", editable: false },
                        "Plan.Days": { type: "number", editable: false },
                        "Plan.Cost": { type: "number", editable: false },
                        "OP.Days": { type: "number", editable: false },
                        "OP.Cost": { type: "number", editable: false },
                        "AFE.Days": { type: "number", editable: false },
                        "AFE.Cost": { type: "number", editable: false },
                        "TQ.Cost": { type: "number", editable: false },
                        "TQ.Days": { type: "number", editable: false },
                        "Actual.Cost": { type: "number", editable: false },
                        "Actual.Days": { type: "number", editable: false },
                        "LE.Cost": { type: "number", editable: false },
                        "LE.Days": { type: "number", editable: false },
                        "LWE.Cost": { type: "number", editable: false },
                        "LWE.Days": { type: "number", editable: false },
                        "M1.Cost": { type: "number", editable: false },
                        "M1.Days": { type: "number", editable: false },
                        "M2.Cost": { type: "number", editable: false },
                        "M2.Days": { type: "number", editable: false },
                        "M3.Cost": { type: "number", editable: false },
                        "LastWeek": { type: "date", editable: false },
                        "M3.Days": { type: "number", editable: false },
                        "PhaseNo": { type: "number", editable: false },
                    }
                },
            },
            batch: true,
            //change: onChangeValue
        });

        detailRow.find(".row-detail").kendoGrid({
            dataSource: source,
            pageable: {
                buttonCount: 10
            },
            navigatable: true,
            editable: true,
            sortable: true,
            filterable: false,
            columns: columnPhases,
            //dataBound: function () {
            //    $("#grid_wrapper").find(".k-grid-content").find("[data-weekly-report=1]").each(function (i, e) {
            //        $(e).closest("tr[data-uid]").find("td:gt(8):lt(4)").each(function (i, f) {
            //            $(f).css("pointer-events", "none");
            //        });
            //    });
            //}
        });
    }
</script>