@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_common_v1.cshtml";
}

<script>
    model.PageId("Administration");
    model.IsProcessing = ko.observable(false);
</script>


<div>

    <div class="box">
        <h4>Latest Sequence Data Maintenance</h4>
        <b>This module is use for upload Latest Sequence (LS) Excel </b>
        <ul type="circle">
            <li><b style="color:brown"> Select</b> a LS file to upload</li>
            <li>After data has been uploaded, you can <a class="btn-xs btn-warning">Download</a> it, or <a class="btn-xs btn-danger">Load to WEIS</a> function, </li>
            <li>Before Executing Process will start, application will create a single restore point of Well Activity Datas, naming it with : <i style="color:darkorange;">_WellActivity_yyyyMMddhhmmss</i>, so you be able to roolback your data, with run restore function and select data point you decided <a href="~/shell/BackupRestore"> Administration Page - Backup and Restore </a>menu </li>
        </ul>
    </div>
    <div class="col-md-12 no-padding">
        <div data-bind="visible: model.IsProcessing()">
            @Html.Partial("_processing")
        </div>

        <div data-bind="visible: !model.IsProcessing()">


            <ul class="nav nav-tabs" role="tablist">
                <li role="presentation" class="active">
                    <a href="#tab1" aria-controls="home" role="tab" data-toggle="tab">Uploaded LS Files</a>
                </li>
                <li role="presentation">
                    <a href="#tab2" aria-controls="profile" role="tab" data-toggle="tab">Loaded LS Datas</a>
                </li>
            </ul>

            <div>
                <div class="demo-section k-header">
                    <input name="files" id="files" type="file" />
                </div>
            </div>



            <div class="tab-content">
                <div role="tabpanel" class="tab-pane active" id="tab1">
                    <div class="grid grid1"></div>
                </div>
                <div role="tabpanel" class="tab-pane" id="tab2">
                    <div class="grid grid2"></div>
                </div>
            </div>
        </div>
    </div>

    <script>

        $(document).ready(function () {
            $("#files").kendoUpload({
                async: {
                    saveUrl: '@Url.Action("Upload", "UploadLS")',
                    removeUrl: "remove",
                    autoUpload: false
                },
                complete: onComplete,
                select: onSelect
            });




            $("#inputName").kendoDatePicker({
                format: jsonDateFormat,
                start: "month",
                depth: "month",
                parseFormats: ["dd-MMM-yyyy"],
                max: new Date(3001, 1, 1)
            }
            );

            var dateNow = Date();
            console.log(dateNow);
            var s = moment(dateNow).format('DD-MMM-YYYY');
            console.log(s);
            $('#inputName').data('kendoDatePicker').value(s);
        });
    </script>

    <div class="modal fade myModal" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                        <h4 class="modal-title">Latest Sequence Date</h4>
                    </div>
                    <div class="modal-body">
                        <form id="form_new_phase" class="k-content">
                            <div class="form-group">
                                <div class="col-md-12">
                                    <label style="text-align:right; font-weight:bold;">File to Load : </label><input readonly="readonly" id="inputFile" type="text" style="border:none;width:400px">
                                </div>
                                <div class="col-md-8">
                                    <label style="text-align:right; font-weight:bold;">latest Sequence Date : </label><input id="inputName" type="text" class="entry-date">
                                </div>
                            </div>
                            <div class="clearfix">&nbsp;</div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-custom btn-sm btn-shell" data-dismiss="modal">
                            Cancel
                        </button>
                        <button type="button" class="btn btn-custom btn-sm btn-primary" onclick="LoadToWEIS();">
                            <span class="glyphicon glyphicon-ok"></span> Load to WEIS
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade myModal" id="modal-preview" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" >
    <div class="modal-dialog" style="width:700px">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                    <span class="sr-only">Close</span>
                </button>
                <h4 class="modal-title" id="myModalLabel">Preview</h4>
            </div>
            <div class="modal-body">
                <div class="grid-preview-container">
                    <div id="grid-preview"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function Execute(id) {
        model.IsProcessing(true);
        ajaxPost("@Url.Action("Execute")", { id: id }, function (res) {
            if (res.Result == "OK") {
                alert("Lastest Sequence Updater success");
                model.IsProcessing(false);
            } else {
                //alert(res.Message);
                model.IsProcessing(false);
            }
        }, function () {
            //alert(res.Message);
            model.IsProcessing(false);
        });
    }

    function DeleteBackup(id) {
        if (!confirm('Are you sure want to delete?'))
            return;
        alert(id);
        model.IsProcessing(true);

        ajaxPost("@Url.Action("DeleteBackup")", { id: id }, function (res) {
            if (res.Result == "OK") {
                alert("Backup Data has been deleted");
                model.IsProcessing(false);
                model.LoadDataGridCollection();
            } else {
                //alert(res.Message);
                model.IsProcessing(false);
            }
        }, function () {
            //alert(res.Message);
            model.IsProcessing(false);
        });
    }
    function ClearDataUpload() {

        var up = $('#files').data().kendoUpload;
        var allLiElementsToBeRemoved = up.wrapper.find('.k-file');
        up._removeFileEntry(allLiElementsToBeRemoved);

    }

    function onSelect(e) {
        $.each(e.files, function (index, value) {
            //alert(value.extension);
            var ok = value.extension == ".xlsx"
                     || value.extension == ".xls"

            if (!ok) {
                e.preventDefault();
                alert("Please upload only Excel (xls, xlsx) files");
            }
        });
    }


    function Preview(e) {
        $("#modal-preview").modal("show");
        console.log(e);
        var url = "@Url.Action("Preview", "UploadLS")";
        ajaxPost(url, { collName: e }, function (res) {
            if (res.Result === "NOK") {
                model.IsProcessing(true);
                alert("Error occured when saving data");
                return;
            }
            else {
                console.log(res.Data);

                

                
                //var kg = g.data("kendoGrid");

                var columnsConfig = [];
                //columnsConfig.push({ field: "_id", title: "id" });
                columnsConfig.push({ field: "Rig_Type", title: "Rig Type" });
                columnsConfig.push({ field: "Rig_Name", title: "Rig Name" });
                columnsConfig.push({ field: "Well_Name", title: "Well Name" });
                columnsConfig.push({ field: "Activity_Type", title: "Activity Type" });
                columnsConfig.push({ field: "Activity_Description", title: "Activity Description" });
                columnsConfig.push({ field: "Start_Date", title: "Start Date" });
                columnsConfig.push({ field: "End_Date", title: "End Date" });
                columnsConfig.push({ field: "YearStart", title: "Year Start" });
                columnsConfig.push({ field: "YearEnd", title: "Year End" });

                console.log(columnsConfig);

                var $grid = $("#grid-preview");
                //$grid.replaceWith($('<div />').attr('id', 'grid-preview'));
                $grid.kendoGrid({
                    dataSource: {
                        //schema: {
                        //    model: {
                        //        PhStart: 'date',
                        //        PhFinish: 'date',
                        //        OpsStart: 'date',
                        //        OpsFinish: 'date',
                        //    }
                        //},
                        data: res.Data,
                        type: "json",
                        pageSize: 10
                    },
                    editable: true,
                    sortable: true,
                    scrollable: false,
                    pageable: true,
                    columns: columnsConfig
                });
            }
        });

    };

    function onUpload(e) {
        alert('onUpload');
        console.log("onupload");

        var url = '@Url.Action("Upload", "UploadOP")';
        //model.IsProcessing(true);

        ajaxPost(url, "", function (res) {
            alert('after upload');
        }, function (a, b, c) {
            alert('error upload');
            //alert('Error occured when loading data');
        });

    }

    function onSuccess(e) {
        alert('onSuccess');
        console.log("onSuccess");
        //kendoConsole.log("Success (" + e.operation + ") :: " + getFileInfo(e));
    }

    function onError(e) {
        alert('onError');
        console.log("onError");

        //kendoConsole.log("Error (" + e.operation + ") :: " + getFileInfo(e));
    }

    function onComplete(e) {
        model.LoadDataGrid();
    }

    function onCancel(e) {
        alert('onCancel');

        console.log("onCancel");

    }

    function onRemove(e) {
        alert('onRemove');
        console.log("Remove :: " + getFileInfo(e));
    }

    function onProgress(e) {
        alert('onProgress');

        console.log("Upload progress :: " + e.percentComplete + "% :: " + getFileInfo(e));
    }

    function getFileInfo(e) {
        return $.map(e.files, function (file) {
            var info = file.name;

            // File size is not available in all browsers
            if (file.size > 0) {
                info += " (" + Math.ceil(file.size / 1024) + " KB)";
            }
            return info;
        }).join(", ");
    }

    function DateTimeParse(date) {
        return moment(jsonDateStr(date), 'DD-MMM-YYYY').format("DD-MMM-YYYY ");
    }

    function DateTimeParseMonth(date) {
        return moment(jsonDateStr(date), 'DD-MMM-YYYY').format("MMM-YYYY ");
    }

    function OpenModal(id) {
        //alert(id);

        $('#inputFile').val(id);
        $("#myModal").modal('show');
    }

    function LoadToWEIS(id) {
        //if (!confirm('Are you sure want to replace data from this LE file?'))
        //    return;
        model.IsProcessing(true);

        var start = $('#inputName').data('kendoDatePicker').value();
        var file = $('#inputFile').val();

        console.log(start);
        console.log(file);
        //model.IsProcessing(false);
        ajaxPost("@Url.Action("LoadToWEIS")", { FileName: file, DateSequence: start }, function (res) {
            if (res.Result == "OK") {
                $("#myModal").modal('hide');
                model.IsProcessing(false);
                //alert("Converting LE File to Collection Done");
                Execute(res.CollectionName);

                model.LoadDataGridCollection();
            } else {
                $("#myModal").modal('hide');
                alert(res.Message + ret.Trace);
                model.IsProcessing(false);
            }
        }, function () {
            alert(res.Message);
            model.IsProcessing(false);
        });
    }


    function Download(id) {
        model.IsProcessing(true);
        var url = '@Url.Action("Download")' + "?id=" + id;
        location.href = url;
        model.IsProcessing(false);
    }


    $(document).ready(function () {
        model.LoadDataGrid();
        ClearDataUpload();
        model.LoadDataGridCollection();
    });

    model.LoadDataGrid = function () {

        var url = '@Url.Action("LoadGridData", "UploadLS")';
        ajaxPost(url, "", function (res) {
            console.log(res);
            LoadGrid(res.Data);
        }, function (a, b, c) {
            console.log(a);
            console.log(b);
            console.log(c);
            alert('Error occured when fetching data from server');
            model.IsProcessing(false);
        });

        LoadGrid = function (data) {
            $('.grid1').replaceWith($('<div />').addClass('grid grid1'));
            $('.grid1').kendoGrid({
                dataSource: { data: data, type: "json", pageSize: 5 },
                pageable: true,
                sortable: true,
                resizable: true,
                columns: [
                    { field: "FileName", title: "File Name" },
                    { field: "CreateDate", title: "Create Date", width: 90, template: "#: DateTimeParse(CreateDate) #", },
                    { field: "LastWrite", title: "Last Write", width: 90, template: "#: DateTimeParse(LastWrite) #", },
                    {
                        title: "", width: 80,
                        template: "<button class='btn btn-xs btn-warning' onclick='Download(\"#: FileName #\")'>Download</a>"
                        //template: "<div style='text-align: center;'><a class='k-button k-button-icontext' style='cursor:pointer' onclick='Download(\"#: FileName #\")'>Download</a></div>", width: 100
                    },
                    {
                        title: "", width: 100,
                        template: "<button class='btn btn-xs btn-danger' onclick='OpenModal(\"#: FileName #\")'>Load to WEIS</a>"
                        //template: "<div style='text-align: center;'><a class='k-button k-button-icontext' style='cursor:pointer' onclick='LoadToWEIS(\"#: FileName #\")'>Load</a></div>", width: 90
                    }


                ],

            });
        };
    };
    model.LoadDataGridCollection = function () {

        var url = '@Url.Action("LoadCollection", "UploadLS")';
        ajaxPost(url, "", function (res) {

            LoadGridCollection(res.Data);

        }, function (a, b, c) {
            console.log(a);
            console.log(b);
            console.log(c);
            alert('Error occured when fetching data from server');
            model.IsProcessing(false);
        });

        LoadGridCollection = function (data) {
            $('.grid2').replaceWith($('<div />').addClass('grid grid2'));
            $('.grid2').kendoGrid({
                dataSource: { data: data, type: "json", pageSize: 5 },
                pageable: true,
                sortable: true,
                resizable: true,
                columns: [
                    { field: "CollectionName", title: "Collection Name" },
                    { field: "LatestSequenceDate", title: "Latest Sequence Date", width: 200, template: "#: DateTimeParse(LatestSequenceDate) #", },
                    //{
                    //    title: "", width: 135,
                    //    template: "<button class='btn btn-xs btn-warning' onclick='Execute(\"#: CollectionName #\")'>Execute and Update</a>"
                    //    //template: "<div style='text-align: center;'><a class='k-button k-button-icontext' style='cursor:pointer' onclick='Restore(\"#: CollectionName #\")'>Restore</a></div>", width: 100
                    //},
                     {
                         title: "", width: 100,
                         template: "<button class='btn btn-sm btn-custom btn-primary' onclick='Preview(\"#: CollectionName #\")'><span class='glyphicon glyphicon-eye-open'></span> Preview</a>"
                         //template: "<div style='text-align: center;'><a class='k-button k-button-icontext' style='cursor:pointer' onclick='Restore(\"#: CollectionName #\")'>Restore</a></div>", width: 100
                     },
                    {
                        title: "", width: 100,
                        template: "<button class='btn btn-sm btn-danger' onclick='DeleteBackup(\"#: CollectionName #\")'><span class='glyphicon glyphicon-minus-sign'></span> Delete</a>"
                        //template: "<div style='text-align: center;'><a class='k-button k-button-icontext' style='cursor:pointer' onclick='DeleteBackup(\"#: CollectionName #\")'>Delete</a></div>", width: 90
                    }
                ],

            });
        };
    };

</script>
