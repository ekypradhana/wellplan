@{
    ViewBag.Title = "Weekly Update Report";
    Layout = "~/Views/Shared/_common_v1.cshtml";
}
@using ECIS.Core;
@using ECIS.Client.WEIS;
@using MongoDB.Driver;
@using MongoDB.Driver.Builders;
@using Newtonsoft.Json;

<style>
    .form-group {
        margin-bottom: 2px;
    }

    input[disabled] {
        background-color: whitesmoke;
        border: none;
    }

    .cgrid{
        margin-bottom:20px;
    }

    .grid{
    }
</style>

<style>
    .cell-date {
        text-align: center;
    }

    .cell-number {
        text-align: right;
    }

    #tableAllocation th {
        text-align: center;
    }

    #tableAllocation td {
        padding: 5px;
    }

    #tableAllocation tfoot td {
        font-weight: bold;
        text-align: right;
        background-color: lightgrey;
    }

    #tableAllocation tbody td {
        text-align: right;
    }

    .form-wrapper div {
        padding-bottom: 3px;
    }

        .form-wrapper div label {
            line-height: 23px;
        }

    .form-control {
        font-size: 9pt;
    }

    input[type='text'] {
        line-height: 20px;
    }

    .k-invalid-msg {
        margin-left: 30px;
    }

    #modalPIP .modal-dialog {
        width: 1000px;
    }
</style>

<script>

    function validateEntry() {
        if (
            $("#site").val().trim() == "" ||
            $("#company").val().trim() == "" ||
            $("#WellType").val().trim() == "" ||
            $("#Objective").val().trim() == "" ||
            $("#contractor").val().trim() == "" ||
            $("#rigsuperintendent").val().trim() == "" ||
            $("#project").val().trim() == "" ||
            $("#EventType").val().trim() == "" ||
            $("#eventstartdate").val().trim() == "" ||
            $("#workunit").val().trim() == "" ||
            $("#originalspuddate").val().trim() == ""
          ) {
            return "0";
        }
        else {
            return "1";
        }
    }
    model.PageId("Weekly Report");

    model.IsProcessing = ko.observable(false);
    model.NumberOfGrids = ko.observable();
    model.Loaders = ko.observable();

    @*var isAdmin = @ViewBag.isAdmin
    alert(isAdmin);*@

    model.wrmodel = ko.observable({
        isAdmin: ko.observable(@ViewBag.isAdmin),
        isRO: ko.observable(@ViewBag.isRO),
        WordCount: ko.observable(@ViewBag.WordCount),
        NPTHours : ko.observable(),
        DataGridWork: ko.observableArray([]),
        StartDate: ko.observable("@String.Format("{0:dd-MMM-yyyy}",Tools.GetNearestDay(DateTime.Now.AddDays(6),DayOfWeek.Monday))"),
        StartComment: ko.observable(""),
        SearchDate: ko.observable(),
        SearchRigNames: ko.observableArray([]),
        SearchWellNames: ko.observableArray([]),
        WellSelected: ko.observable(""),
        WellNameNew: ko.observable(""),
        CostScale: ko.observable("million"),
        record: ko.observable(ko.mapping.fromJS(@MvcHtmlString.Create(JsonConvert.SerializeObject(new WellActivityUpdate())))),

        add: function () {
            var t = this;
            t.record(ko.mapping.fromJS(@MvcHtmlString.Create(JsonConvert.SerializeObject(new WellActivityUpdate()))));
            t.record().UpdateVersion(jsonDateStr(t.record().UpdateVersion()));
            t.mode("New");
            initForm();
        },
        submit: function () {
            var t = this;
            model.IsProcessing(true);
            var url = "@Url.Action("submit")";
            ajaxPost(url, { id: t.record()._id() },
                function (data) {
                    model.IsProcessing(false);
                    if (data.Result != "OK") {
                        alert(data.Message);
                        return;
                    }
                    refresh();
                    model.wrmodel().mode("");
                })
        },
        cancel: function () {
            model.ActivityId("");
            var t = this;
            refresh();
            t.mode("");
        },
        refresh: function () {
            refresh();
        },
        print: function () {
            PrintDocument();
        },
        remove: function () {
            ajaxPost("@Url.Action("Delete")",
                function (data) {
                    var t = this;
                    t.mode("");
                    model.refresh();
                },
                function (err) {
                    alert(err.responseText);
                })
        },
        save: function (ActionAfter) {
            var x = this;
            var t = model.wrmodel();
            var validate = validateEntry();
            var p = ko.mapping.toJS(model.wrmodel().record());
            //_.each(p.Elements, function (e) {
            //    e.Completion = (e.Completion <= 0 ? 0 : (e.Completion / 100));
            //});
            var cost_scale = $("#cost_scale").val();
            switch (cost_scale) {
                case "million":
                    p.CurrentWeek.Cost = p.CurrentWeek.Cost * 1000000;
                    break;
                case "thousand":
                    p.CurrentWeek.Cost = p.CurrentWeek.Cost * 1000;
                    break;
                default:
                    p.CurrentWeek.Cost = p.CurrentWeek.Cost;
                    break;
            }
            var r = ko.mapping.fromJS(p);
            console.log(r);
            if (validate == validate) {
                if (model.IsProcessing()) return;
                model.IsProcessing(true);
                var url = "@Url.Action("Save")";
                r.UpdateVersion(jsonDateStr(r.UpdateVersion()));
                r.EventStartDate = $("#eventstartdate").val();
                r.OriginalSpudDate = $("#originalspuddate").val();
                ajaxPost(url, r, function (data) {
                    //console.log(data);
                    if (data.Result == "OK") {
                        model.IsProcessing(false);
                        switch (ActionAfter) {
                            case "submit":
                                x.submit();
                                break;
                            case "print":
                                x.print();
                                break;
                            default:
                                refresh();
                                t.mode("");
                                break;
                        }
                    }
                    else {
                        model.IsProcessing(false);
                        alert(data.Message);
                    }
                },
                function (err) {
                    alert(err.responseText);
                })
            }
            else {
                alert('Please fill the mandatory field(s)');
                return;
            }

            //console.log(t);
            //if (t.record().NewWell() == true) {
            //    t.record().WellName(t.WellNameNew());
            //}
            //else {
            //    t.record().WellName(t.WellSelected());
            //}

        },
        reopen: function () {
            var t = this;
            model.IsProcessing(true);
            var url = "@Url.Action("Reopen")";
            ajaxPost(url, { id: t.record()._id() },
                function (data) {
                    model.IsProcessing(false);
                    if (data.Result != "OK") {
                        alert(data.Message);
                        return;
                    }
                    refresh();
                    model.wrmodel().mode("");
                })
        },
        Delete: function () {
            var t = this;
            if (t.record().Status() != "In-Progress") {
                return;
            }
            var konf = confirm("Are you sure you want to delete this data?");
            if (!konf) {
                return;
            }
            model.IsProcessing(true);
            ajaxPost("@Url.Action("Delete")", {id: model.ActivityId()},
                function (data) {
                    model.IsProcessing(false);
                    if (data.Success != true) {
                        alert(data.Message);
                        return;
                    }
                    refresh();
                    model.wrmodel().mode("");
                },
                function (err) {
                    alert(err.responseText);
                })
        },
        wfstart: function () {
            if (model.IsProcessing()) return;

            model.IsProcessing(true);
            var gs = $("#gridwork").data().kendoGrid;
            var cbphases = $("#gridwork").find("input.cb-phase:checked");
            var ids = [];
            $.each(cbphases, function (idx, obj) {

                var cbObj = $(obj);
                ids.push(cbObj.val());
                //alert(cbObj.val());
            });
            console.log(ids);
            //return;
            //alert(ids);

            var url = "@Url.Action("WFStart")";
            ajaxPost(url,
                {
                    StartDate: $("#dateWork").val(), StartComment: $("#CommentTxt").val(),
                    WellActivityIds: ids
                },
                function (data) {
                    model.IsProcessing(false);
                    refresh();
                    model.wrmodel().mode("");
                });
        },
        wfdistribute: function () {
            var ids = $("#grid-submitted").find("input.checkme:checked");
            var idValues = $.map(ids, function (obj, idx) {
                var $obj = $(obj);
                return $obj.val();
            });
            if (idValues.length == 0) {
                alert("Please select at least one submitted Weekly Report to be dsitributed");
                return;
            }
            var url = "@Url.Action("Distribute")";
            model.IsProcessing(true);
            ajaxPost(url, { ids: idValues }, function (data) {
                model.IsProcessing(false);
                if (data.Result != "OK") {
                    showErr(data.Message + data.Trace);
                    return;
                };
                refresh();
            },
            showErr)
        },
        wfreminder: function () {
            var ids = $("#grid-progress").find("input.checkme:checked");
            var idValues = $.map(ids, function (obj, idx) {
                var $obj = $(obj);
                return $obj.val();
            });
            if (idValues.length == 0) {
                alert("Please select at least one in-progress Weekly Report to be reminded");
                return;
            }
            model.IsProcessing(true);
            ajaxPost("@Url.Action("SendReminder")", {ids:idValues},
                function (data) {
                    model.IsProcessing(false);
                    if (data.Result != "OK") {
                        alert(data.Message + data.Trace);
                        return;
                    }
                    alert("Reminder has been sent")
                },
                showErr)
        },
        wfinit: function () {
            initGridWork();
            model.wrmodel().mode("wf");
        },
        selectSequence: function () {
            var t = model.wrmodel();
            t.mode("Select");
        },
        selectCancel: function () {
            var t = model.wrmodel();
            t.mode("New");
        },
        processing: ko.observable(false),
        mode: ko.observable(""),

        CompletionTotal: ko.observable(0),
        DaysPlanImprovementTotal: ko.observable(0),
        DaysLastWeekImprovementTotal: ko.observable(0),
        DaysActualImprovementTotal: ko.observable(0),
        DaysCurrentWeekImprovementTotal: ko.observable(0),
        DaysLastWeekRiskTotal: ko.observable(0),
        DaysActualRiskTotal: ko.observable(0),
        DaysCurrentWeekRiskTotal: ko.observable(0),
        CostPlanImprovementTotal: ko.observable(0),
        CostLastWeekImprovementTotal: ko.observable(0),
        CostActualImprovementTotal: ko.observable(0),
        CostCurrentWeekImprovementTotal: ko.observable(0),
        CostLastWeekRiskTotal: ko.observable(0),
        CostActualRiskTotal: ko.observable(0),
        CostCurrentWeekRiskTotal: ko.observable(0),
        showPercentage: function (data) {
            return kendo.toString(data, "p0");
        }
    });

    model.AssetNames = ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(
        DataHelper.Populate("WEISAssetNames").Select(d=>d.GetString("_id")).OrderBy(d=>d)
    )));

    model.WellNames = ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(
        DataHelper.Populate("WEISWellNames", Query.NE("IsVirtualWell", true)).Select(d => d.GetString("_id")).OrderBy(d => d)
    )));

    model.RigNames = ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(
        DataHelper.Populate("WEISRigNames").Select(d=>d.GetString("_id")).OrderBy(d=>d)
    )));

    model.Activities = ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(
        DataHelper.Populate("WEISActivities").Select(d=>d.GetString("_id")).OrderBy(d=>d)
    )));

    model.ActivityId = ko.observable("");
    model.SelectedWellName = ko.observable("");

    ko.bindingHandlers.uniqueId = {
        init: function (element, valueAccessor) {
            var value = valueAccessor();
            value.id = value.id || ko.bindingHandlers.uniqueId.prefix + (++ko.bindingHandlers.uniqueId.counter);

            element.id = value.id;
        },
        counter: 0,
        prefix: "gauge_"
    };

    function count_total() {
        //alert(type);
        var x = model.wrmodel().record().Elements();
        var CompletionTotal = 0;
        var DaysPlanImprovementTotal = 0;
        var DaysLastWeekImprovementTotal = 0;
        var DaysActualImprovementTotal = 0;
        var DaysCurrentWeekImprovementTotal = 0;
        var DaysLastWeekRiskTotal = 0;
        var DaysActualRiskTotal = 0;
        var DaysCurrentWeekRiskTotal = 0;
        var CostPlanImprovementTotal = 0;
        var CostLastWeekImprovementTotal = 0;
        var CostActualImprovementTotal = 0;
        var CostCurrentWeekImprovementTotal = 0;
        var CostLastWeekRiskTotal = 0;
        var CostActualRiskTotal = 0;
        var CostCurrentWeekRiskTotal = 0;
        var j = 0;
        for (var i = 0; i < x.length; i++) {
            j = i + 1;
            //createGauges("gauge_" + j,parseFloat(x[i].CompletionPerc()));
            CompletionTotal = parseFloat(CompletionTotal) + parseFloat(x[i].CompletionPerc());
            DaysPlanImprovementTotal = parseFloat(DaysPlanImprovementTotal) + parseFloat(x[i].DaysPlanImprovement());
            DaysLastWeekImprovementTotal = parseFloat(DaysLastWeekImprovementTotal) + parseFloat(x[i].DaysLastWeekImprovement());
            DaysActualImprovementTotal = parseFloat(DaysActualImprovementTotal) + parseFloat(x[i].DaysActualImprovement());
            DaysCurrentWeekImprovementTotal = parseFloat(DaysCurrentWeekImprovementTotal) + parseFloat(x[i].DaysCurrentWeekImprovement());
            DaysLastWeekRiskTotal = parseFloat(DaysLastWeekRiskTotal) + parseFloat(x[i].DaysLastWeekRisk());
            DaysActualRiskTotal = parseFloat(DaysActualRiskTotal) + parseFloat(x[i].DaysActualRisk());
            DaysCurrentWeekRiskTotal = parseFloat(DaysCurrentWeekRiskTotal) + parseFloat(x[i].DaysCurrentWeekRisk());
            CostPlanImprovementTotal = parseFloat(CostPlanImprovementTotal) + parseFloat(x[i].CostPlanImprovement());
            CostLastWeekImprovementTotal = parseFloat(CostLastWeekImprovementTotal) + parseFloat(x[i].CostLastWeekImprovement());
            CostActualImprovementTotal = parseFloat(CostActualImprovementTotal) + parseFloat(x[i].CostActualImprovement());
            CostCurrentWeekImprovementTotal = parseFloat(CostCurrentWeekImprovementTotal) + parseFloat(x[i].CostCurrentWeekImprovement());
            CostLastWeekRiskTotal = parseFloat(CostLastWeekRiskTotal) + parseFloat(x[i].CostLastWeekRisk());
            CostActualRiskTotal = parseFloat(CostActualRiskTotal) + parseFloat(x[i].CostActualRisk());
            CostCurrentWeekRiskTotal = parseFloat(CostCurrentWeekRiskTotal) + parseFloat(x[i].CostCurrentWeekRisk());
        }

        model.wrmodel().CompletionTotal(number_format(CompletionTotal));
        model.wrmodel().DaysPlanImprovementTotal(number_format(DaysPlanImprovementTotal));
        model.wrmodel().DaysLastWeekImprovementTotal(number_format(DaysLastWeekImprovementTotal));
        model.wrmodel().DaysActualImprovementTotal(number_format(DaysActualImprovementTotal));
        model.wrmodel().DaysCurrentWeekImprovementTotal(number_format(DaysCurrentWeekImprovementTotal));
        model.wrmodel().DaysLastWeekRiskTotal(number_format(DaysLastWeekRiskTotal));
        model.wrmodel().DaysActualRiskTotal(number_format(DaysActualRiskTotal));
        model.wrmodel().DaysCurrentWeekRiskTotal(number_format(DaysCurrentWeekRiskTotal));
        model.wrmodel().CostPlanImprovementTotal(number_format(CostPlanImprovementTotal));
        model.wrmodel().CostLastWeekImprovementTotal(number_format(CostLastWeekImprovementTotal));
        model.wrmodel().CostActualImprovementTotal(number_format(CostActualImprovementTotal));
        model.wrmodel().CostCurrentWeekImprovementTotal(number_format(CostCurrentWeekImprovementTotal));
        model.wrmodel().CostLastWeekRiskTotal(number_format(CostLastWeekRiskTotal));
        model.wrmodel().CostActualRiskTotal(number_format(CostActualRiskTotal));
        model.wrmodel().CostCurrentWeekRiskTotal(number_format(CostCurrentWeekRiskTotal));
    }

    function createGauges(div_id, value) {
        //var value = $("#gauge-value").val();

        $("#" + div_id).kendoLinearGauge({
            pointer: {
                value: value
            },

            scale: {
                majorUnit: 50,
                min: 0,
                max: 100,
                vertical: false
            }
        });
    }

    function number_format(number1) {
        //alert("format:" + number1);
        //var number = number1.replaceAll('.', '');
        number = number1;
        var decimals = 1;
        var dec_point = ".";
        var thousands_sep = ",";
        number = (number + '')
          .replace(/[^0-9+\-Ee.]/g, '');
        var n = !isFinite(+number) ? 0 : +number,
          prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
          sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
          dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
          s = '',
          toFixedFix = function (n, prec) {
              var k = Math.pow(10, prec);
              return '' + (Math.round(n * k) / k)
                .toFixed(prec);
          };
        // Fix for IE parseFloat(0.55).toFixed(0) = 0;
        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n))
          .split('.');
        if (s[0].length > 3) {
            s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
        }
        if ((s[1] || '')
          .length < prec) {
            s[1] = s[1] || '';
            s[1] += new Array(prec - s[1].length + 1)
              .join('0');
        }
        //alert (s.join(dec));
        return s.join(dec);
    }

    function getMonday(id) {
        var d = $(id).data("kendoDatePicker").value();
        //alert(d);
        d = new Date(d);
        var day = d.getDay(),
            diff = d.getDate() - day + (day == 0 ? -6 : 1); // adjust when day is sunday
        var ret = new Date(d.setDate(diff));
        $(id).data("kendoDatePicker").value(ret);

        if (id == '#dateWork') {
            ChangeList(document.getElementById('dateWork').value)
        }

        //alert(ret);
    }

</script>

<div style="text-align:center">
    <b style="text-align:center;">All costs are in $US Million</b>
</div>
<div data-bind="with:wrmodel" class="col-md-12">
    <div data-bind="visible:mode()==''">
        <div style="margin-bottom:5px;" class="row">
            <div class="col-sm-3">
                Date&nbsp;<br />
                <input type="text" class="entry-date" id="parmDate" onchange="getMonday('#parmDate');" />
            </div>
            <div class="col-sm-3" data-bind="visible:false">
                Rig&nbsp;<br />
                <input id="parmRig" placeholder="select rig" />
            </div>
            <div class="col-sm-3">
                Well&nbsp;<br />
                <input id="parmWell" placeholder="select well" />
            </div>
            <div class="col-sm-3">
                OP Type&nbsp;<br />
                <input id="OPType" />
            </div>
            <div class="col-sm-3" data-bind="visible:false">
                Status&nbsp;<br />
                <select id="parmStatus">
                    <option value="">All</option>
                    <option value="In-Progress">In-Progress</option>
                    <option value="Submitted">Submitted</option>
                </select>
            </div>
        </div>
        <div style="margin-bottom: 10px; margin-top: 10px;">
            <button class="btn btn-custom btn-warning btn-sm" data-bind="click:refresh">
                <span class="glyphicon glyphicon-refresh"></span> Refresh
            </button>
            &nbsp;
            <button class="btn btn-custom btn-primary btn-sm" data-bind="click:wfinit,visible:isAdmin() == '1'&&!model.wrmodel().isRO()=='1'">Initiate Workflow</button>
            <button class="btn btn-custom btn-primary btn-sm" data-bind="click:wfreminder,visible:isAdmin() == '1' && !model.wrmodel().isRO()=='1'">Send Reminder</button>
            <button class="btn btn-custom btn-primary btn-sm" data-bind="click:wfdistribute,visible:!model.wrmodel().isRO()=='1'">Distribute</button>
            @*<button class="btn btn-primary btn-sm" data-bind="click:print">Print</button>*@
        </div>

        <div data-bind="visible: model.IsProcessing()">
            @Html.Partial("_processing")
        </div>

        <div data-bind="visible: !model.IsProcessing()">
            <div id="container-grid-progress" class="cgrid">
                <b>In-Progress</b>
                <div id="grid-progress" class="grid" data-parm="In-Progress"></div>
            </div>

            <div id="container-grid-submitted" class="cgrid">
                <b>Submitted</b>
                <div id="grid-submitted" class="grid" data-parm="Submitted"></div>
            </div>

            <div id="container-grid-distributed" class="cgrid">
                <b>Distributed</b>
                <div id="grid-distributed" class="grid" data-parm="Distributed"></div>
            </div>
        </div>
    </div>

    <div data-bind="visible:mode()=='Select'">
        <button class="btn btn-custom btn-primary btn-sm" data-bind="click:selectCancel">
            <span class="glyphicon glyphicon-arrow-left"></span> Back to New Record
        </button>
        <h3></h3>
        Please select an operation sequence
        <div id="gridsequence"></div>
    </div>

    <div class="panel-wf-init" data-bind="visible:mode()=='wf'">

        <div data-bind="visible: model.IsProcessing()">
            @Html.Partial("_processing")
        </div>

        <div data-bind="visible: !model.IsProcessing()">

            <h3>Data Entry &#8594;  Weekly Report &#8594;  Initiate Workflow</h3>
            <div class="form-horizontal" style="width:90%" id="frmWFStart">
                <p>
                    Please enter the date of Workflow Base and place comment as neccessary. An email will be distributed to every rig engineers.
                </p>
                <div class="form-group">
                    <label class="col-sm-3">Date:</label>
                    <div class="col-sm-9"><input type="text" class="entry-date" data-bind="value: StartDate" id="dateWork" onchange="getMonday('#dateWork')" /></div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3">Comment:</label>
                    <div class="col-sm-9">
                        <textarea style="height:80px;" class="full" id="CommentTxt" data-bind="value:StartComment"></textarea>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3"></label>
                    <div class="col-sm-9">
                        <button class="btn btn-custom btn-primary btn-sm" data-bind="click:wfstart">Start Workflow</button>
                        <button class="btn btn-custom btn-warning btn-sm" data-bind="click:cancel">
                            <span class="glyphicon glyphicon-arrow-left"></span> Back to List
                        </button>
                        <button class="btn btn-custom btn-success btn-sm" onclick="model.wrmodel().openModelAddAct()">Add Other Phase to List</button>
                    </div>
                </div>
                <div class="form-group">

                    <div class="col-sm-9">

                    </div>
                </div>
            </div>
            <div class="form-group">
                <label>Activity Phase</label>
                <div id="gridwork" style="margin-top:10px;">
                </div>
            </div>

        </div>
    </div>

    <div data-bind="visible:('New|Edit').indexOf(mode())>-1 && mode()!=''">

        <div data-bind="visible: model.IsProcessing()">
            @Html.Partial("_processing")
        </div>

        <div data-bind="visible: !model.IsProcessing()">
            <div style="margin-bottom:5px;">
                <button class="btn btn-custom btn-warning btn-sm" data-bind="click:cancel">
                    <span class="glyphicon glyphicon-arrow-left"></span> Back to Lists  
                </button>
                &nbsp;
                <button class="btn btn-custom btn-primary btn-sm" onclick="model.wrmodel().save()" data-bind="visible: record().Status() == 'In-Progress' && !model.wrmodel().isRO()=='1'">
                    <span class="glyphicon glyphicon-save"></span> Save
                </button>
                <button class="btn btn-custom btn-primary btn-sm" onclick="model.wrmodel().save('submit')" data-bind=" visible: record().Status() == 'In-Progress' && !model.wrmodel().isRO()=='1'">
                    <span class="glyphicon glyphicon-ok"></span> Submit
                </button>
                <button class="btn btn-custom btn-primary btn-sm" onclick="model.wrmodel().save('print')">
                    <span class="glyphicon glyphicon-print"></span> Print
                </button>
                <button class="btn btn-custom btn-danger btn-sm" onclick="model.wrmodel().Delete()" data-bind="visible: record().Status() == 'In-Progress' && !model.wrmodel().isRO()=='1'">
                    <span class="glyphicon glyphicon-remove-sign"></span> Delete
                </button>
                <button class="btn btn-custom btn-success btn-sm" data-bind="click:reopen, visible:record().Status()!='In-Progress' && !model.wrmodel().isRO()=='1'">
                    <span class="glyphicon glyphicon-folder-open"></span>&nbsp;&nbsp;Re-Open
                </button>
                <button class="btn btn-custom btn-warning btn-sm" data-bind="click:selectSequence, visible:mode()=='New'&&!model.wrmodel().isRO()=='1'">
                    Load from Existing OPS Sequence
                </button>
            </div>
            <h3></h3>

            <div data-bind="with:record">
                <div class="form-horizontal">
                    <div class="form-group">
                        <label class="col-md-2">Country</label>
                        <div class="col-md-4">
                            <span data-bind="text:Country"></span>
                        </div>
                        <label class="col-md-2">Asset</label>
                        <div class="col-md-4">
                            <span data-bind="text:AssetName"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-2">Not OP-14 Well</label>
                        <div class="col-md-4">
                            <input type="checkbox" data-bind="checked:NewWell, enable: $parent.mode()=='New'" />&nbsp;Check if it is a new well
                        </div>
                        <label class="col-md-2">Well Name</label>
                        <div class="col-md-4">
                            <span data-bind="text:WellName"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-2">Activities</label>
                        <div class="col-md-4">
                            <span data-bind="text:Phase.ActivityType"></span>
                        </div>
                        <label class="col-md-2">Activity Desc</label>
                        <div class="col-md-4">
                            <span data-bind="text: Phase.ActivityDesc" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-2">Week Of</label>
                        <div class="col-md-4">
                            <input type="text" id="weekof" style="width:120px"
                                   data-bind="value: UpdateVersion, enable: $parent.mode()=='New'" />
                        </div>
                        <label class="col-md-2">Company</label>
                        <div class="col-md-4">
                            <input type="text" id="company" style="width:120px" data-bind="value: Company, enable:Status()=='In-Progress'&& !model.wrmodel().isRO()=='1'" required />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-2">Site</label>
                        <div class="col-md-4">
                            <input type="text" id="site" style="width:120px" data-bind="value: Site, enable:Status()=='In-Progress'&& !model.wrmodel().isRO()=='1'" required />
                        </div>
                        <label class="col-md-2">Project</label>
                        <div class="col-md-4">
                            <input type="text" id="project" style="width:120px" data-bind="value: Project, enable:Status()=='In-Progress'&& !model.wrmodel().isRO()=='1'" required />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-2">WellType</label>
                        <div class="col-md-4">
                            <input type="text" id="WellType" style="width:120px" data-bind="value: WellType, enable:Status()=='In-Progress'&& !model.wrmodel().isRO()=='1'" required />
                        </div>
                        <label class="col-md-2">Event Type</label>
                        <div class="col-md-4">
                            <input type="text" id="EventType" style="width:120px" data-bind="value: EventType, enable:Status()=='In-Progress'&& !model.wrmodel().isRO()=='1'" required />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-2">Objective</label>
                        <div class="col-md-4">
                            <input type="text" id="Objective" style="width:120px" data-bind="value: Objective, enable:Status()=='In-Progress'&& !model.wrmodel().isRO()=='1'" required />
                        </div>
                        <label class="col-md-2">Event Start Date</label>
                        <div class="col-md-4">
                            <input type="text" id="eventstartdate" style="width:120px" data-bind="value: EventStartDate, enable:Status()=='In-Progress'&& !model.wrmodel().isRO()=='1'" required />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-2">Contractor</label>
                        <div class="col-md-4">
                            <input type="text" id="contractor" style="width:120px" data-bind="value: Contractor, enable:Status()=='In-Progress'&& !model.wrmodel().isRO()=='1'" required />
                        </div>
                        <label class="col-md-2">Work Unit</label>
                        <div class="col-md-4">
                            <input type="text" id="workunit" style="width:120px" data-bind="value: WorkUnit, enable:Status()=='In-Progress'&& !model.wrmodel().isRO()=='1'" required />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-2">Rig Superintendent</label>
                        <div class="col-md-4">
                            <input type="text" id="rigsuperintendent" style="width:120px" data-bind="value: RigSuperintendent, enable:Status()=='In-Progress'&& !model.wrmodel().isRO()=='1'" required />
                        </div>
                        <label class="col-md-2">Original Spud Date</label>
                        <div class="col-md-4">
                            <input type="text" id="originalspuddate" style="width:120px" data-bind="value: OriginalSpudDate, enable:Status()=='In-Progress'&& !model.wrmodel().isRO()=='1'" required />
                        </div>
                    </div>
                </div>


                <div data-bind="visible:$parent.mode()=='Edit'" style="margin-top:5px;">
                    <ul class="nav nav-tabs">
                        <li class="active"><a href="#commentary" data-toggle="tab">Commentary</a></li>
                        <li><a href="#waterfall" data-toggle="tab">Waterfall</a></li>
                        <li><a href="#files" data-toggle="tab">Supporting Document</a></li>
                    </ul>
                    <div class="tab-content">
                        <div class="tab-pane active" id="commentary">
                            @Html.Partial("_commentary")
                        </div>
                        <div class="tab-pane" id="waterfall">
                            @Html.Partial("_waterfall")
                        </div>
                        <div class="tab-pane" id="files">
                            @Html.Partial("_documents")
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <div>
        @Html.Partial("_modalAddAct")
    </div>

</div>

<script>
    var cgrid = $(".cgrid");
    var grid = $(".grid");

    function ChangeList(t) {
        //alert('begin initGridWork() : ' + t);
        initGridWork(t);
    }

    function toggleCheck(sender) {
        var s = $(sender);
        var cbxs = s.closest(".grid.k-grid").find("input[type='checkbox'].checkme");
        cbxs.prop("checked", s.prop("checked"));
    }

    function init() {
        input2datePicker($("#frmWFStart").find(".entry-date"));
        $.each(grid,function(idx,obj){
            var $obj = $(obj);
            $obj.kendoGrid({
                sortable: true,
                columns: [
                    {
                        width: 30,
                        template: "<input type='checkbox' class='checkme' value='#: _id #'>",
                        headerTemplate: "<input type='checkbox' class='check_toggle' onchange='javascript:toggleCheck(this)'>"
                    },
                    {
                        field: "WellName", title: "Well Name",
                        attributes: { style: "text-align:left" },
                        template: "<a style='cursor:pointer' onclick='select(\"#: _id #\",\"#: WellName #\")'>#: WellName #</a>"
                    },
                    { field: "UpdateVersion", title: "Week", template: "#: jsonDateStr(UpdateVersion) #", width: 90 },
                    { field: "SequenceId", title: "Rig<br/>Sequnce ID", width: 90 },
                    { field: "Phase.ActivityType", title: "Activity" },
                    { field: "AFE.Days", title: "AFE<br/>Days", format: "{0:N0}", attributes: { style: "text-align:right" }, width: 60 },
                    { field: "Actual.Days", title: "Actual<br/>Days", format: "{0:N0}", attributes: { style: "text-align:right" }, width: 60 },
                    { field: "CurrentWeek.Days", title: "Current<br/>Days", format: "{0:N0}", attributes: { style: "text-align:right" }, width: 60 },
                    {
                        field: "AFE.Cost", title: "AFE<br/>Cost ($MM)",
                        template: "#: kendo.format('{0:N1}',AFE.Cost/1000000) #",
                        format: "{0:N0}", attributes: { style: "text-align:right" }, width: 80
                    },
                    {
                        field: "Actual.Cost", title: "Actual<br/>Cost ($MM)",
                        template: "#: kendo.format('{0:N1}',Actual.Cost/1000000) #",
                        format: "{0:N0}", attributes: { style: "text-align:right" }, width: 80
                    },
                    {
                        field: "CurrentWeek.Cost", title: "Current<br/>Cost ($MM)",
                        template: "#: kendo.format('{0:N1}',CurrentWeek.Cost/1000000) #",
                        format: "{0:N0}", attributes: { style: "text-align:right" }, width: 80
                    },
                    //{
                    //    field: "Phase.PhSchedule.Start", title: "Latest<br/>Sequence",
                    //    template: "#: jsonDateStr(Phase.PhSchedule.Start) # -- #: jsonDateStr(Phase.PhSchedule.Finish) #"
                    //},
                    {
                        field: "Status", title: "Status", width: 100,
                        template: "<label class='label #: Status=='Distributed' ? 'label-primary' : Status=='Submitted' ? 'label-success' : 'label-warning' #'>#: Status #</label>"
                    }
                ]
            });
        });

        $("#parmWell").kendoMultiSelect({ dataSource: model.WellNames() });
        $("#parmRig").kendoMultiSelect({ dataSource: model.RigNames() });
        input2datePicker($("#parmDate"));
        refresh();
        initGridSequence();
        initGridWork();
    }

    function initForm() {
        input2datePicker($("#weekof"));
        input2datePicker($("#eventstartdate"));
        input2datePicker($("#originalspuddate"));
    }
    function gridSelect(id) {

        ajaxPost("@Url.Action("SelectSequence")", { id: id }, function (data) {
            console.log(data);
            data.Data.Record.UpdateVersion = jsonDateStr(data.Data.Record.UpdateVersion);
            data.Data.Record.OriginalSpudDate = jsonDateStr(data.Data.Record.OriginalSpudDate);
            data.Data.Record.EventStartDate = jsonDateStr(data.Data.Record.OriginalSpudDate);
            model.wrmodel().record(ko.mapping.fromJS(data.Data.Record));
            model.wrmodel().mode("Edit");
            initForm();
        })
    }

    function refresh() {
        if (model.IsProcessing()) return;

        model.IsProcessing(true);
        model.NumberOfGrids(cgrid.length);
        model.Loaders(0);

        var url = "@Url.Action("Search")";
        $.each(cgrid, function (idx, obj) {
            var $cgrid = $(obj);
            var $grid = $cgrid.find(".grid");
            var status = $grid.attr("data-parm");
            ajaxPost(url, {
                SearchDate: $("#parmDate").data("kendoDatePicker") == undefined ? "" :
                    $("#parmDate").data("kendoDatePicker").value(),
                SearchWellNames: $("#parmWell").data("kendoMultiSelect") == undefined ? [] :
                    $("#parmWell").data("kendoMultiSelect").value(),
                SearchStatus: status,
                SearchOPType: $("#OPType").data("kendoDropDownList").value()
            }, function (data) {
                var loader = model.Loaders() + 1;
                model.Loaders(loader);
                if (model.Loaders() == model.NumberOfGrids()) {
                    model.IsProcessing(false);
                }
                if (data.Result == "OK") {
                    var k = $grid.data("kendoGrid");
                    if (k != undefined) {
                        //var heightPerRow = 20;
                        //if (data.Data.length > 5) {
                        //    k.height = 50 + 5 * heightPerRow;
                        //} else {
                        //    k.height = 50 + data.Data.length * heightPerRow;
                        //}
                        if (data.Data.length > 0) {
                            $cgrid.show();
                            k.setDataSource(new kendo.data.DataSource({ data: data.Data }));
                        } else {
                            $cgrid.hide();
                        }
                    }
                }
                else {
                    alert(data.Message);
                }

            },
            function (err) {

                var loader = model.Loaders() + 1;
                model.Loaders(loader);
                if (model.Loaders() == model.NumberOfGrids()) {
                    model.IsProcessing(false);
                }
                alert(err.responseText);
            });
        });
    }


    function initGridSequence() {
        var gs = $("#gridsequence");
        var kg = gs.kendoGrid({
            pageable: true,
            filterable: true,
            sortable: true,
            columns: [
                {
                    field: "WellName", title: "Well",
                    template: "<a style='cursor:pointer' onclick='gridSelect(\"#: UARigSequenceId #\")'>#: WellName #</a>"
                },
                {
                    field: "UARigSequenceId", title: "Rig Sequence", width: 50,
                    attributes: { style: "text-align:right" }
                },
                { field: "RigName", title: "Rig" },
                { field: "AssetName", title: "Asset" },
                { field: "Phases[0].ActivityType", title: "Activity" },
                {
                    field: "Phases[0].AFESchedule.Start", title: "AFE Start", width: 90,
                    template: "#: jsonDateStr(Phases[0].PhSchedule.Start) #"
                },
                {
                    field: "Phases[0].AFESchedule.Finish", title: "AFE Finish", width: 90,
                    template: "#: jsonDateStr(Phases[0].PhSchedule.Finish) #"
                },
                {
                    field: "Phases[0].AFEDuration.Total",
                    title: "AFE<br/>Duration", width: 70,
                    format: "{0:N0}", attributes: { style: 'text-align:right;' }
                },
                {
                    field: "Phases[0].AFECost.Total",
                    title: "AFE<br/>Cost ($MM)", width: 90,
                    format: "{0:N0}", attributes: { style: 'text-align:right;' }
                }
            ]
        }).data("kendoGrid");

        ajaxPost("@Url.Action("GetSequences")",
            {},
            function (data) {

                kg.setDataSource(new kendo.data.DataSource({
                    data: data.Data,
                    pageSize: 10
                }));
            }
        );
    }

    function checkVal(x) {
        $(x).attr('value', x.checked ? 1 : 0);
    }

    function initGridWork() {
        var t = $("#dateWork").val();

        $("#gridwork").replaceWith($("<div />").attr("id", "gridwork"));

        var gs = $("#gridwork");
        var kg = gs.kendoGrid({
            pageable: false,
            filterable: true,
            sortable: true,
            columns: [
                {
                    width: 30,
                    field: "", title: "",
                    template: "<input value='#: _id #'  type='checkbox' class='checkbox cb-phase' ></input>",
                    headerTemplate: "<input value='#: _id #'  type='checkbox' class='checkall'  onchange='tooggleCheckbox($(this),$(\".cb-phase\"))' ></input>",
                },
                //{
                //    field: "_id", title: "id",
                //},
                //{
                //    field: "Phases[0].PhaseNo", title: "PhaseNo",
                //},
                {
                    field: "WellName", title: "Well",
                },
                {
                    field: "UARigSequenceId", title: "Rig Sequence", width: 50,
                    attributes: { style: "text-align:right" }
                },
                { field: "RigName", title: "Rig" },
                { field: "AssetName", title: "Asset" },
                { field: "ActivityType", title: "Activity" },
                {
                    field: "PhSchedule.Start",
                    title: "OP Start", width: 90,
                    template: "#: jsonDateStr(PhSchedule.Start) #"
                },
                {
                    field: "PhSchedule.Finish", title: "OP Finish", width: 90,
                    template: "#: jsonDateStr(PhSchedule.Finish) #"
                }
            ]
        }).data("kendoGrid");

        ajaxPost("@Url.Action("GetWork", "WeeklyReport")",
            { SearchDate: t },
            function (data) {
                model.wrmodel().DataGridWork([]);
                for (var i = 0; i < data.Data.length; i++) {
                    model.wrmodel().DataGridWork.push(data.Data[i]);
                }
                
                kg.setDataSource(new kendo.data.DataSource({
                    data: data.Data
                }));
            }
        );
    }
</script>
<script>
    model.HasEDM = ko.observable(false);
    function select(id, WellName) {
        //alert("ok");
        ko.bindingHandlers.uniqueId.counter = 0;
        model.ActivityId(id);
        model.SelectedWellName(WellName);
        var url = "@Url.Action("select")";
        ajaxPost(url, { id: id },
            function (data) {
                model.HasEDM(data.Data.HasEDM);
                data.Data.Record.CurrentWeek.Cost = data.Data.Record.CurrentWeek.Cost / 1000000;

                //_.each(data.Data.Record.Elements, function (e) {
                //    e.CompletionOriginal = e.Completion;
                //    e.Completion *= 100;
                //});

                model.wrmodel().CostScale("million");

                console.log(data);
                model.wrmodel().record(ko.mapping.fromJS(data.Data.Record));
                model.wrmodel().mode("Edit");
                initForm();
                var x = model.UploadDocument();
                x.UploadDocumentWrapper(false);
                x.ButtonShowUploadDoc(true);
                model.UploadDocument().select();
                $(".input_number").kendoNumericTextBox();

                count_total();
                wfdata = data.WFData;
                refreshWaterfall();

                var y = model.wrmodel().record();
                ActualDays = parseFloat(y.Actual.Days());
                NPTDays = parseFloat(y.NPT.Days());
                if (ActualDays == 0 || NPTDays == 0) {
                    var hour = 0;
                } else {
                    var hour = NPTDays * ActualDays * 24;
                }
                model.wrmodel().NPTHours(hour);
                //alert(model.wrmodel().NPTHours());
                $("#npt_hours").kendoNumericTextBox({
                    value: hour
                });

                //model.wrmodel().countTotalWords("ExeSum");
                //model.wrmodel().countTotalWords("OpsSum");
                //model.wrmodel().countTotalWords("PlnOps");

                //console.log(model.wrmodel().record().Elements().Completion().length);
            },
            function (err) {
                alert(err.responseText)
            });
    }

</script>
<script>
    $(document).ready(function () {
        kendo.culture("en-US");

        $("#WellNames").kendoMultiSelect({ placeholder: "Select Well Names ...", dataSource: { data: model.wrmodel().WellNames() } });
        $("#Activities").kendoMultiSelect({ placeholder: "Select Well Activities ...", dataSource: { data: model.wrmodel().Activities() } });

        $("#OPType").kendoDropDownList({
            dataSource: [
              { Name: "All", Id: "All" },
              { Name: "Only OP-14", Id: "False" },
              { Name: "NOT OP-14", Id: "True" }
            ],
            dataTextField: "Name",
            dataValueField: "Id"
        });
        init();
    });

    function PrintDocument() {
        //alert(model.ActivityId());
        //alert(model.SelectedWellName());
        //window.open('@Url.Action("Print2Pdf")' + "?id=" + model.ActivityId(), 'Print Activity', 'height=100%,width=100%,scrollbars=1');
        var url = '@Url.Action("Print2Pdf")' + "?id=" + model.ActivityId() + "&WellName=" + model.SelectedWellName();
        location.href = url;
    }

    function openwin(url, strWidth, strHeight) {
        //if (popWin != "") { popWin.close() }
        leftStr = (screen.width - strWidth) / 2;
        topStr = (screen.height - strHeight) / 2 - 50;
        windowProperties = "toolbar=no,menubar=no,scrollbars=yes,statusbar=no,height=" + strHeight + ",width=" + strWidth + ",left=" + leftStr + ",top=" + topStr + "";
        var popWin = window.open(url, 'Print Activity', windowProperties);
    }

    function validate_number(type, e) {
        e.value = 0;
    }

    function toggleCheckbox(cbClass) {
        var checker = $("#" + cbClass);
        if (checker.is(":checked")) {
            //$("." + cbClass).addAttr('checked');   //removeAttr('checked');
            $("." + cbClass).attr('checked', 'checked');
        } else {
            $("." + cbClass).removeAttr('checked');
        }
    }
</script>