@{
    ViewBag.Title = "Monthly Report Archive";
    Layout = "~/Views/Shared/_common_v1.cshtml";
}
@using ECIS.Core;
@using ECIS.Client.WEIS;
@using MongoDB.Driver;
@using MongoDB.Driver.Builders;
@using Newtonsoft.Json;

<style>
    .form-group {
        margin-bottom: 2px;
    }

    input[disabled] {
        background-color: whitesmoke;
        border: none;
    }
</style>

<style>
    .cell-date {
        text-align: center;
    }

    .cell-number {
        text-align: right;
    }

    #tableAllocation th {
        text-align: center;
    }

    #tableAllocation td {
        padding: 5px;
    }

    #tableAllocation tfoot td {
        font-weight: bold;
        text-align: right;
        background-color: lightgrey;
    }

    #tableAllocation tbody td {
        text-align: right;
    }

    .form-wrapper div {
        padding-bottom: 3px;
    }

        .form-wrapper div label {
            line-height: 23px;
        }

    .form-control {
        font-size: 9pt;
    }

    input[type='text'] {
        line-height: 20px;
    }

    .k-invalid-msg {
        margin-left: 30px;
    }

    #modalPIP .modal-dialog {
        width: 1000px;
    }
</style>

<script>
    model.IsProcessing = ko.observable(false);
    model.fromArchive = true;

    model.PageId("Monthly Report");
    model.wrmodel = ko.observable({
        isAdmin: ko.observable(@ViewBag.isAdmin),
        isRO: ko.observable(@ViewBag.isRO),
        WordCount: ko.observable(@ViewBag.WordCount),
        NPTHours: ko.observable(),
        StartDate: ko.observable(jsonDateStr(new Date())),
        StartComment: ko.observable(""),
        SearchDate: ko.observable(),
        SearchRigNames: ko.observableArray([]),
        SearchWellNames: ko.observableArray([]),
        WellSelected: ko.observable(""),
        WellNameNew: ko.observable(""),
        CostScale: ko.observable("million"),
        record: ko.observable(ko.mapping.fromJS(@MvcHtmlString.Create(JsonConvert.SerializeObject(new WellActivityUpdateMonthly())))),
        
        reopen: function () {
            var t = this;
            model.IsProcessing(true);
            var url = "@Url.Action("Reopen")";
            ajaxPost(url, { id: t.record()._id() },
                function (data) {
                    model.IsProcessing(false);
                    if (data.Result != "OK") {
                        alert(data.Message);
                        return;
                    }
                    refresh();
                    model.wrmodel().mode("");
                })
        },
        add: function () {
            var t = this;
            t.record(ko.mapping.fromJS(@MvcHtmlString.Create(JsonConvert.SerializeObject(new WellActivityUpdateMonthly()))));
            t.record().UpdateVersion(jsonDateStr(t.record().UpdateVersion()));
            t.mode("New");
            initForm();
        },
        submit: function () {
            var t = this;
            var url = "@Url.Action("submit")";
            ajaxPost(url, { id: t.record()._id() },
                function (data) {
                    if (data.Result != "OK") {
                        alert(data.Message);
                        return;
                    }
                    refresh();
                    model.wrmodel().mode("");
                })
        },
        cancel: function () {
            model.ActivityId("");
            var t = this;
            refresh();
            t.mode("");
        },
        refresh: function () {
            refresh();
        },
        print: function () {
            PrintDocument();
        },
        remove: function () {
            ajaxPost("@Url.Action("Delete")",
                function (data) {
                    var t = this;
                    t.mode("");
                    model.refresh();
                },
                function (err) {
                    alert(err.responseText);
                })
        },
        save: function (ActionAfter) {
            if (model.IsProcessing()) return;
            model.IsProcessing(true);

            var t = model.wrmodel();
            var url = "@Url.Action("Save")";
            //if (t.record().NewWell() == true) {
            //    t.record().WellName(t.WellNameNew());
            //}
            //else {
            //    t.record().WellName(t.WellSelected());
            //}
            ajaxPost(url, t.record(), function (data) {
                if (data.Result == "OK") {
                    model.IsProcessing(false);
                    switch (ActionAfter) {
                        case "submit":
                            x.submit();
                            break;
                        case "print":
                            x.print();
                            break;
                        default:
                            refresh();
                            t.mode("");
                            break;
                    }
                }
                else {
                    model.IsProcessing(false);
                    alert(data.Message);
                }
            },
            function (err) {
                alert(err.responseText);
            })
        },
        wfstart: function () {

            var gs = $("#gridwork").data().kendoGrid;
            var cbphases = $("#gridwork").find("input.cb-phase:checked");
            var ids = [];
            $.each(cbphases, function (idx, obj) {
                var cbObj = $(obj);
                ids.push(cbObj.val());
            });
            //alert(ids);

            var url = "@Url.Action("WFStart")";
            ajaxPost(url,
                { StartDate: $("#dateWork").val(), StartComment: $("#CommentTxt").val(), WellActivityId: ks(ids) },

                function (data) {
                    refresh();
                    model.wrmodel().mode("");
                });
        },
        wfdistribute: function () {
            var ids = $("#grid-submitted").find("input.checkme:checked");
            var idValues = $.map(ids, function (obj, idx) {
                var $obj = $(obj);
                return $obj.val();
            });
            if (idValues.length == 0) {
                alert("Please select at least one submitted Monthly LE to be dsitributed");
                return;
            }
            var url = "@Url.Action("Distribute")";
            ajaxPost(url, { ids: idValues }, function (data) {
                if (data.Result != "OK") {
                    showErr(data.Message + data.Trace);
                    return;
                };
                refresh();
            },
            showErr)
        },
        wfinit: function () {
            model.wrmodel().mode("wf");
        },
        selectSequence: function () {
            var t = model.wrmodel();
            t.mode("Select");
        },
        selectCancel: function () {
            var t = model.wrmodel();
            t.mode("New");
        },
        processing: ko.observable(false),
        mode: ko.observable(""),
        CompletionTotal: ko.observable(0),
        DaysPlanImprovementTotal: ko.observable(0),
        DaysLastWeekImprovementTotal: ko.observable(0),
        DaysActualImprovementTotal: ko.observable(0),
        DaysCurrentWeekImprovementTotal: ko.observable(0),
        DaysLastWeekRiskTotal: ko.observable(0),
        DaysActualRiskTotal: ko.observable(0),
        DaysCurrentWeekRiskTotal: ko.observable(0),
        CostPlanImprovementTotal: ko.observable(0),
        CostLastWeekImprovementTotal: ko.observable(0),
        CostActualImprovementTotal: ko.observable(0),
        CostCurrentWeekImprovementTotal: ko.observable(0),
        CostLastWeekRiskTotal: ko.observable(0),
        CostActualRiskTotal: ko.observable(0),
        CostCurrentWeekRiskTotal: ko.observable(0)
    });

    model.AssetNames = ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(
        DataHelper.Populate("WEISAssetNames").Select(d=>d.GetString("_id")).OrderBy(d=>d)
    )));

    model.WellNames = ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(
        DataHelper.Populate("WEISWellNames", Query.NE("IsVirtualWell", true)).Select(d => d.GetString("_id")).OrderBy(d => d)
    )));

    model.RigNames = ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(
        DataHelper.Populate("WEISRigNames").Select(d=>d.GetString("_id")).OrderBy(d=>d)
    )));

    model.Activities = ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(
        DataHelper.Populate("WEISActivities").Select(d=>d.GetString("_id")).OrderBy(d=>d)
    )));

    model.ActivityId = ko.observable("");
    model.SelectedWellName = ko.observable("");

    function count_total() {
        //alert(type);
        var x = model.wrmodel().record().Elements();
        var CompletionTotal = 0;
        var DaysPlanImprovementTotal = 0;
        var DaysLastWeekImprovementTotal = 0;
        var DaysActualImprovementTotal = 0;
        var DaysCurrentWeekImprovementTotal = 0;
        var DaysLastWeekRiskTotal = 0;
        var DaysActualRiskTotal = 0;
        var DaysCurrentWeekRiskTotal = 0;
        var CostPlanImprovementTotal = 0;
        var CostLastWeekImprovementTotal = 0;
        var CostActualImprovementTotal = 0;
        var CostCurrentWeekImprovementTotal = 0;
        var CostLastWeekRiskTotal = 0;
        var CostActualRiskTotal = 0;
        var CostCurrentWeekRiskTotal = 0;
        for (var i = 0; i < x.length; i++) {
            CompletionTotal = parseFloat(CompletionTotal) + parseFloat(x[i].Completion());
            DaysPlanImprovementTotal = parseFloat(DaysPlanImprovementTotal) + parseFloat(x[i].DaysPlanImprovement());
            DaysLastWeekImprovementTotal = parseFloat(DaysLastWeekImprovementTotal) + parseFloat(x[i].DaysLastWeekImprovement());
            DaysActualImprovementTotal = parseFloat(DaysActualImprovementTotal) + parseFloat(x[i].DaysActualImprovement());
            DaysCurrentWeekImprovementTotal = parseFloat(DaysCurrentWeekImprovementTotal) + parseFloat(x[i].DaysCurrentWeekImprovement());
            DaysLastWeekRiskTotal = parseFloat(DaysLastWeekRiskTotal) + parseFloat(x[i].DaysLastWeekRisk());
            DaysActualRiskTotal = parseFloat(DaysActualRiskTotal) + parseFloat(x[i].DaysActualRisk());
            DaysCurrentWeekRiskTotal = parseFloat(DaysCurrentWeekRiskTotal) + parseFloat(x[i].DaysCurrentWeekRisk());
            CostPlanImprovementTotal = parseFloat(CostPlanImprovementTotal) + parseFloat(x[i].CostPlanImprovement());
            CostLastWeekImprovementTotal = parseFloat(CostLastWeekImprovementTotal) + parseFloat(x[i].CostLastWeekImprovement());
            CostActualImprovementTotal = parseFloat(CostActualImprovementTotal) + parseFloat(x[i].CostActualImprovement());
            CostCurrentWeekImprovementTotal = parseFloat(CostCurrentWeekImprovementTotal) + parseFloat(x[i].CostCurrentWeekImprovement());
            CostLastWeekRiskTotal = parseFloat(CostLastWeekRiskTotal) + parseFloat(x[i].CostLastWeekRisk());
            CostActualRiskTotal = parseFloat(CostActualRiskTotal) + parseFloat(x[i].CostActualRisk());
            CostCurrentWeekRiskTotal = parseFloat(CostCurrentWeekRiskTotal) + parseFloat(x[i].CostCurrentWeekRisk());
        }

        model.wrmodel().CompletionTotal(number_format(CompletionTotal));
        model.wrmodel().DaysPlanImprovementTotal(number_format(DaysPlanImprovementTotal));
        model.wrmodel().DaysLastWeekImprovementTotal(number_format(DaysLastWeekImprovementTotal));
        model.wrmodel().DaysActualImprovementTotal(number_format(DaysActualImprovementTotal));
        model.wrmodel().DaysCurrentWeekImprovementTotal(number_format(DaysCurrentWeekImprovementTotal));
        model.wrmodel().DaysLastWeekRiskTotal(number_format(DaysLastWeekRiskTotal));
        model.wrmodel().DaysActualRiskTotal(number_format(DaysActualRiskTotal));
        model.wrmodel().DaysCurrentWeekRiskTotal(number_format(DaysCurrentWeekRiskTotal));
        model.wrmodel().CostPlanImprovementTotal(number_format(CostPlanImprovementTotal));
        model.wrmodel().CostLastWeekImprovementTotal(number_format(CostLastWeekImprovementTotal));
        model.wrmodel().CostActualImprovementTotal(number_format(CostActualImprovementTotal));
        model.wrmodel().CostCurrentWeekImprovementTotal(number_format(CostCurrentWeekImprovementTotal));
        model.wrmodel().CostLastWeekRiskTotal(number_format(CostLastWeekRiskTotal));
        model.wrmodel().CostActualRiskTotal(number_format(CostActualRiskTotal));
        model.wrmodel().CostCurrentWeekRiskTotal(number_format(CostCurrentWeekRiskTotal));
    }

    function number_format(number1) {
        //alert("format:" + number1);
        //var number = number1.replaceAll('.', '');
        number = number1;
        var decimals = 1;
        var dec_point = ".";
        var thousands_sep = ",";
        number = (number + '')
          .replace(/[^0-9+\-Ee.]/g, '');
        var n = !isFinite(+number) ? 0 : +number,
          prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
          sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
          dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
          s = '',
          toFixedFix = function (n, prec) {
              var k = Math.pow(10, prec);
              return '' + (Math.round(n * k) / k)
                .toFixed(prec);
          };
        // Fix for IE parseFloat(0.55).toFixed(0) = 0;
        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n))
          .split('.');
        if (s[0].length > 3) {
            s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
        }
        if ((s[1] || '')
          .length < prec) {
            s[1] = s[1] || '';
            s[1] += new Array(prec - s[1].length + 1)
              .join('0');
        }
        //alert (s.join(dec));
        return s.join(dec);
    }
</script>

<div style="text-align:center; margin-bottom: 10px;">
    <b style="text-align:center;">All costs are in $US Million</b>
</div>

<div class="col-md-12" data-bind="with:wrmodel">
    <div data-bind="visible:mode()==''">

        <div class="col-md-12 row filter">
            <div class="col-md-4">
                <div class="col-md-4">
                    <label>Date From:</label>
                </div>
                <div class="col-md-8">
                    <input type="text" class="entry-date" style="width: 100%" id="parmDateFrom" />
                </div>
            </div>

            <div class="col-md-4" data-bind="visible: false">
                <div class="col-md-4">
                    <label>Rig:</label>
                </div>
                <div class="col-md-8">
                    <input id="parmRig" placeholder="select rig" />
                </div>
            </div>

            <div class="col-md-4">
                <div class="col-md-4">
                    <label>Well:</label>
                </div>
                <div class="col-md-8">
                    <input id="parmWell" placeholder="select well" />
                </div>
            </div>

            <div class="col-md-4">
                <div class="col-md-4">
                    <label>Keyword:</label>
                </div>
                <div class="col-md-8">
                    <input id="parmKeyword" placeholder="keyword" type="text" class="text" />
                </div>
            </div>

            <div class="clearfix"></div>

            <div class="col-md-4">
                <div class="col-md-4">
                    <label>Date To:</label>
                </div>
                <div class="col-md-8">
                    <input type="text" class="entry-date" style="width: 100%" id="parmDateTo" />
                </div>
            </div>

            <div class="col-md-4">
                <div class="col-md-4">
                    <label>Activity:</label>
                </div>
                <div class="col-md-8">
                    <input id="parmActivity" placeholder="select activity" />
                </div>
            </div>

            <div class="clearfix"></div>

            <div class="col-md-4" data-bind="visible: false">
                <div class="col-md-4">
                    <label>Status:</label>
                </div>
                <div class="col-md-8">
                    <select id="parmStatus" class="text">
                        <option value="">All</option>
                        <option value="In-Progress">In-Progress</option>
                        <option value="Submitted">Submitted</option>
                    </select>
                </div>
            </div>

            <div class="col-md-12 row" style="text-align: right; padding-right: 6px;">
                <button class="btn btn-custom btn-primary btn-sm" data-bind="click:refresh">
                    <span class="glyphicon glyphicon-refresh"></span> Refresh
                </button>
            </div>
        </div>

        <div style="margin-bottom:10px;">
            @*<button class="btn btn-warning btn-sm" data-bind="click:refresh">Refresh</button>*@
            &nbsp;
            @*<button class="btn btn-primary btn-sm" data-bind="click:wfinit">Initiate Workflow</button>
                <button class="btn btn-primary btn-sm" data-bind="click:wfdistribute">Distribute</button>*@
            @*<button class="btn btn-primary btn-sm" data-bind="click:print">Print</button>*@
        </div>
        @*<b>In-Progress</b>
            <div id="grid-progress" class="grid" data-parm="In-Progress" style="margin-top:10px;"></div>
            <br /><br />

            <b>Submitted</b>
            <div id="grid-submitted" class="grid" data-parm="Submitted" style="margin-top:10px;"></div>
            <br /><br />*@
        <div data-bind="visible: model.IsProcessing()">
            @Html.Partial("_processing")
        </div>

        <div data-bind="visible: !model.IsProcessing()">
            <b>Distributed</b>
            <div id="grid-distributed" class="grid" data-parm="Distributed" style="margin-top:10px;"></div>
            <br /><br />
        </div>


    </div>

    <div data-bind="visible:mode()=='Select'">
        <button class="btn btn-primary btn-sm" data-bind="click:selectCancel">Back to New Record</button>
        <h3></h3>
        Please select an operation sequence
        <div id="gridsequence"></div>
    </div>

    <div class="panel-wf-init" data-bind="visible:mode()=='wf'">
        <h3>Data Entry &#8594;  Monthly LE &#8594;  Initiate Workflow</h3>
        <div class="form-horizontal" style="width:90%" id="frmWFStart">
            <p>
                Please enter the date of Workflow Base and place comment as neccessary. An email will be distributed to every rig engineers.
            </p>
            <div class="form-group">
                <label class="col-sm-3">Date</label>
                <div class="col-sm-9"><input type="text" class="entry-date" data-bind="value: StartDate" id="dateWork" onchange="ChangeList(document.getElementById('dateWork').value)" /></div>
            </div>
            <div class="form-group">
                <label class="col-sm-3">Comment</label>
                <div class="col-sm-9">
                    <textarea style="height:80px;" class="full" id="CommentTxt" data-bind="value:StartComment"></textarea>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-3"></label>
                <div class="col-sm-9">
                    <button class="btn btn-primary btn-sm" data-bind="click:wfstart">Start Workflow</button>
                    <button class="btn btn-warning btn-sm" data-bind="click:cancel">Back to List</button>
                </div>
            </div>
            <div class="form-group">

                <div class="col-sm-9">

                </div>
            </div>
        </div>
        <div class="form-group">
            <label>Activity Phase</label>
            <div id="gridwork" style="margin-top:10px;">
            </div>
        </div>
    </div>

    <div data-bind="visible:('New|Edit').indexOf(mode())>-1 && mode()!=''">
        <div style="margin-bottom:5px;">
            <button class="btn btn-custom btn-warning btn-sm" data-bind="click:cancel">
                <span class="glyphicon glyphicon-arrow-left"></span> Back to Lists
            </button>
            &nbsp;
            <button class="btn btn-custom btn-primary btn-sm" data-bind="click:save, visible:false">
                <span class="glyphicon glyphicon-save"></span> Save
            </button>
            <button class="btn btn-custom btn-primary btn-sm" data-bind="click:submit, visible:false">
                <span class="glyphicon glyphicon-ok"></span> Submit
            </button>
            <button class="btn btn-custom btn-primary btn-sm" data-bind="click:print">
                <span class="glyphicon glyphicon-print"></span> Print
            </button>
            <button class="btn btn-warning btn-sm" data-bind="click:selectSequence, visible:mode()=='New'">
                Load from Existing OPS Sequence
            </button>
            <button class="btn btn-custom btn-success btn-sm" data-bind="click:reopen, visible:!model.wrmodel().isRO()=='1' && model.wrmodel().isAdmin()=='1'">
                <span class="glyphicon glyphicon-folder-open"></span>&nbsp;&nbsp;Re-Open
            </button>
        </div>
        <h3></h3>

        <div data-bind="with:record">
            <div class="form-horizontal">
                <div class="form-group">
                    <label class="col-md-2">Country</label>
                    <div class="col-md-4">
                        <span data-bind="text:Country"></span>
                    </div>
                    <label class="col-md-2">Asset</label>
                    <div class="col-md-4">
                        <span data-bind="text:AssetName"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-2">Not OP-15 Well</label>
                    <div class="col-md-4">
                        <input type="checkbox" data-bind="checked:NewWell, enable: $parent.mode()=='New'" />&nbsp;Check if it is a new well
                    </div>
                    <label class="col-md-2">Well Name</label>
                    <div class="col-md-4">
                        <span data-bind="text:WellName"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-2">Activities</label>
                    <div class="col-md-4">
                        <span data-bind="text:Phase.ActivityType"></span>
                    </div>
                    <label class="col-md-2">Activity Desc</label>
                    <div class="col-md-4">
                        <span data-bind="text: Phase.ActivityDesc" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-2">Month Of</label>
                    <div class="col-md-10">
                        <input type="text" id="weekof" style="width:120px"
                               data-bind="value: UpdateVersion, enable: $parent.mode()=='New'" />
                    </div>
                </div>
            </div>

            <div data-bind="visible:$parent.mode()=='Edit'" style="margin-top:5px;">
                <ul class="nav nav-tabs">
                    <li class="active"><a href="#commentary" data-toggle="tab">Commentary</a></li>
                    <li><a href="#waterfall" data-toggle="tab">Waterfall</a></li>
                    <li><a href="#files" data-toggle="tab">Supporting Document</a></li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane active" id="commentary">
                        @Html.Partial("_commentary")
                    </div>
                    <div class="tab-pane" id="waterfall">
                        @Html.Partial("_waterfall")
                    </div>
                    <div class="tab-pane" id="files">
                        @Html.Partial("_documents")
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var grid = $(".grid");

    function ChangeList(t) {
        //alert('begin initGridWork() : ' + t);
        initGridWork(t);
    }

    function init() {
        input2datePicker($("#frmWFStart").find(".entry-date"));
        grid.kendoGrid({
            pageable: true,
            sortable: true,
            columns: [
                {
                    width: 30,
                    template: "<input type='checkbox' class='checkme' value='#: _id #'>"
                },
                {
                    field: "WellName", title: "Well Name",
                    attributes: { style: "text-align:left" },
                    template: "<a style='cursor:pointer' onclick='select(\"#: _id #\",\"#: WellName #\")'>#: WellName #</a>"
                },
                { field: "UpdateVersion", title: "Week", template: "#: jsonDateStr(UpdateVersion) #", width: 90 },
                { field: "Phase.ActivityType", title: "Activity" },
                { field: "AFE.Days", title: "AFE<br/>Days", format: "{0:N0}", attributes: { style: "text-align:right" }, width: 60 },
                { field: "Actual.Days", title: "Actual<br/>Days", format: "{0:N0}", attributes: { style: "text-align:right" }, width: 60 },
                { field: "CurrentWeek.Days", title: "Current<br/>Days", format: "{0:N0}", attributes: { style: "text-align:right" }, width: 60 },
                {
                    field: "AFE.Cost", title: "AFE<br/>Cost",
                    template: "#: kendo.format('{0:N1}',AFE.Cost/1000000) #",
                    format: "{0:N0}", attributes: { style: "text-align:right" }, width: 120
                },
                {
                    field: "Actual.Cost", title: "Actual<br/>Cost",
                    template: "#: kendo.format('{0:N1}',Actual.Cost/1000000) #",
                    format: "{0:N0}", attributes: { style: "text-align:right" }, width: 120
                },
                {
                    field: "CurrentWeek.Cost", title: "Current<br/>Cost",
                    template: "#: kendo.format('{0:N1}',CurrentWeek.Cost/1000000) #",
                    format: "{0:N0}", attributes: { style: "text-align:right" }, width: 120
                },
                {
                    field: "Status", title: "Status", width: 100,
                    template: "<label class='label #: Status=='Distributed' ? 'label-primary' : Status=='Submitted' ? 'label-success' : 'label-warning' #'>#: Status #</label>"
                }
            ]
        });

        $("#parmWell").kendoMultiSelect({ dataSource: model.WellNames() });
        $("#parmActivity").kendoMultiSelect({ dataSource: model.Activities() });
        $("#parmRig").kendoMultiSelect({ dataSource: model.RigNames() });

        _.each([
            { id: "#parmDateFrom", value: new Date("@ViewBag.DateFrom") },
            { id: "#parmDateTo", value: new Date("@ViewBag.DateTo") }
        ], function (e) {
            $(e.id).kendoDatePicker({
                format: jsonDateFormat,
                start: "month",
                depth: "month",
                parseFormats: ["dd-MMM-yyyy"],
                min: new Date("@ViewBag.DateFrom"),
                max: new Date("@ViewBag.DateTo"),
                value: e.value
            })
        });

        refresh();
        //initGridSequence();
        //initGridWork();
    }

    function initForm() {
        input2datePicker($("#weekof"));
    }
    function gridSelect(id) {
        ajaxPost("@Url.Action("SelectSequence")", { id: id }, function (data) {
            data.Data.Record.UpdateVersion = jsonDateStr(data.Data.Record.UpdateVersion);
            model.wrmodel().record(ko.mapping.fromJS(data.Data.Record));
            model.wrmodel().mode("Edit");
            initForm();
        })
    }

    function refresh() {
        if (model.IsProcessing()) return;

        model.IsProcessing(true);

        var url = "@Url.Action("SearchDistributed")";
        $.each(grid, function (idx, obj) {
            //alert(idx);
            var $grid = $(obj);
            var status = $grid.attr("data-parm");
            if (status == "Distributed") {
                ajaxPost(url, {
                    SearchDateFrom: $("#parmDateFrom").data("kendoDatePicker").value(),
                    SearchDateTo: $("#parmDateTo").data("kendoDatePicker").value(),
                    SearchWellNames: $("#parmWell").data("kendoMultiSelect").value(),
                    SearchActivities: $("#parmActivity").data("kendoMultiSelect").value(),
                    SearchStatus: status,
                    SearchKeyword: $("#parmKeyword").val()
                }, function (data) {

                    model.IsProcessing(false);

                    if (data.Result == "OK") {
                        var k = $grid.data("kendoGrid");
                        k.setDataSource(new kendo.data.DataSource({ data: data.Data, pageSize: 10 }));
                    }
                    else {
                        alert(data.Message);
                    }

                },
                function (err) {
                    model.IsProcessing(false);
                    alert(err.responseText);
                });
            }
        });
    }


    function initGridSequence() {
        var gs = $("#gridsequence");
        var kg = gs.kendoGrid({
            pageable: true,
            filterable: true,
            sortable: true,
            columns: [
                {
                    field: "WellName", title: "Well",
                    template: "<a style='cursor:pointer' onclick='gridSelect(\"#: UARigSequenceId #\")'>#: WellName #</a>"
                },
                {
                    field: "UARigSequenceId", title: "Rig Sequence", width: 50,
                    attributes: { style: "text-align:right" }
                },
                { field: "RigName", title: "Rig" },
                { field: "AssetName", title: "Asset" },
                { field: "Phases[0].ActivityType", title: "Activity" },
                {
                    field: "Phases[0].AFESchedule.Start", title: "AFE Start", width: 90,
                    template: "#: jsonDateStr(Phases[0].PhSchedule.Start) #"
                },
                {
                    field: "Phases[0].AFESchedule.Finish", title: "AFE Finish", width: 90,
                    template: "#: jsonDateStr(Phases[0].PhSchedule.Finish) #"
                },
                {
                    field: "Phases[0].AFEDuration.Total",
                    title: "AFE<br/>Duration", width: 70,
                    format: "{0:N0}", attributes: { style: 'text-align:right;' }
                },
                {
                    field: "Phases[0].AFECost.Total",
                    title: "AFE<br/>Cost", width: 90,
                    format: "{0:N0}", attributes: { style: 'text-align:right;' }
                }
            ]
        }).data("kendoGrid");

        ajaxPost("@Url.Action("GetSequences")",
            {},
            function (data) {

                kg.setDataSource(new kendo.data.DataSource({
                    data: data.Data,
                    pageSize: 10
                }));
            }
        );
    }

    function checkVal(x) {
        $(x).attr('value', x.checked ? 1 : 0);
    }

    function initGridWork() {
        var t = $("#dateWork").val();

        $("#gridwork").replaceWith($("<div />").attr("id", "gridwork"));

        var gs = $("#gridwork");
        var kg = gs.kendoGrid({
            pageable: false,
            filterable: true,
            sortable: true,
            columns: [
                {
                    width: 30,
                    field: "", title: "", template: "<input value='#: _id #'  type='checkbox' class='checkbox cb-phase' checked='checked' ></input>",
                },
                //{
                //    field: "_id", title: "id",
                //},
                //{
                //    field: "Phases[0].PhaseNo", title: "PhaseNo",
                //},
                {
                    field: "WellName", title: "Well",
                },
                {
                    field: "UARigSequenceId", title: "Rig Sequence", width: 50,
                    attributes: { style: "text-align:right" }
                },
                { field: "RigName", title: "Rig" },
                { field: "AssetName", title: "Asset" },
                { field: "Phases[0].ActivityType", title: "Activity" },
                {
                    field: "Phases[0].AFESchedule.Start", title: "AFE Start", width: 90,
                    template: "#: jsonDateStr(Phases[0].PhSchedule.Start) #"
                },
                {
                    field: "Phases[0].AFESchedule.Finish", title: "AFE Finish", width: 90,
                    template: "#: jsonDateStr(Phases[0].PhSchedule.Finish) #"
                }

            ]
        }).data("kendoGrid");

        ajaxPost("@Url.Action("GetWork")",
            { SearchDate: t },
            function (data) {
                kg.setDataSource(new kendo.data.DataSource({
                    data: data.Data,
                    pageSize: 10
                }));
            }
        );
    }
</script>
<script>
    function select(id, WellName) {
        model.ActivityId(id);
        model.SelectedWellName(WellName);
        var url = "@Url.Action("select")";
        ajaxPost(url, { id: id },
            function (data) {

                data.Data.Record.CurrentWeek.Cost = data.Data.Record.CurrentWeek.Cost / 1000000;

                _.each(data.Data.Record.Elements, function (e) {
                    e.CompletionOriginal = e.Completion;
                    e.Completion *= 100;
                });

                model.wrmodel().CostScale("million");


                model.wrmodel().record(ko.mapping.fromJS(data.Data.Record));
                model.wrmodel().mode("Edit");
                initForm();
                var x = model.UploadDocument();
                x.UploadDocumentWrapper(false);
                x.ButtonShowUploadDoc(true);
                model.UploadDocument().select();

                var y = model.wrmodel().record();
                ActualDays = parseFloat(y.Actual.Days());
                NPTDays = parseFloat(y.NPT.Days());
                if (ActualDays == 0 || NPTDays == 0) {
                    var hour = 0;
                } else {
                    var hour = NPTDays * ActualDays * 24;
                }
                model.wrmodel().NPTHours(hour);

                //alert("ok");
                //model.wrmodel().countTotalWords("ExeSum");
                //model.wrmodel().countTotalWords("OpsSum");
                //model.wrmodel().countTotalWords("PlnOps");

                //alert("ok2");
                //wfdata = data.WFData;
                refreshWaterfall();
            },
            function (err) {
                alert(err.responseText)
            });
    }

</script>
<script>
    $(document).ready(function () {
        init();
    });

    function PrintDocument() {
        //alert(model.ActivityId());
        //alert(model.SelectedWellName());
        //window.open('@Url.Action("PrintDocument")' + "?id=" + model.ActivityId(), 'Print Activity', 'height=100%,width=100%,scrollbars=1');
        @*var url = '@Url.Action("PrintDocument")' + "?id=" + model.ActivityId() + "&WellName=" + model.SelectedWellName();
        openwin(url, 1500, 900);*@
        var url = '@Url.Action("Print2Pdf")' + "?id=" + model.ActivityId() + "&WellName=" + model.SelectedWellName();
        location.href = url;
    }

    function openwin(url, strWidth, strHeight) {
        //if (popWin != "") { popWin.close() }
        leftStr = (screen.width - strWidth) / 2;
        topStr = (screen.height - strHeight) / 2 - 50;
        windowProperties = "toolbar=no,menubar=no,scrollbars=yes,statusbar=no,height=" + strHeight + ",width=" + strWidth + ",left=" + leftStr + ",top=" + topStr + "";
        var popWin = window.open(url, 'Print Activity', windowProperties);

    }
</script>