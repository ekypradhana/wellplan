
@{
    ViewBag.Title = "Report STOS";
    Layout = "~/Views/Shared/_common_v1.cshtml";
}

@using ECIS.Client.WEIS
@using Newtonsoft.Json
@using ECIS.Core
@{
}

<script>
    model.IsProcessing = ko.observable(false);
</script>

<style>
    .grids .grid {
        height: 100%;
        width: 100%;
    }

    .grids {
        margin-top: 15px;
    }

    .grids {
        padding: 0px 15px 0px 0px !important;
    }

        .grids .cell-number {
            text-align: right;
        }

        .grids .cell-date {
            text-align: center;
        }

        .grids .k-grid .k-grid-content {
            min-height: 100px;
            /*max-height: 600px;*/
        }



        .grids .k-header.k-grid-toolbar {
            /*background-color: #F9F9FB;*/
        }

        .grids .k-header[role=columnheader] {
            vertical-align: middle;
        }

            .grids .k-header[role=columnheader][data-colspan] {
                text-align: center;
                font-weight: bold;
                color: #a8a8a8;
            }

        .grids [role=rowgroup] [role=row]:nth-child(n+2) [role=columnheader] {
            text-align: center;
            vertical-align: top;
        }

    .k-grid .k-grid-content-locked {
        height: auto !important;
    }
</style>



<div class="col-md-12" style="margin-bottom: 10px;">
    <!-- filters -->
    @Html.Partial("FilterForPalantir")

    <script>
        //model.FilterVisibility.LineOfBusiness(true);
        //model.FilterVisibility.Asset(true);
        //model.FilterVisibility.FundingType(true);
        ////model.FilterVisibility.CaseNames(true);
        //model.FilterVisibility.MoneyType(true);
        model.FilterVisibility.Currency(true);
        model.FilterVisibility.SSTG(true);
        model.FilterVisibility.PlanClass(true);
        model.FilterVisibility.BtnGenerateSPOS(true);

        //model.FilterVisibility.ReportingEntity(true);
        //model.FilterVisibility.PlanningEntity(true);
        //model.FilterVisibility.PlanningEntityID(true);
        //model.FilterVisibility.ActivityEntity(true);
        //model.FilterVisibility.ActivityEntityID(true);
        //model.FilterVisibility.BtnGenerateMpmaster(true);

    </script>

    <div data-bind="visible: model.IsProcessing()">
        @Html.Partial("_processing")
    </div>

    <div data-bind="style: { visibility: (!model.IsProcessing() ? 'visible' : 'hidden'), height: (!model.IsProcessing() ? '' : '0px'), overflow: (!model.IsProcessing() ? '' : 'hidden') }">

        <div class="col-md-12 grids by-monthlypm">
            <div class="row">
                <div class="col-md-12">
                    <div style="margin-bottom:20px;margin-left:20px;">
                        <button onclick="updateDataFromGrid()" class="btn btn-info btn-sm"><span class="glyphicon glyphicon-save"></span> Save Changes</button>
                    </div>
                    <div id="grid_stos" class="grid"></div>
                </div>
            </div>
        </div>

        <div style="clear: both;"></div>
    </div>

</div>

<script type="text/javascript">
    model.PageId("Administration");
    $(document).ready(function () {
        model.reloadData();
    });

    model.reloadData = function () {
        if (model.IsProcessing()) return;
        model.IsProcessing(true);
        model.GetDataReport("@Url.Action("GetSTOSReport")");
    }

    model.GetDataReport = function (url) {
        var param = model.getFilterValues();
        ajaxPost(url, param, function (res) {
            model.IsProcessing(false);
            if (res.Result != "OK") {
                alert(res.Message);
                return;
            }

            if (res.Data.length > 0) {
                renderGridUsingData(res.Data);
            }

        }, function (res) {
            model.IsProcessing(false);
            alert(res);
        });
    }

    var uniqueArray = function (a) {
        return a.reduce(function (p, c) {
            if (p.indexOf(c) < 0) p.push(c);
            return p;
        }, []);
    };

    function toggleCheckSTOS(sender) {
        var s = $(sender);
        var cbxs = s.closest("#grid_stos.k-grid").find("input[type='checkbox'].checkme");
        cbxs.prop("checked", s.prop("checked"));
    }

    model.renderGridColumnsSTOS = function (data) {
        var gridColumns = [];
        gridColumns.push(
        //    {
        //    width: 30,
        //    template: "<input type='checkbox' class='checkme' value='#: _id #'>",
        //    headerTemplate: "<input type='checkbox' class='check_toggle' onchange='javascript:toggleCheckSTOS(this)'>",
        //    locked: true,
        //    lockable: false
        //},
        {
            field: "ActivityName",
            title: "Activity Name",
            width: 150,
            //locked: true,
            //lockable: false
        }, {
            field: "Project",
            title: "Project",
            width: 80,
            //locked: true
        }, {
            field: "SpendType",
            title: "Spend Type",
            width: 80,
            //locked: true
        }, {
            field: "ActivityDescription",
            title: "Activity<br>Description",
            width: 100,
            //locked: true
        }, {
            field: "RegretConsequences",
            title: "Regret<br>Consequences",
            width: 100,
            editable: true
            //locked: true
        }, {
            field: "Rank",
            title: "Rank",
            width: 100,
            editable: true
            //locked: true
        }, {
            field: "PMaster",
            title: "PMaster",
            width: 150,
            editable: true
            //locked: true
        }, {
            field: "PMasterCategory",
            title: "PMaster Category",
            width: 150,
            editable: true
            //locked: true
        }, {
            field: "SponsorFunction",
            title: "Sponsor<br>Function",
            width: 80,
            editable: true
            //locked: true
        }, {
            field: "Revenue",
            title: "Revenue",
            width: 150,
            editable: true
            //locked: true
        }, {
            field: "CostEstimator",
            title: "Cost<br>Estimator",
            width: 90,
            editable: true
            //locked: true
        }, {
            field: "AssuranceLevel",
            title: "Assurance<br>Level",
            width: 80,
            editable: true
            //locked: true
        }, {
            field: "EstimateType",
            title: "EstimateType",
            width: 90,
            attributes: { style: 'text-align:right;' },
            //locked: true
        }, {
            field: "Regrets",
            title: "Regrets",
            width: 80,
            attributes: { style: 'text-align:right;' },
            editable: true
            //locked: true
        }, {
            field: "Currency",
            title: "Currency",
            width: 90,
            //locked: true
        }, {
            field: "POE",
            title: "POE",
            width: 80,
            attributes: { style: 'text-align:right;' },
            //locked: true
        }, {
            field: "Contingency",
            title: "Contingency",
            width: 90,
            attributes: { style: 'text-align:right;' },
            //locked: true
        },  {
            field: "Escalation",
            title: "Escalation",
            width: 90,
            //locked: true
        }, {
            field: "OwnersCost",
            title: "Owners Cost",
            width: 90,
            attributes: { style: 'text-align:right;' },
            //locked: true
        });

        var recordAnnual = data[0].Details;
        var iAnnual = 0;
        for (var key in recordAnnual) {
            if (recordAnnual.hasOwnProperty(key)) {
                for (var keyitem in recordAnnual[key]) {
                    gridColumns.push({
                        field: ("Details[" + iAnnual + "]." + keyitem),
                        title: keyitem.split('_')[1], width: 70, format: "{0:N1}",
                        attributes: { style: 'text-align:right;' },
                        editor: function (container, options) {
                            //console.log(options);
                            var spl1 = options.field.split("[")[1];
                            var spl2 = spl1.split("].");
                            var val = kendo.toString(options.model["Details"][spl2[0]][spl2[1]],"n1");
                            $("<input class='editor' readonly='readonly' disabled type='text' value='" + val + "'/>")
                                .appendTo(container);
                        }
                    });
                }
                iAnnual++;
            }
        }
        return gridColumns;
    }

    function getChangedData($grid, type) {
        var updatedRecords = [];

        $grid.data("kendoGrid").dataSource._data.forEach(function (f) {
            if (type == "dirty") {
                if (f.dirty) updatedRecords.push(f);
            } else {
                updatedRecords.push(f);
            }
        });

        var updated = updatedRecords;

        //for (var a = 0; a < updated.length; a++) {
        //    var b = updated[a];
        //    for (i in b) if (b.hasOwnProperty(i)) {
        //        if (i.indexOf(".") > -1) {
        //            delete updated[a][i];
        //        }
        //    }
        //}

        return updated;
    }

    function updateDataFromGrid() {
        var dataDirty = getChangedData($("#grid_stos"), "dirty");
        console.log(dataDirty);
        model.IsProcessing(true);
        ajaxPost("@Url.Action("UpdateSTOSFromGrid")",dataDirty , function (res) {
            if (res.Success) {
                model.IsProcessing(false);
                model.reloadData();
            } else {
                alert(res.Message);
                model.IsProcessing(false);
            }
        }, function () {
            alert(res.Message);
            model.IsProcessing(false);
        });
    }

    function renderGridUsingData(data) {
        $('#grid_stos').replaceWith($('<div />').attr('id', 'grid_stos'));
        $('#grid_stos').kendoGrid({
            toolbar: ["pdf", "excel"],
            pdf: { filename: "Data STOS.pdf" },
            excel: { fileName: "Data STOS.xlsx", allPages: true, filterable: true },
            dataSource: {
                data: data,
                type: "json",
                pageSize: 10,
                schema: {
                    model: {
                        fields: {
                            "ActivityName": { editable: false },
                            "Project": { editable: false },
                            "SpendType": { editable: false },
                            "CostEstimator": { editable: false },
                            "POE": { editable: false },
                            "Contingency": { editable: false },
                            "Escalation": { editable: false },
                            "OwnersCost": { editable: false },
                            "Details": { editable: false },
                            "Currency": { editable: false },
                            "EstimateType": { editable: false },


                            "ActivityDesc": { type: "string", editable: true },
                            "RegretConsequences": { type: "string", editable: true },
                            "Rank": { type: "string", editable: true },
                            "PMaster": { type: "string", editable: true },
                            "PMasterCategory": { type: "string", editable: true },
                            "SponsorFunction": { type: "string", editable: true },
                            "Revenue": { type: "string", editable: true },
                            "Regrets": { type: "string", editable: true },
                            "POE": { type: "number", editable: true },
                        }
                    },
                },
            },
            editable:true,
            pageable: true,
            sortable: true,
            resizable: true,
            columns: model.renderGridColumnsSTOS(data),
            excelExport: function (e) {
                //var sheet = e.workbook.sheets[0];
                //for (var rowIndex = 0; rowIndex < sheet.rows.length; rowIndex++) {
                //    var row = sheet.rows[rowIndex];
                //    for (var cellIndex = 0; cellIndex < row.cells.length; cellIndex++) {
                //        if (rowIndex == 0) {
                //            row.cells[cellIndex].value = row.cells[cellIndex].value.replace("<br/>", "");
                //        }
                //    }
                //}
            }
        });

    }

    model.deleteaggrmpmaster = function () {
        var conf = confirm("Are you sure want to delete?");
        if (conf) {
            model.deleteaggr("grid_monthly", "pmasterMonthly");
        }
    }

    model.deleteaggr = function (idgrid, report) {
        var ids = $("#" + idgrid).find("input.checkme:checked");
        var idValues = $.map(ids, function (obj, idx) {
            var $obj = $(obj);
            return $obj.val();
        });
        if (idValues.length == 0) {
            alert("Please select record Report to be reminded");
            return;
        }

        model.IsProcessing(true);
        ajaxPost("@Url.Action("DeleteAggr")", { ids: idValues, report: report }, function (res) {
            if (res.Success) {
                model.IsProcessing(false);
                model.reloadData();
            } else {
                alert(res.Message);
                model.IsProcessing(false);
            }
        }, function () {
            alert(res.Message);
            model.IsProcessing(false);
        });
    }

    model.deletemapmpmaster = function () {
        var conf = confirm("Are you sure want to delete?");
        if (conf) {
            model.deletemap("pmasterMonthly");
        }
    }

    model.deletemap = function (report) {
        model.IsProcessing(true);
        ajaxPost("@Url.Action("DeleteMap")", { caseName: casename, report: report }, function (res) {
            if (res.Success) {
                model.IsProcessing(false);
                model.reloadData();
            } else {
                alert(res.Message);
                model.IsProcessing(false);
            }
        }, function () {
            alert(res.Message);
            model.IsProcessing(false);
        });
    }

</script>



