@using ECIS.Core;
@using ECIS.Client.WEIS;
@using MongoDB.Driver;
@using MongoDB.Driver.Builders;
@using Newtonsoft.Json;

@{
    ViewBag.Title = "Exchange Rate";
    Layout = "~/Views/Shared/_common_v1.cshtml";
    var ContinentDataSource = new List<string>();
    ContinentDataSource = DataHelper.Populate("WEISCountries").Where(x => x.GetString("Continent") != null).Select(x => x.GetString("Continent")).Distinct().ToList<string>();
}

<style>
    .k-grid-content-locked {
        height: auto !important;
    }

    .control {
        margin-top: 10px;
        margin-bottom: 10px;
    }

    .cell-right {
        text-align: right;
    }

    .cell-center {
        text-align: center;
    }

    .modal .modal-body .form-group {
        min-height: 27px;
        margin-bottom: 4px;
    }

        .modal .modal-body .form-group input,
        .modal .modal-body .form-group textarea {
            border-color: #EFEFEF;
        }

        .modal .modal-body .form-group .col-md-4 {
            text-align: right;
            padding-top: 5px;
            padding-right: 0px;
        }
</style>

<script>

    model.PageId("Administration");
    model.exchangerate = {};
    model.exchangerate.ContinentDataSource = ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(ContinentDataSource)));
    model.exchangerate.IsProcessing = ko.observable(false);
    model.exchangerate.IsEdited = ko.observable(false);
    model.exchangerate.Data = ko.observable(@MvcTools.Obj2HtmlStr(new MacroEconomic()));
    model.exchangerate.CountriesDataSource = ko.observableArray();
    model.exchangerate.AddItem = {};
    model.exchangerate.AddItem.Year = ko.observable(0);
    model.exchangerate.AddItem.Value = ko.observable(0);
    model.exchangerate.AddItem.Source = ko.observable("");
    model.exchangerate.AddItem.Desc = ko.observable("");
    model.exchangerate.AddItem.ID = ko.observable("");
    model.exchangerate.AddItem.Type = ko.observable("GDP");
    model.exchangerate.AddItem.InterestRatesType = ko.observable("short");
    model.exchangerate.countryname = ko.observable("");
    model.exchangerate.currency = ko.observable("");

    model.exchangerate.year = [2015, 2016];

    model.Country = ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(
            DataHelper.Populate("WEISMacroEconomics").GroupBy(d => d.GetString("Country")).Select(d => d.Key).OrderBy(d => d)
             )));
    //model.Country = MacroEconomic.Populate<MacroEconomic>().GroupBy(d => d.Country).Select(d => d.Key).OrderBy(d => d);
    //model.computedcountry = ko.computed(function () {
    //    return _.uniq(model.Country(), false, ko.toJSON);
    //}, this);
    model.selectedcountry = ko.observableArray([]);

    model.Add = function () {
        $("#modal-add").modal('show');
    };
    model.exchangerate.getCountries = function () {
        var url = "@Url.Action("GetCountry")";
        var param = {};
        ajaxPost(url, param, function (res) {
            if (res.Result == "OK") {
                model.exchangerate.CountriesDataSource(res.Data);
            } else {
                alert(res.Message);
            }
        });
    }
    model.exchangerate.SaveCountry = function () {
        if (model.exchangerate.IsProcessing()) return;
        model.exchangerate.IsProcessing(true);

        var url = "@Url.Action("SaveCountry")";
        var param = { countryname: model.exchangerate.countryname(), currency: model.exchangerate.currency() };

        ajaxPost(url, param, function (res) {
            model.GetCalculationStatus();

            model.exchangerate.IsProcessing(false);

            if (res.Data.Success) {
                //console.log("success");

                model.Country.push(model.exchangerate.countryname());
                //model.computedcountry().sort();
                model.Country().sort();
                model.exchangerate.Refresh();
                model.exchangerate.countryname("");
                model.exchangerate.currency("");
                $("#modal-add").modal('hide');
                //model.Country([]);
                return;
            }
            alert(res.Data.Message);

        }, function (a, b, c) {
            model.exchangerate.IsProcessing(false);
            alert("error occured when saving user" + model.exchangerate.countryname());
            $("#modal-add").modal('hide');
        });

    };


    model.reloadData = function () {
        model.exchangerate.Refresh();
    };

    model.exchangerate.PrepareUploadForm = function () {
        $("#upload .grid").kendoUpload({
            async: {
                saveUrl: '@Url.Action("Upload")',
                removeUrl: "remove",
                autoUpload: false
            },
            complete: function (e) {
                model.exchangerate.Refresh();
            },
            select: function (e) {
                $.each(e.files, function (index, value) {
                    var ok = value.extension == ".xlsx" || value.extension == ".xls"

                    if (!ok) {
                        e.preventDefault();
                        alert("Please upload only Excel (xls, xlsx) files");
                    }
                });
            }
        });
    };
    model.exchangerate.Refresh = function (callback) {
        model.exchangerate.getCountries();
        @*model.Country(@MvcHtmlString.Create(JsonConvert.SerializeObject(
            DataHelper.Populate("WEISMacroEconomics").Select(d => d.GetString("Country")).OrderBy(d => d)
             )));*@
        var url = "@Url.Action("GetDataExchangeRate")";
        var countries = model.selectedcountry();
        //var lengthcountry = model.computedcountry().length;
        var lengthcountry = model.Country().length;
        var param = {};
        if (countries = "[]" && countries.length == 0) {
            //countries = model.computedcountry().slice(0, lengthcountry - 1);
            countries = model.Country().slice(0, lengthcountry - 1);
            param = { country: countries };
        }
        else {
            param = { country: model.selectedcountry() };
        }


        model.exchangerate.IsProcessing(true);

        ajaxPost(url, param, function (res) {
            model.GetCalculationStatus();

            if (res.Result == "NOK") {
                alert(res.Message);
                model.exchangerate.IsProcessing(false);
                return;
            }

            model.exchangerate.IsProcessing(false);
            model.exchangerate.Data(res.Data);
            model.exchangerate.RenderGridExchangeRate();


            //$(".tab-content .tab-pane:not(.active) .grid").css("visibility", "hidden");

            if (callback != undefined) {
                callback();
            }
        });
    };

    model.exchangerate.GridSave = function () {
        var updates = [];
        var keys = [];

        $(".grid").each(function (i, e) {
            var data = _.filter($(e).data("kendoGrid").dataSource.data(), { dirty: true });
            //console.log(_.filter($(e).data("kendoGrid"), { dirty: true }));

            data.forEach(function (f) {
                var update = _.find(updates, { _id: f._id });
                //console.log("update:",update);
                if (update == undefined) {
                    for (var k in f) {
                        if (f.hasOwnProperty(k) && k.indexOf(".") > -1) {
                            delete f[k];
                        }
                    }
                    updates.push(f);

                    return;
                }

                if ($(e).parent().attr("id") == "grid-gdp")
                    update.GDP = f.GDP;
                else if ($(e).parent().attr("id") == "grid-rate")
                    update.ExchangeRate = f.ExchangeRate;
                else if ($(e).parent().attr("id") == "grid-exchange-rate")
                    update.ExchangeRate = f.ExchangeRate;
                else if ($(e).parent().attr("id") == "grid-interest-rate-short")
                    update.InterestRateShort = f.InterestRateShort;
                else if ($(e).parent().attr("id") == "grid-interest-rate-long")
                    update.InterestRateLong = f.InterestRateLong;
            });
        });

        var url = "@Url.Action("UpdateInlineExchange")";
        var param = { updates: updates };

        model.exchangerate.IsProcessing(true);

        ajaxPost(url, param, function (res) {
            model.GetCalculationStatus();

            if (res.Result == "NOK") {
                alert(res.Message);
                model.exchangerate.IsProcessing(false);
                return;
            }

            model.exchangerate.IsEdited(false);
            model.exchangerate.IsProcessing(false);
            model.exchangerate.Refresh();
        });
    };
    model.exchangerate.GridReset = function () {
        $(".grid").each(function (i, e) {
            $(e).data("kendoGrid").dataSource.read();
        });
        model.exchangerate.CheckGrid();
    };
    model.exchangerate.CheckGrid = function () {
        var isDirty = false;

        $(".grid").each(function (i, e) {
            if (isDirty) return;
            isDirty = _.filter($(e).data("kendoGrid").dataSource.data(), { dirty: true }).length > 0;
            if (isDirty) model.exchangerate.IsEdited(true);
        });

        if (!isDirty) {
            model.exchangerate.IsEdited(false);
        }
    };
    model.exchangerate.KendoNumericTextBoxEditor = function (container, option) {
        var input = $("<input data-bind=\"value:" + option.field + "\"></input>");
        input.appendTo(container);
        input.kendoNumericTextBox({
            change: function () {
                model.exchangerate.CheckGrid();
            }
        });
    };
    model.exchangerate.ShowAddItem = function (o, id) {
        var gridID = $(o).closest("[id]").attr("id");
        var data = $(o).closest(".k-grid").data("kendoGrid").dataSource.data();
        var year = moment(new Date()).year();

        if (gridID == "grid-rate") {
            model.exchangerate.AddItem.Type("exchangerates");
            if (data.length > 0) {
                year = _.max(data[0].ExchangeRate.AnnualValues, function (e) { return e.Year }).Year + 1;
            }
        }

        model.exchangerate.AddItem.ID(id);
        model.exchangerate.AddItem.Value(0);
        model.exchangerate.AddItem.Year(year);

        $("#modal-add-item").modal("show");
    };
    model.exchangerate.SaveItem = function () {
        var url = "@Url.Action("AddAnnualValuesType")";
        var param = {
            id: model.exchangerate.AddItem.ID(),
            Year: model.exchangerate.AddItem.Year(),
            Value: model.exchangerate.AddItem.Value(),
            Type: model.exchangerate.AddItem.Type(),
            Source: model.exchangerate.AddItem.Source(),
            Desc: model.exchangerate.AddItem.Desc(),
            InterestRatesType: model.exchangerate.AddItem.InterestRatesType()
        };

        ajaxPost(url, param, function (res) {
            model.GetCalculationStatus();

            if (res.Result == "NOK") {
                alert(res.Message);
                return;
            }

            //console.log("param value", param.Value)

            model.exchangerate.Refresh(function () {
                $("#modal-add-item").modal("hide");
            });
        });
    };

    model.exchangerate.SaveAll = function () {
        var url = "@Url.Action("SaveAll")";
        var param = {};

        ajaxPost(url, param, function (res) {
            model.GetCalculationStatus();

            if (res.Result == "NOK") {
                alert(res.Message);
                return;
            }
        });
    };

    model.exchangerate.BuildGridConfig = function (data, columns, editableFields, interest) {
        var width = $(".nav-tabs").closest(".col-md-12").width();
        var schema = {};
        var addItem = {
            locked: true,
            width: 40,
            attributes: { class: "ec-center" },
            template: function (dataItem) {
                return "<button class='btn btn-xs btn-custom btn-primary' onclick='model.exchangerate.ShowAddItem(this, \"" + dataItem._id + "\")'><span class='glyphicon glyphicon-plus'></span></button>"
            }
        };

        if (interest != undefined) {
            schema = {
                model: {
                    fields: {
                        Country: { editable: false },
                        Title: { editable: true },
                    }
                }
            };

            schema.model.fields[interest + ".SeasonallyAdjusted"] = { type: "boolean" };
            schema.model.fields[interest + ".DateOfLastUpdate"] = { type: "date" };
            editableFields.forEach(function (e) {
                schema.model.fields[e] = { type: "number" };
            });

            columns = [addItem].concat(columns).concat([
            //columns = columns.concat([
                { field: interest + ".Source", title: "Source", width: 240 },
                { field: interest + ".SeasonallyAdjusted", title: "Seasonally Adjusted", attributes: { class: "cell-center" }, width: 120 },
                { field: interest + ".BaseYearPrice", title: "Base Year Price", attributes: { class: "cell-right" }, width: 120 },
                { field: interest + ".BaseYearIndex", title: "Base Year Index", attributes: { class: "cell-right" }, width: 120 },
                { field: interest + ".HistoricalEndYear", title: "Historical End Year", attributes: { class: "cell-right" }, width: 120 },
                { field: interest + ".HistoricalEndQuarter", title: "Historical End Quarter", attributes: { class: "cell-right" }, width: 140 },
                { field: interest + ".DateOfLastUpdate", title: "Date Of Last Update", width: 120, format: "{0:dd-MMM-yyyy}", template: "#: jsonDateStr(" + interest + ".DateOfLastUpdate" + ") #" },
                { field: interest + ".SourceDetail", title: "Source Detail", width: 160 },
                { field: interest + ".AdditionalSourceDetail", title: "Additional Source Detail", width: 200 },
                { field: interest + ".Location", title: "Location Code", width: 120 },
                { field: interest + ".IndicatorCode", title: "Indicator Code", width: 120 }
            ]);
        } else {
            schema = {
                model: {
                    fields: {
                        Country: { editable: false },
                        Currency: { editable: true },
                        SwiftCode: { editable: false },
                        Category: { editable: false },
                        Continent: { editable: true },
                        MajorCountry: { editable: false }
                    }
                }
            };

            editableFields.forEach(function (e) {
                schema.model.fields[e] = { type: "number" };
            });

            columns = [
                addItem,
                { field: "Country", locked: true, width: 100 },
                { field: "BaseOP", locked: true, width: 100 },
                { field: "Currency", locked: true, width: 140, attributes: { "style": "text-transform: uppercase;" } },
                //{ field: "SwiftCode", title: "Swift Code", locked: true, width: 100 },
                { field: "Continent", locked: true, width: 100, editor: Continent },
                { field: "MajorCountry", title: "Major Country", locked: true, width: 100 }
            ].concat(columns);
        }

        return {
            chartArea: {
                width: width
            },
            dataSource: {
                data: data,
                schema: schema,
                pageSize: 10
            },
            pageable: true,
            sortable: true,
            filterable: false,
            editable: true,
            columns: columns
        };
    };
    model.exchangerate.RenderGridExchangeRate = function () {
        var data = model.exchangerate.Data();
        var columns = [];
        var editableFields = [];

        if (data.length > 0) {
            data[0].ExchangeRate.AnnualValues.forEach(function (e, i) {
                //for (var j = 0; j < model.exchangerate.year.length; j++) {
                //    if (data[0].ExchangeRate.AnnualValues[i].Year == model.exchangerate.year[j]) {
                columns.push({
                    title: String(e.Year), columns: [
                        { title: "Value", width: 67, field: "ExchangeRate.AnnualValues[" + i + "].Value", attributes: { class: "cell-right" }, editor: model.exchangerate.KendoNumericTextBoxEditor },
                        { title: "Desc", width: 200, field: "ExchangeRate.AnnualValues[" + i + "].Desc", attributes: { class: "cell-right" } },
                        { title: "Source", width: 200, field: "ExchangeRate.AnnualValues[" + i + "].Source", attributes: { class: "cell-right" } }
                    ],
                    width: 80,
                    format: "{0:N2}",
                    attributes: { class: "cell-right" }
                });
                editableFields.push("ExchangeRate.AnnualValues[" + i + "].Value");
                //    }
                //}
            });
        }

        var config = model.exchangerate.BuildGridConfig(data, columns, editableFields);

        $("#grid-rate .grid").replaceWith('<div class="grid"></div>');
        $("#grid-rate .grid").kendoGrid(config);
        $("#grid-rate .grid").on("change", function () {
            model.exchangerate.CheckGrid();
        });
    };
    model.exchangerate.Prepare = function () {
        $(".nav-tabs a").on("click", function (e) {
            $($(e.currentTarget).attr("href") + " .grid").each(function (i, e) {
                var $grid = $(e);

                if ($grid.css("visibility") != "hidden") {
                    return;
                }

                setTimeout(function () {
                    $grid.data("kendoGrid").dataSource.read();
                    $grid.css("visibility", "visible");
                }, 100);
            });
        });
    };


    function Continent(container, options) {
        $("<input type='text' data-bind='value : " + options.field + "'/>")
                .appendTo(container)
                .kendoDropDownList({
                    dataSource: model.exchangerate.ContinentDataSource(),
                    change: function () {
                        model.exchangerate.CheckGrid();
                    }
                });
    }

    $(function () {
        model.exchangerate.Prepare();
        model.exchangerate.Refresh();
        //model.exchangerate.SaveAll();
        //model.exchangerate.deletecountries();
    });
</script>

@Html.Partial("../AdministrationInput/_BusPlanCalculationNotifier")

<script type="text/html" id="grid-control-template">

</script>

<div class="col-md-12" data-bind="visible: model.exchangerate.IsProcessing()">
    @Html.Partial("_processing")
</div>
<div class="col-md-12" data-bind="visible:!model.exchangerate.IsProcessing()">
    <div class="ec-panel" style="">
        <div class="ec-toolbar" style="margin-left:15px">
            <div class="col-md-4 row">
                <button class="btn-sm btn btn-custom btn-success" data-bind="click: model.Add, enable: !model.BisPlanRecalculateStatus()">
                    <span class="glyphicon glyphicon-plus"></span> Add New
                </button>
                <button class="btn-sm btn btn-custom btn-primary" data-bind="enable: model.exchangerate.IsEdited() && !model.BisPlanRecalculateStatus(), click: model.exchangerate.GridSave">
                    <span class="glyphicon glyphicon-save"></span> Save Changes
                </button> (inline editing is enabled)
            </div>
            <div class="col-md-8">
                <div class="col-md-1" style="text-align:right">
                    <label>Country :  </label>
                </div>
                <div class="col-md-2" style="margin-right:0px">
                    <select id="Country" style="width:150px" data-bind="kendoMultiSelect:{data:Country, value:selectedcountry}"></select>
                </div>
                <div class="col-md-2" style="margin-left:0px">
                    <button class="btn-sm btn btn-custom btn-primary" onclick="model.exchangerate.Refresh();">
                        <span class="glyphicon glyphicon-refresh"></span> Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="col-md-12" data-bind="with: model.exchangerate, style: { 'visibility': model.exchangerate.IsProcessing() ? 'hidden' : 'visible' }">
    <div id="grid-rate">
        <div class="control" data-bind="template: { name: 'grid-control-template' }"></div>
        <div class="grid"></div>
    </div>
</div>

<div class="modal fade" id="modal-add-item" data-bind="with: model.exchangerate">
    <div class="modal-dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">
                        <span aria-hidden="true">&times;</span>
                        <span class="sr-only">Close</span>
                    </button>
                    <h4 class="modal-title">Add Item</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <div class="col-md-4">
                            <label>Year</label>
                        </div>
                        <div class="col-md-8">
                            <input type="text" style="width: 200px" data-bind="kendoNumericTextBox: { format: '#', value: AddItem.Year }" />
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-4">
                            <label>Value</label>
                        </div>
                        <div class="col-md-8">
                            <input type="text" style="width: 200px" data-bind="kendoNumericTextBox: { format: '{0:N2}', decimals: 2, value: AddItem.Value }" />
                        </div>
                    </div>
                    <div class="form-group" data-bind="visible: false">
                        <div class="col-md-4">
                            <label>Source</label>
                        </div>
                        <div class="col-md-8">
                            <input type="text" style="width: 200px; min-height: 27px;" data-bind="value: AddItem.Source" />
                        </div>
                    </div>
                    <div class="form-group" data-bind="visible: false">
                        <div class="col-md-4">
                            <label>Desc</label>
                        </div>
                        <div class="col-md-8">
                            <textarea style="width: 200px; min-height: 50px;" data-bind="value: AddItem.Desc"></textarea>
                        </div>
                    </div>
                    <div class="clearfix">&nbsp;</div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-sm btn-custom btn-warning" data-dismiss="modal">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-sm btn-custom btn-primary" data-bind="click: SaveItem, enable: !model.BisPlanRecalculateStatus()">
                        <span class="glyphicon glyphicon-refresh"></span> Save
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-add" tabindex="-1" role="dialog" aria-hidden="true" data-bind="with: model.exchangerate">
    <div class="modal-dialog" style="width: 400px;">
        <div class="modal-content">

            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h6 class="modal-title" style="font-size: 16px; font-weight: bold;">Add New Country</h6>
            </div>

            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label>Country Name :</label>
                        <input type="text" placeholder="Type country name" required data-bind="kendoDropDownList:{data:CountriesDataSource,value: countryname,optionLabel: 'Select Country'}" width="200px" />
                    </div>
                    @*<div class="form-group">
                            <label>Currency :</label>
                            <input type="text" class="form-control" placeholder="Type currency" required data-bind="value: currency" style="padding:15px" />
                        </div>*@
                </form>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" data-bind="click: SaveCountry">Save changes</button>
            </div>

        </div>
    </div>
</div>

@*<script>
        $(document).ready(function () {
            model.reloadData();
            model.exchangerate.Prepare();
            model.exchangerate.SaveAll();
        });
    </script>*@
<script>
    $(document).ready(function () {
        model.reloadData();
        model.exchangerate.Prepare();
        //model.exchangerate.SaveAll();
    });
</script>
