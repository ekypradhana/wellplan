
@{
    Layout = "~/Views/Shared/_common_v1.cshtml";
}

<style>
    .k-dropzone {
        padding-left: 15px;
    }

    .k-upload-selected {
        margin-left: 15px;
    }

    .modal .modal-body .form-group {
        min-height: 27px;
        margin-bottom: 4px;
    }

        .modal .modal-body .form-group input,
        .modal .modal-body .form-group textarea {
            border-color: #EFEFEF;
        }

        .modal .modal-body .form-group .col-md-4 {
            text-align: right;
            padding-top: 5px;
            padding-right: 0px;
        }
</style>
<script>
    //model.PageId("Administration");
    model.IsProcessing = ko.observable(false);
    //model.mode = ko.observable("upload");
    model.PageTitle = ko.observable("Generate STOS Report Map");
    //model.fileType = ko.observable("filteredData");
    //model.changeMode = function (mode) {
    //}

    model.MapNameInput = ko.observable("");

    var uniqueArray = function (a) {
        return a.reduce(function (p, c) {
            if (p.indexOf(c) < 0) p.push(c);
            return p;
        }, []);
    };

    model.renderGridColumnsStos = function (data) {
        var gridColumns = [];
        gridColumns.push({
            field: "ActivityName",
            title: "Activity Name",
            width: 150
        }, {
            field: "ProjectName",
            title: "Project",
            width: 80
        }, {
            field: "SpendType",
            title: "Spend Type",
            width: 80
        }, {
            field: "ActivityDescription",
            title: "Activity Description",
            width: 130
        }, {
            field: "RegretConsequences",
            title: "Regret Consequences",
            width: 130
        }, {
            field: "Rank",
            title: "Rank",
            width: 100
        }, {
            field: "PMaster",
            title: "PMaster",
            width: 150
        }, {
            field: "PMasterCategory",
            title: "PMaster Category",
            width: 150
        }, {
            field: "SponsorFunction",
            title: "Sponsor Function",
            width: 130
        }, {
            field: "Revenue",
            title: "Revenue",
            width: 150
        }, {
            field: "CostEstimator",
            title: "Cost Estimator",
            width: 90
        }, {
            field: "AssuranceLevel",
            title: "Assurance Level",
            width: 130
        }, {
            field: "EstimateType",
            title: "Estimate Type",
            width: 90,
            attributes: { style: 'text-align:right;' }
        }, {
            field: "Regrets",
            title: "Regrets",
            width: 80,
            attributes: { style: 'text-align:right;' }
        }, {
            field: "Currency",
            title: "Currency",
            width: 90
        }, {
            field: "POE",
            title: "POE %",
            width: 80,
            attributes: { style: 'text-align:right;' },
            format: "{0} %"
        }, {
            field: "Contingency",
            title: "Contingency %",
            width: 90,
            attributes: { style: 'text-align:right;' },
            format: "{0} %"
        },
        //{
        //    field: "LineofBusiness",
        //    title: "Line Of Business",
        //    width: 90,
        //    attributes: { style: 'text-align:right;' }
        //}, {
        //    field: "AssetName",
        //    title: "Asset Name",
        //    width: 90,
        //    attributes: { style: 'text-align:right;' }
        //},
        {
            field: "ReferenceFactorModel",
            title: "Reference Factor Model",
            width: 150
        }, {
            field: "RigName",
            title: "Rig Name",
            width: 90
        }, {
            field: "UARigSequenceId",
            title: "Sequence Id",
            width: 90
        });

        return gridColumns;
    }

    function renderGridUsingData(data) {
        var fieldCol = {};
        var gridCol = model.renderGridColumnsStos(data);
        gridCol.forEach(function (xx) {
            if (xx.field == "ActivityDescription" || xx.field == "RegretConsequences" || xx.field == "Rank" || xx.field == "PMaster"
                || xx.field == "PMasterCategory" || xx.field == "SponsorFunction" || xx.field == "Revenue" || xx.field == "AssuranceLevel" || xx.field == "Regrets") {
                fieldCol[xx.field] = { type: "string", editable: true };
            } else if (xx.field == "POE") {
                fieldCol[xx.field] = { type: "number", min: 0, max: 100, editable: true };
            } else {
                fieldCol[xx.field] = { type: "string", editable: false };
            }
        });

        var excelName = "DataSTOSMap_" + moment(new Date()).format("DD-MMM-YYYY_HH:mm:ss") + ".xlsx";

        $('#grid_stos').replaceWith($('<div />').attr('id', 'grid_stos'));
        $('#grid_stos').kendoGrid({
            toolbar: ["excel"],
            excel: { fileName: excelName, allPages: true, filterable: true },
            dataSource: {
                schema: {
                    model: {
                        fields: fieldCol
                    }
                },
                data: data,
                type: "json",
                pageSize: 10
            },
            editable: true,
            pageable: true,
            sortable: true,
            resizable: true,
            columns: gridCol,
            excelExport: function (e) {
                //var sheet = e.workbook.sheets[0];
                //for (var rowIndex = 0; rowIndex < sheet.rows.length; rowIndex++) {
                //    var row = sheet.rows[rowIndex];
                //    for (var cellIndex = 0; cellIndex < row.cells.length; cellIndex++) {
                //        if (rowIndex == 0) {
                //            row.cells[cellIndex].value = row.cells[cellIndex].value.replace("<br/>", "");
                //        }
                //    }
                //}
            }
        });

    }
</script>

<h4 data-bind="text:model.PageTitle"></h4>

<div>
    <div style="padding: 0px 15px 15px;">
        <div class="ec-toolbar">
            <button onclick="model.backpalantir()" class="btn btn-sm btn-warning"><span class="glyphicon glyphicon-arrow-left"></span> Back</button>
        </div>
        <div class="panel-group" id="accordion">
            <div class="panel panel-default">
                <div class="panel-heading" data-toggle="collapse" data-parent="#accordion" href="#collapse1" style="cursor: pointer;">
                    <span class="panel-title">
                        <a data-toggle="collapse" data-parent="#accordion" href="#collapse1">Filter</a>
                    </span>
                </div>
                <div id="collapse1" class="panel-collapse collapse in">
                    <div class="panel-body">
                        @*@Html.Partial("FilterForWaterfall")*@
                        @Html.Partial("FilterForPalantir")
                        <div class="col-md-12" style="">
                            <button class="btn btn-success btn-sm" style="margin-right: 10px; float: right" onclick="SaveMapSTOS()"><span class="glyphicon glyphicon-download"></span> Save</button>
                            <button class="btn btn-primary btn-sm" style="margin-right: 10px; float: right" onclick="GenerateMap()"><span class="glyphicon glyphicon-list"></span> Create Planning Map</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div data-bind="visible:!model.IsProcessing()">
            <div class="demo-section k-header"><input name="UploadedFile" id="files" type="file" /></div>
            <div id="grid_stos" class="grid"></div>

            <div style="clear: both;"></div>
        </div>
    </div>
    <div data-bind="visible:model.IsProcessing()">
        @Html.Partial("_processing")
    </div>
</div>

<div class="modal fade" id="modal-add-item">
    @*data-bind="with: model.GenerateTransformation">*@
    <div class="modal-dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">
                        <span aria-hidden="true">&times;</span>
                        <span class="sr-only">Close</span>
                    </button>
                    <h4 class="modal-title">Save Map Monthly PMaster</h4>
                </div>
                <div class="modal-body">
                    <div data-bind="visible:model.savingMapProcessing()" id="savingMapProcessing">
                        @Html.Partial("_processing")
                    </div>
                    <div class="form-group" id="savingMapProcessing" data-bind="visible:!model.savingMapProcessing()">
                        <div class="col-md-4">
                            <label style=" padding-top: 4px;">Map File: </label>
                        </div>
                        <div class="col-md-8">
                            <input type="text" id="mapnameinput" data-bind="value:MapNameInput" />
                        </div>
                    </div>
                    <div class="clearfix">&nbsp;</div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-sm btn-custom btn-warning" data-dismiss="modal">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-sm btn-custom btn-success" data-bind="click: SaveMap,enable:!model.savingMapProcessing()">
                        <span class="glyphicon glyphicon-download"></span> OK
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    model.backpalantir = function(){
    var url = "@Url.Action("Index", "STOS")";
        location.href = url;
    }

    //model.FilterVisibility.PerformanceUnits(false);
    //model.FilterVisibility.MonthlySequence(false);
    
    //model.FilterVisibility.Activities(true);
    //model.FilterVisibility.OPs(true);
    //model.FilterVisibility.OpRelation(true);
    //model.FilterVisibility.Date(true);
    //model.FilterVisibility.Date2(true);
    //model.FilterVisibility.PeriodBase(false);
    //model.FilterVisibility.PeriodView(true);
    //model.FilterVisibility.PeriodRelation(false);
    //model.FilterVisibility.inlastuploadls(true);

    model.FilterVisibilityPalantir.LineOfBusiness(true);
    model.FilterVisibilityPalantir.Asset(true);
    model.FilterVisibilityPalantir.FundingType(true);
    model.FilterVisibilityPalantir.WellNames(false);
    model.FilterVisibilityPalantir.ProjectNames(false);
    model.FilterVisibilityPalantir.Currency(false);
    model.FilterVisibilityPalantir.InPlan(false);

    model.savingMapProcessing = ko.observable(false);

    function SaveMapSTOS() {
        $("#modal-add-item").modal("show");
    }

    function SaveMap() {
        model.savingMapProcessing(true);
        model.IsProcessing(true);
        if (model.MapNameInput() != "") {
            $("#modal-add-item").modal("hide");

            setTimeout(function () {
                var grid = $("#grid_stos").data("kendoGrid");
                var data = grid.dataSource.data();

                ///devide data and take per 50.
                var totalLoop = Math.ceil(data.length / 50);
                var counter = 0;
                var take = 50;
                var skip = 0;

                for (var i = 0; i < totalLoop; i++) {
                    var dataToThrow = Enumerable.From(data).Skip(skip).Take(take).ToArray();
                    ajaxPost("@Url.Action("SavePlanStos")", { list: dataToThrow, mapnames: model.MapNameInput() }, function (res) {
                        //if (res.Result == "OK") {
                        //    counter++;
                        //}
                        counter++;
                        CounterSaveMap(totalLoop, counter);
                    }, function () {
                        counter++;
                        CounterSaveMap(totalLoop, counter);
                    });
                    skip = skip + take;
                }
            }, 300);
            
        } else {
            alert("Please Input Map Name");
            model.savingMapProcessing(false);
            model.IsProcessing(false);
        }
    }


    function CounterSaveMap(TotalLoop, Counter) {
        if (Counter >= TotalLoop) {
            alert("Map STOS Generated");
            model.savingMapProcessing(false);
            model.IsProcessing(false);
        }
    }

    @*ajaxPost("@Url.Action("SavePlanStos")", { list: data, mapnames: model.MapNameInput() }, function (res) {
        if (res.Result == "NOK") {
            model.savingMapProcessing(false);
            alert(res.Message);
            return;
        }
        alert("Map STOS Generated");
        model.savingMapProcessing(false);
    }, function() {
        model.savingMapProcessing(false);
    });*@

    function GenerateMap() {
        //$("#modal-add-item").modal("show");

        //var param = model.getFilterValues();
        //param.reportingEntity = model.ReportingEntity();
        //param.planningEntity = model.PlanningEntity();
        //param.plannEntityID = model.PlanningEntityId();
        //param.activityEntity = model.ActivityEntity();
        //param.activityEntityID = model.ActivityEntityId();
        //param.probabilityofSuccess = model.ProbabilityOfSuccess();
        //param.report = "pmasterstandard";
        var paramStos = model.getFilterValuesPalantir();

        model.IsProcessing(true);
        var url = "@Url.Action("GenerateMapStos", "STOS")";
        ajaxPost(url, { pq: paramStos }, function (data) {
            model.IsProcessing(false);
            if (data.Data.Status == "NOK") {
                alert(data.Data.Message);
                return;
            }
            console.log(data);
            renderGridUsingData(data.Data);
        }, function (err) {
            model.IsProcessing(false);
            alert(err)
        });
    }

    function onComplete(e) {
        // model.LoadDataGrid();
    }

    function onSelect(e) {
        $(".k-upload-files.k-reset").remove();
        $.each(e.files, function (index, value) {
            //alert(value.extension);
            var ok = value.extension == ".xlsx"
                     || value.extension == ".xls"

            if (!ok) {
                e.preventDefault();
                alert("Please upload only Excel (xls, xlsx) files");
            }
        });
    }

    $(document).ready(function () {
        $(".do-filter").hide();
        $(".do-filterpalantir").hide();
        $("#files").kendoUpload({
            async: {
                saveUrl: '@Url.Action("UploadMap", "STOS")',
                //removeUrl: "remove",
                autoUpload: false
            },
            localization: {
                select: 'Import Map File',
                remove: '',
                cancel: ''
            },
            complete: onComplete,
            select: onSelect,
            success: function (e) {
                var res = e.response;
                console.log(e);
                if (res.Result != "OK") {
                    alert(res.Message);
                    return;
                }

                alert("Upload Success!");
                renderGridUsingData(res.Data);
            }
        });
    });

</script>

