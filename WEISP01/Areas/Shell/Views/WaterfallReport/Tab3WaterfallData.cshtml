<style>
    
</style>

<div class="ec-panel" style="width:1000px;margin:0px auto;">
    <div data-bind="with:$root.WaterfallFilter">
        <div class="mini-nav bordered-mini-nav" style="width: 580px; margin: 0px;">
            <div class="each-nav">
                Show:
                <select data-bind="value:DayOrCost" style="margin-right: 5px;">
                    <option value="Days">Days</option>
                    <option value="Cost">Cost</option>
                </select>
            </div>
            <div class="each-nav">
                Base OP:
                <select data-bind="value:BaseOP,options:model.OPs()" style="margin-right: 5px;"></select>
            </div>
            <div class="each-nav checkbox-nav">
                <div>
                    <input type="checkbox" data-bind="checked:ShellShare" />
                </div>
                <div>Calc Shell Share</div>
                <div class="clearfix"></div>
            </div>
            <div class="each-nav checkbox-nav">
                <div>
                    <input type="checkbox" data-bind="checked:Firm" />
                </div>
                <div>Firm</div>
                <div class="clearfix"></div>
            </div>
            <div class="each-nav checkbox-nav">
                <div>
                    <input type="checkbox" data-bind="checked:Option" />
                </div>
                <div>Option</div>
                <div class="clearfix"></div>
            </div>
            <div class="each-nav checkbox-nav">
                <div>
                    <input type="checkbox" data-bind="checked:Blank" />
                </div>
                <div>Blank</div>
                <div class="clearfix"></div>
            </div>
            <div class="each-nav checkbox-nav no-border-nav">
                <div>
                    <input type="checkbox" data-bind="checked:ValidLSOnly" />
                </div>
                <div>Valid LS Only</div>
                <div class="clearfix"></div>
            </div>
            <div class="clearfix"></div>
        </div>
    </div>
</div>

<div style="padding: 0px 30px 20px; margin-top: 10px;" class="grid">
    <div class="grid-waterfall-data"></div>
</div>

<script>
    model.GenerateWaterfallGrid = function (data) {
        
        var buildColumn = function (field, title, withFooter) {
            console
            return {
                field: field,
                title: typeof withFooter == "undefined" ? "<b>" + title + "</b><br />" + (model.WaterfallFilter.DayOrCost() === 'Days' ? 'Days' : 'Cost (US$ m)') : "<b>" + title + "</b>",
                width: 90,
                format: "{0:N1}",
                attributes: { style: 'text-align:right;' },
                aggregates: ["sum"],
                footerTemplate: typeof withFooter == "undefined" ? "<div style='text-align: right;' data-value='#=sum.toFixed(1)#'>#=kendo.format('{0:N1}',sum.toFixed(1))#</div>" : ""
            };
        };

        var buildColumnSS = function (field, title, withFooter) {
            
            return {
                field: field,
                title: typeof withFooter == "undefined" ? "<b>" + title + "</b><br />" + (model.WaterfallFilter.DayOrCost() === 'Days' ? 'Days' : 'Cost (US$ m)') : "<b>" + title + "</b>",
                width: 90,
                format: "{0:N2}",
                attributes: { style: 'text-align:right;' },
                aggregates: ["sum"],
                footerTemplate: typeof withFooter == "undefined" ? "<div style='text-align: right;' data-value='#=sum.toFixed(2)#'>#=kendo.format('{0:N2}',sum.toFixed(2))#</div>" : ""
            };
        };

        var columns = [
            { field: "WellName", title: "Well" },
            { field: "ActivityType", title: "Activity" },
            { field: "ActivityCategory", title: "Activity Category" },
            { field: "RigName", title: "Rig" },
            {
                field: "LSStart", title: "LS Start", format: "{0:dd-MMM-yyyy}", type: "date",
                template: "#: jsonDateStr(LSStart) #",
            },
            {
                field: "LSFinish", title: "LS Finish",
                format: "{0:dd-MMM-yyyy}", type: "date",
                template: "#: jsonDateStr(LSFinish) #",
            },
            { field: "Type", title: "Type", width: 60 },
            buildColumn("OP", "OP"),
            buildColumn("LEPIPOpp", "PIP Opp"),
            buildColumn("LEPIPRisk", "PIP Risk"),
            buildColumn("Gaps", "Gap to LE"),
            buildColumn("TQ", "TQ"),
            buildColumn("LE", "LE")
        ];
        if (model.WaterfallFilter.ShellShare()) columns.push(buildColumnSS("WorkingInterest", "Shell Share<br>Factor", false));
        $('.grid-waterfall-data').replaceWith($('<div />').addClass('grid-waterfall-data'));
        $('.grid-waterfall-data').kendoGrid({
            toolbar: ["pdf", "excel"],
            pdf: { fileName: "Waterfall Data-"+moment(new Date()).format("YYYY-MM-DD-HHmmss")+".pdf" },
            excel: { fileName: "Waterfall Data-"+ moment(new Date()).format("YYYY-MM-DD-HHmmss")+".xlsx", allPages: true, filterable: true },
            dataSource: {
                data: data,
                type: "json",
                aggregate: [
                    { field: "Gaps", aggregate: "sum" },
                    { field: "OP", aggregate: "sum" },
                    { field: "LE", aggregate: "sum" },
                    { field: "TQ", aggregate: "sum" },
                    { field: "LEPIPOpp", aggregate: "sum" },
                    { field: "LEPIPRisk", aggregate: "sum" },
                ]
            },
            excelExport: function (e) {
                var sheet = e.workbook.sheets[0];
                var a = e.workbook.sheets;
                a.forEach(function (c) {
                    c.rows.forEach(function (d) {
                        if (d.type == "header") {
                            d.cells.forEach(function (i, j) {
                                i.value = i.value.replace("<br/>", " ");
                                i.value = i.value.replace("<br />", " ");
                                i.value = i.value.replace("<br>", " ");
                                i.value = i.value.replace("<b>", " ");
                                i.value = i.value.replace("</b>", " ");
                            });
                        }
                        if (d.type == "footer") {
                            d.cells.forEach(function (x, y) {
                                if (typeof x.value != 'undefined') {
                                    //console.log("origine value:", $(x.value).data('value'));
                                    x.value = x.value.replace("<div style='text-align: right;' data-value='" + $(x.value).data('value') + "'>", "");
                                    x.value = x.value.replace("</div>", "");
                                    x.value = parseFloat(x.value);
                                    x.hAlign = "right";
                                }
                                // x.value = x.value.replace("<div style='text-align: right;'>", "");
                                //x.value = x.value.replace("</div>", "");
                            });
                        }
                    });
                });
            },
            height: 280,
            scrollable: true,
            sortable: true,
            resizable: true,
            columns: columns,
            pageable: true
        });
        
        var find = $(".grid-waterfall-data > .k-pager-wrap.k-grid-pager.k-widget").find(".k-pager-info");
        if (find.length > 0)
            find.remove();

        $('<span class="k-pager-info k-label total-rows">Total &nbsp; ' + data.length + ' items</span>').insertAfter('.grid-waterfall-data > .k-pager-wrap.k-grid-pager.k-widget > .k-link.k-pager-nav.k-pager-last');

    };

    
</script>

