@{
    ViewBag.Title = "Waterfall and Cumulative";
    Layout = "~/Views/Shared/_common_v1.cshtml";
}
@using ECIS.Core
@using ECIS.Client.WEIS
@using Newtonsoft.Json
@using MongoDB.Driver;
@using MongoDB.Driver.Builders;

@{
    var BaseOP = DataHelper.Populate("WEISOPs").Select(x => BsonHelper.GetString(x, "_id")).ToList<string>();//,Query.NE("_id","OP14")
}

@Html.Partial("FilterForMonthlyLEReport")
@*@Html.Partial("FilterForWaterfall")*@

<script>
    model.PageId("Performance Improvement Plan");

    model.FilterVisibility.ExType(true);
    model.FilterVisibility.Activities(true);    
    model.FilterVisibility.PerformanceUnits(true);
    model.FilterVisibility.Date(true);
    model.FilterVisibility.Date2(true);
    model.FilterVisibility.PeriodBase(false);
    model.FilterVisibility.PeriodView(true);
    model.FilterVisibility.PeriodRelation(false);
    model.FilterVisibility.OPs(false);
    model.FilterVisibility.OpRelation(false);
    model.FilterVisibility.firmoption(false);
    model.FilterVisibility.showLabelLSFilter(true);

    model.YearOptions = ko.observableArray(['All Years', moment(new Date()).year()]);
    model.OpValue = ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(DataHelper.Populate("SharedConfigTable", Query.EQ("_id", "BaseOPConfig"))
        .Select(d=>d.GetString("ConfigValue")))));
    model.WaterfallFilter = {
        GroupBy: ko.observable("GroupBy"),
        Layout: ko.observable("AFE2TQ2LE"),
        IncludeZero: ko.observable(false),
        IncludeGaps: ko.observable(true),
        IncludeCR: ko.observable(true),
        DayOrCost: ko.observable("Cost"),
        Scaled: ko.observable(false),
        CumulativeDataType: ko.observable("Total"),
        AllocationYear: ko.observable(model.YearOptions()[1]),
        BaseOP: ko.observable(model.OpValue()[0]),
        BaseOPWaterfall: ko.observable(""),
        ShellShare: ko.observable(false),
        Firm: ko.observable(true),
        Option: ko.observable(true),
        Blank: ko.observable(true),
        ValidLSOnly: ko.observable(true),
        ExtraItem: ko.observable("TQ")
    };

    model.IsProcessing = ko.observable(false);

    model.ParseParam = function () {
        return $.extend(model.getFilterValues(), ko.mapping.toJS(model.WaterfallFilter));
    };

    model.ProcessingWaterfall = ko.observable(false);
    model.ProcessingNewWaterfall = ko.observable(false);
    model.ProcessingCumulative = ko.observable(false);
    
    model.OPs = ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(BaseOP)));
    model.setButton = function (isEnabled) {
        $(".btn.btn-custom.btn-sm.btn-primary.do-filter").prop('disabled', isEnabled);
    }
    model.RefreshData = function (which) {
        var url = "@Url.Action("GetData")";
        var param = model.ParseParam();
        param.which = which;
        param.firmoption = "All";
        var x = model.WaterfallFilter;
        if (x.Firm() && x.Option() && x.Blank()) {
            param.firmoption = "All";
        } else if (x.Firm()) {
            if (x.Option()) {
                //firm and option
                param.firmoption = "Both";
            } else if (x.Blank()) {
                //firm and blank
                param.firmoption = "NotOption"
            } else {
                //only firm
                param.firmoption = "Firm";
            }
        } else if (x.Option()) {
            if (x.Blank()) {
                //option and blank
                param.firmoption = "NotFirm";
            } else {
                //only option
                param.firmoption = "Option";
            }
        } else if (x.Blank()) {
            //only blank
            param.firmoption = "NotBoth";
        } else {
            //not checked all
            param.firmoption = "notall";
        }

        model["Processing" + which](true);
        ajaxPost(url, param, function (res) {
            if (res.Result != "OK") {
                alert(res.Message);
                model["Processing" + which](false);
                return;
            }

            model["Processing" + which](false); 
            if (which == "Waterfall") {
                model.GenerateWaterfall(res.Data.Waterfall);
                model.GenerateWaterfallByRealized(res.Data.WaterfallRealized);
                model.GenerateWaterfallGrid(res.Data.WaterfallGrid);
                
            } else {
                var dataGrid = res.Data.CumulativeGrid.Data;
                model.GenerateCumulative("cost", dataGrid, res.Data.CumulativeGrid.Columns.Cost);
                model.GenerateCumulative("le-cost", dataGrid, res.Data.CumulativeGrid.Columns.LECost);
                model.GenerateCumulative("days", dataGrid, res.Data.CumulativeGrid.Columns.Days);
                model.GenerateCumulative("le-days", dataGrid, res.Data.CumulativeGrid.Columns.LEDays);

                var dataChart = res.Data.CumulativeChart.Data;

                model.ReconfigureCumulativeYearSelection(res.Data.CumulativeChart.AllocationYears);
                model.GenerateCumulativeChart("Cost", dataChart);
                model.GenerateCumulativeChart("Days", dataChart);
                model.setButton(false);
            }
            
            setOPFilter();
        });

    };

    function setOPFilter() {
        
        $('[data-model="OPWaterfall"]').kendoDropDownList({
            dataSource: model.OPs(),
            value: model.WaterfallFilter.BaseOP()
        });
    }

    function TrimIfGreaterThan(string, length) {
        var code = "";
        var addNbsp = function (howMany) {
            var res = "";
            for (var i = 0; i < howMany; i++) res += "&nbsp;";
            return res;
        };

        if (string.indexOf("(P)") > -1) {
            code = "(P)";
        } else if (string.indexOf("(E)") > -1) {
            code = "(E)";
        }

        if (string.length > length) {
            string = string.replace(code, "").substring(0, length - 4) + code + "...";
        }

        return string;
    }

    model.MultiString = function (raw, data) {
        var parsedString = raw.toString().
            replace(/^[^\/]+\/\*!?/, '').
            replace(/\*\/[^\/]+$/, '');

        for (var each in data) {
            if (data.hasOwnProperty(each)) {
                parsedString = parsedString.replace(new RegExp("{" + each + "}", "g"), each[data]);
            }
        }

        return parsedString;
    }

    model.reloadData = function () {
        model.setButton(true);
        model.RefreshData("Waterfall");
        model.RefreshData("Cumulative");
        model.NewGenerateWaterfallByRealized();
        
    }

    $(function () {

        model.reloadData();
        $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
            var id = $(e.target).attr("href");           
            $(id).find(".k-grid:not(.refreshed)").each(function (i, e) {
                
                $(e).data("kendoGrid").dataSource.fetch();
                $(e).addClass("refreshed");
                var find = $(id).find(".k-grid").children(".k-pager-wrap.k-grid-pager.k-widget").find(".k-pager-info");
                if (find.length > 0)
                    find.remove();
                $('<span class="k-pager-info k-label total-rows">Total &nbsp; ' + $(e).data("kendoGrid").dataSource.total() + ' items</span>').insertAfter($(id).find(".k-grid").children(".k-pager-wrap.k-grid-pager.k-widget").children(".k-link.k-pager-nav.k-pager-last"));

            });
        });
    });
</script>

<div data-bind="style: { visibility: (!model.IsProcessing() ? 'visible' : 'hidden'), height: (!model.IsProcessing() ? '' : '0px'), overflow: (!model.IsProcessing() ? '' : 'hidden') }">
    <div class="col-md-12" style="text-align:center;margin-bottom:20px">
        <i>
            <span class="btn-sm btn-success" data-bind="text: model.LastUpdateLs()"></span>
        </i>
        <br />
    </div>
    <ul class="nav nav-tabs" style="margin-top:10px;">
        <li class="active" onclick="setOPFilter()"><a href="#tab1" data-toggle="tab">Waterfall (By Opportunity & Risk)</a></li>
        <li onclick="setOPFilter()"> <a href="#tab2" data-toggle="tab">Waterfall (By Realised & Unrealised)</a></li>
        <li onclick="setOPFilter()"><a href="#tab3" data-toggle="tab">Waterfall Data</a></li>
        <li onclick="setOPFilter()"><a href="#tab4" data-toggle="tab">Cumulative</a></li>
        <li onclick="setOPFilter()"><a href="#tab5" data-toggle="tab">Cumulative Data Cost</a></li>
        <li onclick="setOPFilter()"><a href="#tab6" data-toggle="tab">Cumulative Data Days</a></li>
        <li onclick="setOPFilter()" style="display:none;"> <a href="#tab7" data-toggle="tab" data-bind="">New Waterfall (By Realised & Unrealised)</a></li>
    </ul>

    <div class="tab-content">
        <div class="tab-pane active" id="tab1">
            <div data-bind="visible: !model.ProcessingWaterfall()">
                @Html.Partial("Tab1Waterfall")
            </div>
            <div data-bind="visible: model.ProcessingWaterfall()">
                @Html.Partial("_processing")
            </div>
        </div>
        <div class="tab-pane" id="tab2">
            <div data-bind="visible: !model.ProcessingWaterfall()">
                @*@Html.Partial("_WaterfallByRealizeReplace")*@
                @Html.Partial("Tab2WaterfallByRealized")
            </div>
            <div data-bind="visible: model.ProcessingWaterfall()">
                @Html.Partial("_processing")
            </div>
        </div>
        <div class="tab-pane" id="tab3">
            <div data-bind="visible: !model.ProcessingWaterfall()">
                @Html.Partial("Tab3WaterfallData")
            </div>
            <div data-bind="visible: model.ProcessingWaterfall()">
                @Html.Partial("_processing")
            </div>
        </div>
        <div class="tab-pane" id="tab4">
            <div data-bind="visible: !model.ProcessingCumulative()">
                @Html.Partial("Tab4Cumulative")
            </div>
            <div data-bind="visible: model.ProcessingCumulative()">
                @Html.Partial("_processing")
            </div>
        </div>
        <div class="tab-pane" id="tab5">
            <div data-bind="visible: !model.ProcessingCumulative()">
                @Html.Partial("Tab5CumulativeCost")
            </div>
            <div data-bind="visible: model.ProcessingCumulative()">
                @Html.Partial("_processing")
            </div>
        </div>
        <div class="tab-pane" id="tab6">
            <div data-bind="visible: !model.ProcessingCumulative()">
                @Html.Partial("Tab6CumulativeDays")
            </div>
            <div data-bind="visible: model.ProcessingCumulative()">
                @Html.Partial("_processing")
            </div>
        </div>
        <div class="tab-pane" id="tab7" data-bind="" style="display:none;">
            <div data-bind="visible: !model.ProcessingNewWaterfall()">
                @Html.Partial("_WaterfallByRealizeReplace")
            </div>
            <div data-bind="visible: model.ProcessingNewWaterfall()">
                @Html.Partial("_processing")
            </div>
        </div>
    </div>
</div>

<style>
    .bordered-mini-nav {
        padding: 10px 0px 6px;
        border-bottom: 1px solid rgb(224, 224, 224);
        margin-bottom: 10px !important;
    }

    .bordered-mini-nav .each-nav {
        float: left;
        border-right: 1px solid rgb(236, 236, 236);
        padding-right: 3px;
        margin-right: 5px;
    }

    .bordered-mini-nav .each-nav.checkbox-nav {
        padding-right: 5px;
    }

    .bordered-mini-nav .each-nav.checkbox-nav div {
        float: left;
    }

    .bordered-mini-nav .each-nav.checkbox-nav input {
        margin: 1px 3px 1px 2px;
    }

    .bordered-mini-nav .each-nav.no-border-nav {
        border-right: none !important;
        margin-right: 0px !important;
        padding-right: 0px !important;
    }

    .nav-filter-space {
        margin-right: 3px;
        border-left: 1px solid rgb(236, 236, 236);
    }

    .grid h6 {
        text-align: center;
        font-weight: bold;
        font-size: 14px;
    }

    .grid .grid-cost, .grid .grid-day {
        margin-bottom: 30px;
    }

    .grid .k-header.k-grid-toolbar {
        background-color: #F9F9FB;
    }

    .grid .k-header.k-grid-toolbar .k-button {
        background-color: #f4b350;
        border-color: #E2A952;
    }

    .grid .k-header[role=columnheader] {
        vertical-align: middle;
    }

    .grid .k-header[role=columnheader][data-colspan] {
        text-align: center;
        font-weight: bold;
        color: #a8a8a8;
    }

    .grid .k-header[role=columnheader]:nth-child(n+2) {
        text-align: center;
    }

    .tab-content h4 {
        display: none;
    }
    .grid-cumulative-days > .k-pager-wrap.k-grid-pager.k-widget > .k-link.k-pager-nav,
    .grid-cumulative-days > .k-pager-wrap.k-grid-pager.k-widget > .k-pager-numbers,
    .grid-cumulative-cost > .k-pager-wrap.k-grid-pager.k-widget > .k-link.k-pager-nav,
    .grid-cumulative-cost > .k-pager-wrap.k-grid-pager.k-widget > .k-pager-numbers,
    .grid-cumulative-le-days > .k-pager-wrap.k-grid-pager.k-widget > .k-link.k-pager-nav,
    .grid-cumulative-le-days > .k-pager-wrap.k-grid-pager.k-widget > .k-pager-numbers,
    .grid-cumulative-le-cost > .k-pager-wrap.k-grid-pager.k-widget > .k-link.k-pager-nav,
    .grid-cumulative-le-cost > .k-pager-wrap.k-grid-pager.k-widget > .k-pager-numbers,
    .grid-waterfall-data > .k-pager-wrap.k-grid-pager.k-widget > .k-link.k-pager-nav,
    .grid-waterfall-data > .k-pager-wrap.k-grid-pager.k-widget > .k-pager-numbers {
        display: none;
    } 

</style>

<script>
    
    
    $(document).ready(function () {
        setTimeout(function() {
            model.WaterfallFilter.BaseOP(model.OpValue()[0]);
        }, 100);
        setOPFilter();
        
    });

    function GenerateConfigChart() {
        var title = "Waterfall Chart - By ";// + model.WaterfallStacked.ShowBy();
        //var configMeta = model.WaterfallStacked.ConfigMeta(); //model.WaterfallStacked.GenerateChartConfigMeta();
        var config = {
            title: title,
            chartArea: {
                background: "",
                height: 400
            },
            seriesDefaults: {
                type: "column",
                stack: true,
                overlay: {
                    gradient: "none"
                },
                border: {
                    opacity: 0
                }
            },
            legend: { visible: false, position: "top"},
            valueAxis: {
                labels: { font: "10x verdana", format: "N2" },
                majorGridLines: { visible: false },
                //max: 0
            },
            categoryAxis: {
                categories: [],//configMeta.categories,
                labels: { font: "10x verdana", rotation: 45 },
                majorGridLines: { visible: false }
            },
            series: []//configMeta.series
        };
        return config;
    }
    var aa;
    var bb;
    
</script>