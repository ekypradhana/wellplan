@using Newtonsoft.Json
@using ECIS.Core
@using ECIS.Client.WEIS

<script>
    model.allocation = ko.observable({
        isProcessing: ko.observable(false),
        idea: ko.observable(""),
        ElementId: ko.observable(),
        dpi: ko.observable(),
        dpr: ko.observable(),
        cpi: ko.observable(),
        cpr: ko.observable(),
        led: ko.observable(),
        lec: ko.observable(),
        dpi_total: ko.observable(),
        dpr_total: ko.observable(),
        cpi_total: ko.observable(),
        cpr_total: ko.observable(),
        led_total: ko.observable(),
        lec_total: ko.observable(),
        dpi_diff: ko.observable(),
        dpr_diff: ko.observable(),
        cpi_diff: ko.observable(),
        cpr_diff: ko.observable(),
        led_diff: ko.observable(),
        lec_diff: ko.observable(),
        monthdiff: ko.observable(),
        PeriodStart: ko.observable(),
        PeriodFinish: ko.observable(),
        DataReset: ko.observable(""),
        DataChanged: ({
            dpi: ko.observable(false),
            dpr: ko.observable(false),
            cpi: ko.observable(false),
            cpr: ko.observable(false),
            LEDays: ko.observable(false),
            LECost: ko.observable(false),
        }),
        DataOri: ({
            dpi: ko.observableArray([]),
            dpr: ko.observableArray([]),
            cpi: ko.observableArray([]),
            cpr: ko.observableArray([]),
            LEDays: ko.observableArray([]),
            LECost: ko.observableArray([])
        }),
        Class: ko.observable(),
        Theme: ko.observable(),
        Period: ko.observable(),
        Realised: ko.observable(),
        CurrentLoE: ko.observable(),
        OlderLoE: ko.observableArray([]),
        PICs: ko.observableArray([]),

        addPIC : function () {
            model.allocation().PICs.push(ko.mapping.fromJS(@MvcTools.Obj2HtmlStr(new WEISPersonInfo())));
        },
        removePIC : function (d) {
            console.log(d);
            model.allocation().PICs.remove(d);
        },
        getOlderAllocationData: function (d) {
            var x = model.allocation();
            $("#tableAllocationBody").html("");
            if (d.Level == x.CurrentLoE()) {
                // current LoE
                build_current_allocation(x.ElementId(), x.idea(), x.PeriodStart(), x.PeriodFinish(), x.dpi(), x.dpr(), x.cpi(), x.cpr(), x.led(), x.lec());
            } else {
                // historical
                model.allocation().isProcessing(true);
                var trAppend = "";
                ajaxPost("@Url.Action("GetOlderDataAllocation")", { PIPId: model.uimodel().selectedPIPId(), ElementId: model.allocation().ElementId(), LoE: d.Level },
                    function (data) {
                        if (data.Success == true) {
                            //var diff = data.monthDiff;
                            var diff = data.Data.length;
                            x.monthdiff(diff);

                            //var DPI = (DaysPlanImprovement / diff).toFixed(3);
                            //var DPR = (DaysPlanRisk / diff).toFixed(3);
                            //var CPI = (CostPlanImprovement / diff).toFixed(3);
                            //var CPR = (CostPlanRisk / diff).toFixed(3);

                            model.allocation().isProcessing(false);
                            dataAllocation = data.Data;

                            trAppend = generate_table_allocation(dataAllocation,"history");

                        }

                        //x.dpi_diff(asFloat(x.dpi() - x.dpi_total()));
                        //x.dpr_diff(asFloat(x.dpr() - x.dpr_total()));
                        //x.cpi_diff(asFloat(x.cpi() - x.cpi_total()));
                        //x.cpr_diff(asFloat(x.cpr() - x.cpr_total()));
                        //x.led_diff(asFloat(x.led() - x.led_total()));
                        //x.lec_diff(asFloat(x.lec() - x.lec_total()));

                        x.DataReset(trAppend);
                        $("#tableAllocationBody").html(trAppend);

                    });
            }
            //alert("ok");
            console.log(d);
        }

    });

    function asFloat(number, floatingPoint) {
        floatingPoint = (typeof floatingPoint === "undefined" ? 2 : floatingPoint);
        return kendo.format("{0:N" + floatingPoint + "}", number);
    }

    function buildFieldAllocation(trAppend, name, i, value, type) {
        var x = model.uimodel();
        if (type == "current") {
            if (name.indexOf("le") > -1) {
                if (!x.isWAUExist()) {
                    return (trAppend + "<td><input disabled='disabled' style='width:70px;text-align:right' id='" + name + "_" + i + "' value='" + asFloat(value) + "'></td>");
                } else {
                    return (trAppend + "<td><input type='number' step='any' onkeyup='count_total(\"" + name + "\"," + i + ")' onchange='count_total(\"" + name + "\"," + i + ")' style='width:70px;text-align:right' id='" + name + "_" + i + "' value='" + asFloat(value) + "'></td>");
                }
            } else {
                return (trAppend + "<td><input type='number' step='any' onkeyup='count_total(\"" + name + "\"," + i + ")' onchange='count_total(\"" + name + "\"," + i + ")' style='width:70px;text-align:right' id='" + name + "_" + i + "' value='" + asFloat(value) + "'></td>");
            }
        } else {
            return (trAppend + "<td><input disabled='disabled' style='width:70px;text-align:right' id='" + name + "_" + i + "' value='" + asFloat(value) + "'></td>");
        }
    }



    model.uimodel().openAllocationModal = function (ElementId, idea, PeriodStart, PeriodFinish, DaysPlanImprovement, DaysPlanRisk, CostPlanImprovement, CostPlanRisk, LEDays, LECost) {

        model.uimodel().selectedElementId(ElementId);
        var x = model.allocation();

        var singleDataElement = _.where(model.uimodel().PIPElementDatas().Elements, { ElementId: ElementId });
        x.Class(singleDataElement[0].Classification);
        x.Theme(singleDataElement[0].Theme);
        x.Period(jsonDateStr(singleDataElement[0].Period.Start) + " -- " + jsonDateStr(singleDataElement[0].Period.Finish));
        x.Realised(singleDataElement[0].Realized == true ? "Realised" : "Not Yet Realised");
        x.CurrentLoE(singleDataElement[0].LevelOfEstimate);
        x.PICs([]);
        var dataGetPIC = { PIPId: model.uimodel().selectedPIPId(), ElementId: ElementId };
        ajaxPost("@Url.Action("GetActionParty")", dataGetPIC,
        function (data) {
            if (data.Success == true) {
                //console.log(data);
                if (data.Data != null) {
                    if (data.Data.ActionParties != null) {
                        for (var i = 0; i < data.Data.ActionParties.length; i++) {
                            x.PICs.push(data.Data.ActionParties[i]);
                        }
                    }
                }
            } else {
                console.log("Error getting Action Parties");
            }
        });

        $("#myModal").modal('show');

        build_current_allocation(ElementId, idea, PeriodStart, PeriodFinish, DaysPlanImprovement, DaysPlanRisk, CostPlanImprovement, CostPlanRisk, LEDays, LECost);



    };

    function build_current_allocation(ElementId, idea, PeriodStart, PeriodFinish, DaysPlanImprovement, DaysPlanRisk, CostPlanImprovement, CostPlanRisk, LEDays, LECost) {
        var x = model.allocation();
        x.isProcessing(true);

        x.DataChanged.dpi(false);
        x.DataChanged.dpr(false);
        x.DataChanged.cpi(false);
        x.DataChanged.cpr(false);
        x.DataChanged.LEDays(false);
        x.DataChanged.LECost(false);
        x.DataOri.dpi([]);
        x.DataOri.dpr([]);
        x.DataOri.cpi([]);
        x.DataOri.cpr([]);
        x.DataOri.LEDays([]);
        x.DataOri.LECost([]);

        x.idea(idea);
        x.ElementId(ElementId);
        x.PeriodStart(PeriodStart);
        x.PeriodFinish(PeriodFinish);

        x.dpi(asFloat(DaysPlanImprovement));
        x.dpr(asFloat(DaysPlanRisk));
        x.cpi(asFloat(CostPlanImprovement));
        x.cpr(asFloat(CostPlanRisk));
        x.led(asFloat(LEDays));
        x.lec(asFloat(LECost));

        x.dpi_total(0.0);
        x.dpr_total(0.0);
        x.cpi_total(0.0);
        x.cpr_total(0.0);
        x.led_total(0.0);
        x.lec_total(0.0);

        var PIPId = model.uimodel().selectedPIPId();
        var data = [];
        var trAppend = "";

        ajaxPost("@Url.Action("GetDataAllocation")", { PIPId: PIPId, ElementId: ElementId },
            function (data) {
              if (data.Success == true) {
                //var diff = data.monthDiff;
                  var diff = data.Data.length;
                  x.monthdiff(diff);

                var DPI = (DaysPlanImprovement / diff).toFixed(3);
                var DPR = (DaysPlanRisk / diff).toFixed(3);
                var CPI = (CostPlanImprovement / diff).toFixed(3);
                var CPR = (CostPlanRisk / diff).toFixed(3);

                model.allocation().isProcessing(false);
                dataAllocation = data.Data;

                var trAppend = generate_table_allocation(dataAllocation,"current");

                var olderLoe = data.DataLoEs;
                x.OlderLoE([]);
                var aa = [];
                for (var i = 0; i < olderLoe.length; i++) {
                    //if(olderLoe[i].LevelOfEstimate != x.CurrentLoE())
                    aa.push({Level:olderLoe[i].LevelOfEstimate,Date:jsonDateStr(olderLoe[i].LastUpdate)});
                }
                x.OlderLoE(aa);

            }

            x.dpi_diff(asFloat(x.dpi() - x.dpi_total()));
            x.dpr_diff(asFloat(x.dpr() - x.dpr_total()));
            x.cpi_diff(asFloat(x.cpi() - x.cpi_total()));
            x.cpr_diff(asFloat(x.cpr() - x.cpr_total()));
            x.led_diff(asFloat(x.led() - x.led_total()));
            x.lec_diff(asFloat(x.lec() - x.lec_total()));

            x.DataReset(trAppend);
            $("#tableAllocationBody").html(trAppend);

        });
    }

    function generate_table_allocation(dataAllocation, type) {
        var x = model.allocation();
        var eachTotal = {
            dpi: 0.0,
            dpr: 0.0,
            cpi: 0.0,
            cpr: 0.0,
            led: 0.0,
            lec: 0.0
        };

        var trAppend = "";

        var i = 1;
        for (var da = 0; da < dataAllocation.length; da++) {
            month = jsonDate(dataAllocation[da].Period);

            trAppend = trAppend + "<tr>";
            trAppend = trAppend + "<td style='text-align:left;'>" + kf("{0:MMMM yyyy}", month) + "</td>";

            var each = {
                dpi: dataAllocation[da].DaysPlanImprovement,
                dpr: dataAllocation[da].DaysPlanRisk,
                cpi: dataAllocation[da].CostPlanImprovement,
                cpr: dataAllocation[da].CostPlanRisk,
                led: dataAllocation[da].LEDays,
                lec: dataAllocation[da].LECost,
            };

            x.DataOri.dpi().push(each.dpi);
            x.DataOri.dpr().push(each.dpr);
            x.DataOri.cpi().push(each.cpi);
            x.DataOri.cpr().push(each.cpr);
            x.DataOri.LEDays().push(each.led);
            x.DataOri.LECost().push(each.lec);

            trAppend = buildFieldAllocation(trAppend, "dpi", i, each.dpi, type);
            trAppend = buildFieldAllocation(trAppend, "dpr", i, each.dpr,type);
            trAppend = buildFieldAllocation(trAppend, "cpi", i, each.cpi, type);
            trAppend = buildFieldAllocation(trAppend, "cpr", i, each.cpr, type);
            trAppend = buildFieldAllocation(trAppend, "led", i, each.led, type);
            trAppend = buildFieldAllocation(trAppend, "lec", i, each.lec, type);

            eachTotal.dpi = eachTotal.dpi + each.dpi;
            eachTotal.dpr = eachTotal.dpr + each.dpr;
            eachTotal.cpi = eachTotal.cpi + each.cpi;
            eachTotal.cpr = eachTotal.cpr + each.cpr;
            eachTotal.led = eachTotal.led + each.led;
            eachTotal.lec = eachTotal.lec + each.lec;

            trAppend = trAppend + "</tr>";
            i++;
        }

        x.dpi_total(asFloat(eachTotal.dpi));
        x.dpr_total(asFloat(eachTotal.dpr));
        x.cpi_total(asFloat(eachTotal.cpi));
        x.cpr_total(asFloat(eachTotal.cpr));
        x.led_total(asFloat(eachTotal.led));
        x.lec_total(asFloat(eachTotal.lec));

        return trAppend;
    }

    function count_total(type, id) {
        var x = model.allocation();
        //alert(type + " - " + id + " | Monthdiff = " + x.monthdiff());
        var total = 0;
        //console.log(x.monthdiff());
        for (var i = 1; i <= x.monthdiff() ; i++) {
            var a = parseFloat($("#" + type + "_" + i).val());
            //if(!isNaN(a))
            total = (total + a);
        }


        switch (type) {
            case "dpi":
                x.dpi_total(asFloat(total));
                x.dpi_diff(count_diff(x.dpi(), total));
                x.DataChanged.dpi(true);
                break;
            case "dpr":
                x.dpr_total(asFloat(total));
                x.dpr_diff(count_diff(x.dpr(), total));
                x.DataChanged.dpr(true);
                break;
            case "cpi":
                x.cpi_total(asFloat(total));
                x.cpi_diff(count_diff(x.cpi(), total));
                x.DataChanged.cpi(true);
                break;
            case "cpr":
                x.cpr_total(asFloat(total));
                x.cpr_diff(count_diff(x.cpr(), total));
                x.DataChanged.cpr(true);
                break;
            case "led":
                x.led_total(asFloat(total));
                x.led_diff(count_diff(x.led(), total));
                x.DataChanged.LEDays(true);
                break;
            case "lec":
                x.lec_total(asFloat(total));
                x.lec_diff(count_diff(x.lec(), total));
                x.DataChanged.LECost(true);
                break;
        }
    }

    function count_diff(ori,total) {
        var diff = ori - total;
        if ( (diff >= -0.005) && (diff <= 0.005) ) diff = 0;
        return asFloat(diff);
    }

    function savePIC() {
        var x = model.uimodel();
        var y = model.allocation();
        var ElementId = x.selectedElementId();
        //console.log(ElementId);
        var datas = {
            PIPId: x.selectedPIPId(),
            ElementId: ElementId,
            ActionParties: ko.mapping.toJS(y.PICs())
        };
        //console.log(datas);
        var ActionParties = ko.mapping.toJS(y.PICs());

        //model.uimodel().processingActionParty(true);
        ajaxPost("@Url.Action("SaveActionParty")", datas,
        function (data) {
            if (data.Success == true) {
                model.uimodel().processing(false);
                $("#myModal").modal('hide');
                $("#myModal").modal('hide');
                $("#myModal").modal('hide');
                $("#myModal").modal('hide');
                $("#myModal").modal('hide');
                $("#myModal").modal('hide');
            } else {
                alert(data.Message);
            }
        });
    }

    function SaveAllocation() {
        var x = model.allocation();
        if ((x.dpi_diff() == 0) && (x.dpr_diff() == 0) && (x.cpi_diff() == 0) && (x.cpr_diff() == 0)) {

            var start = moment(jsonDateStr(x.PeriodStart()), 'DD-MMM-YYYY').add(-1, "months");
            //alert(start);
            //var diff = moment(x.PeriodFinish()).diff(moment(x.PeriodStart()), 'months') + 2;
            var diff = x.monthdiff();
            var dataAllocation = [];
            var trAppend = "";
            //alert(diff);
            for (var i = 1; i <= diff; i++) {
                month = start.add(1, "months");
                //alert(month.format("MMMM YYYY"));
                var dataAll = {
                    Period: month.toDate().toUTCString(),
                    DaysPlanImprovement: x.DataChanged.dpi() ? $("#dpi_" + i).val() : x.DataOri.dpi()[i - 1],
                    DaysPlanRisk: x.DataChanged.dpr() ? $("#dpr_" + i).val() : x.DataOri.dpr()[i - 1],
                    CostPlanImprovement: x.DataChanged.cpi() ? $("#cpi_" + i).val() : x.DataOri.cpi()[i - 1],
                    CostPlanRisk: x.DataChanged.cpr() ? $("#cpr_" + i).val() : x.DataOri.cpr()[i - 1],
                    LEDays: x.DataChanged.LEDays() ? $("#led_" + i).val() : x.DataOri.LEDays()[i - 1],
                    LECost: x.DataChanged.LECost() ? $("#lec_" + i).val() : x.DataOri.LECost()[i - 1]
                    //LEDays: $("#led_" + i).val(),
                    //LECost: $("#lec_" + i).val()
                };
                dataAllocation.push(dataAll);
                //console.log(dataAll);
            }
            var data = { PIPId: model.uimodel().selectedPIPId(), ElementId: x.ElementId() };
            data.Allocation = dataAllocation;

            //console.log(data);

            model.uimodel().processing(true);

            ajaxPost("@Url.Action("SaveAllocation")", data,
            function (dataServer) {
                //console.log(dataServer);
                if (dataServer.Success == true) {
                    savePIC();
                } else {
                    alert(dataServer.Message);
                }
            });


        } else {
            alert("Edited data doesn't match with allocation!");
            return;
        }
    }

    function ResetData() {

        var x = model.allocation();

        $("#tableAllocationBody").html("");
        $("#tableAllocationBody").html(x.DataReset());
        x.dpi_diff(0);
        x.dpr_diff(0);
        x.cpi_diff(0);
        x.cpr_diff(0);
        x.led_diff(0);
        x.lec_diff(0);

        x.dpi_total(x.dpi());
        x.dpr_total(x.dpr());
        x.cpi_total(x.cpi());
        x.cpr_total(x.cpr());
        x.led_total(x.led());
        x.lec_total(x.lec());
    }

    function ResetAllocation() {
        var x = model.allocation();
        var data = { PIPId: model.uimodel().selectedPIPId(), ElementId: x.ElementId() };
        x.isProcessing(true);
        ajaxPost("@Url.Action("ResetSingleAllocation")", data,
        function (d) {
            build_current_allocation(x.ElementId(), x.idea(), x.PeriodStart(), x.PeriodFinish(), x.dpi(), x.dpr(), x.cpi(), x.cpr(), x.led(), x.lec());
        });

        
        @*$("#myModal").modal('hide');
        model.uimodel().processing(true);
        var x = model.allocation();
        var ElementId = x.ElementId();
        var PIPId = model.uimodel().selectedPIPId();

        var idea = x.idea();
        var PeriodStart = x.PeriodStart();
        var PeriodFinish = x.PeriodFinish();
        var DaysPlanImprovement = x.dpi();
        var DaysPlanRisk = x.dpr();
        var CostPlanImprovement = x.cpi();
        var CostPlanRisk = x.cpr();
        var LEDays = x.led();
        var LECost = x.lec();

        var data = { PIPId: PIPId, ElementId: ElementId };

        ajaxPost("@Url.Action("ResetSingleAllocation")", data,
        function (d) {
            setTimeout(function () {
                model.uimodel().openAllocationModal(ElementId, idea, PeriodStart, PeriodFinish, DaysPlanImprovement, DaysPlanRisk, CostPlanImprovement, CostPlanRisk, LEDays, LECost);
            }, 500);

        });*@

    }


</script>
<style>
    .zeropad{
        padding-left:0;
    }
</style>
<!-- Modal Allocation -->
<div class="modal fade myModal" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog" style="width:90%;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title" id="myModalLabel" data-bind="text:model.allocation().idea"></h4>
            </div>
            <div class="modal-body">
                @*<div style="margin-bottom:20px;display:none;" id="gridAllocation" data-bind="kendoGrid:{data:[],columns:gridColumnsAllocation,pageable:false,sortable:true,filterable:true,editable:true}"></div>*@
                <div data-bind="visible:model.uimodel().processing()==true">
                    @Html.Partial("_processing")
                </div>
                <div data-bind="visible:!model.uimodel().processing()==true" class="row">
                    <div class="col-md-12">
                        <div data-bind="with:model.allocation" class="col-md-4" style="border:1px solid #ccc;padding-top:5px;padding-bottom:5px;font-size:14px;">
                            <div class="col-md-4 zeropad">
                                <label>Class : </label>
                            </div>
                            <div class="col-md-8 zeropad" data-bind="text:Class"></div>
                            <div class="clearfix"></div>
                            
                            <div class="col-md-4 zeropad">
                                <label>Theme : </label>
                            </div>
                            <div class="col-md-8 zeropad" data-bind="text:Theme"></div>
                            <div class="clearfix"></div>

                            <div class="col-md-4 zeropad">
                                <label>Period : </label>
                            </div>
                            <div class="col-md-8 zeropad" data-bind="text:Period"></div>
                            <div class="clearfix"></div>

                            <div class="col-md-4 zeropad">
                                <label>Realised : </label>
                            </div>
                            <div class="col-md-8 zeropad" data-bind="text:Realised"></div>
                            <div class="clearfix"></div>
                            <br /><br />
                            <div class="col-md-5 zeropad">
                                <label>Lv of Estimate : </label>
                            </div>
                            <div class="col-md-7 zeropad" data-bind="text:CurrentLoE"></div>
                            <div class="clearfix"></div>
                            <br /><br />
                            <!-- ko foreach: OlderLoE -->
                            <div class="col-md-5 zeropad">
                                <label>Lv of Estimate <span data-bind="text:Level"></span> : </label>
                            </div>
                            <div class="col-md-7 zeropad" style="color:blue;text-decoration:underline;cursor:pointer;" data-bind="text:Date,click:model.allocation().getOlderAllocationData"></div>
                            <div class="clearfix"></div>
                            <!-- /ko -->

                            <br /><br />

                            <strong>PIC</strong>
                            <ul data-bind="" id="ListPICs">
                                <!-- ko foreach:PICs -->
                                <li style="margin-bottom:10px;">
                                    <input type="text" data-bind="value:FullName" class="input-sm" />
                                    <button type="button" class="btn btn-danger btn-xs" data-bind="click:model.allocation().removePIC" title="Click to Delete">&nbsp;-&nbsp;</button>
                                </li>

                                <!-- /ko -->
                                @*<li><input type="text" class="input-sm addPIC" /></li>
                                <li><input type="text" class="input-sm addPIC" /></li>*@
                            </ul>
                            <div style="text-align:center">
                                <button class="btn btn-primary" onclick="model.allocation().addPIC()">Add PIC</button>
                            </div>
                        </div>
                        <div class="col-md-8" data-bind="visible:model.allocation().isProcessing()==true">
                            @Html.Partial("_processing")
                        </div>
                        <div class="col-md-8" data-bind="visible:model.allocation().isProcessing()==false">
                            <table id="tableAllocation" style="width:100%" border="1">
                                <thead>
                                    <tr>
                                        <th>Period</th>
                                        <th>Days Plan<br />Improvement<br />(Days)</th>
                                        <th>Days Plan<br />Risk<br />(Days)</th>
                                        <th>Cost Plan<br />Improvement<br />($ mln)</th>
                                        <th>Cost Plan<br />Risk<br />($ mln)</th>
                                        <th>LE Days<br />(Days)</th>
                                        <th>LE Cost<br />($ mln)</th>
                                    </tr>
                                </thead>
                                <tbody id="tableAllocationBody"></tbody>
                                <tfoot>
                                    <tr>
                                        <td>Total</td>
                                        <td data-bind="text:model.allocation().dpi_total"></td>
                                        <td data-bind="text:model.allocation().dpr_total"></td>
                                        <td data-bind="text:model.allocation().cpi_total"></td>
                                        <td data-bind="text:model.allocation().cpr_total"></td>
                                        <td data-bind="text:model.allocation().led_total"></td>
                                        <td data-bind="text:model.allocation().lec_total"></td>
                                    </tr>
                                    <tr>
                                        <td>Origin</td>
                                        <td data-bind="text:model.allocation().dpi"></td>
                                        <td data-bind="text:model.allocation().dpr"></td>
                                        <td data-bind="text:model.allocation().cpi"></td>
                                        <td data-bind="text:model.allocation().cpr"></td>
                                        <td data-bind="text:model.allocation().led"></td>
                                        <td data-bind="text:model.allocation().lec"></td>
                                    </tr>
                                    <tr>
                                        <td>Diff</td>
                                        <td data-bind="text:model.allocation().dpi_diff"></td>
                                        <td data-bind="text:model.allocation().dpr_diff"></td>
                                        <td data-bind="text:model.allocation().cpi_diff"></td>
                                        <td data-bind="text:model.allocation().cpr_diff"></td>
                                        <td data-bind="text:model.allocation().led_diff"></td>
                                        <td data-bind="text:model.allocation().lec_diff"></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-custom btn-sm btn-warning" data-dismiss="modal">
                    Close
                </button>
                <button type="button" class="btn btn-custom btn-sm btn-success" onclick="ResetAllocation();">
                    <span class="glyphicon glyphicon-refresh"></span> Reset
                </button>
                <button type="button" class="btn btn-custom btn-sm btn-primary" onclick="SaveAllocation();">
                    <span class="glyphicon glyphicon-ok"></span> Save changes 
                </button>
            </div>
        </div>
    </div>
</div>
<!-- End Allocation Modal -->
