@using ECIS.Client.WEIS
@using Newtonsoft.Json
@using ECIS.Core

<style>
    #grid_wrapper .k-header[role=columnheader] {
        vertical-align: middle;
        text-align: center;
    }

        #grid_wrapper .k-header[role=columnheader][data-colspan] {
            text-align: center;
            font-weight: bold; 
            color: #a8a8a8;
        }

    #grid_wrapper [role=rowgroup] [role=row]:nth-child(n+2) [role=columnheader] {
        text-align: center;
        vertical-align: middle;
    }

    #grid_wrapper .k-header[role=columnheader][data-title=Days] {
        vertical-align: top !important;
    }

    #form-wrapper div {
        padding-bottom: 3px;
    }

        #form-wrapper div label {
            line-height: 23px;
        }

    #form-wrapper .col-md-3, #form-wrapper .col-md-5 {
        padding: 0px;
    }

    #form-wrapper .col-md-5 {
        padding-left: 6px;
    }

    #form-wrapper .text, #form_new_phase .text {
        width: 100%;
        height: 27px;
        border: 1px solid rgb(239, 239, 239);
        background-color: rgb(249, 249, 249);
        padding: 0px 9px;
    }

    #form_new_phase .col-md-4 label {
        padding-right: 0px !important;
    }

    #form_new_phase .col-md-4 {
        text-align: right;
        padding-right: 0px;
        padding-top: 5px;
    }

    #form_new_phase .col-md-8 {
        padding-left: 6px !important;
    }

    .tab-content .form-group .row {
        margin-bottom: 4px;
    }

    .tab-content .form-group .text {
        width: 100%;
        padding: 3px 8px 2px !important;
        height: auto;
        border: 1px solid rgb(211, 211, 211);
    }

    .tab-content .form-group .col-md-3 {
        padding-top: 5px;
        padding-right: 0px !important;
    }

    .tab-content .form-group .col-md-5 {
        padding-left: 6px !important;
    }

    .form-control {
        font-size: 9pt;
    }

    .k-grid-content-locked {
        height: auto !important;
    }

    input[type='text'] {
        line-height: 20px;
    }
</style>

<script>
    model.isRO = ko.observable('@ViewBag.isRO');
    model.GetOpActive = function () {
        var url = "@Url.Action("GetBaseOPConfig", "BaseOPSetting")";
        ajaxPost(url, {}, function (data) {
            
            if (data.Data.BaseOPConfig != null) {
                xx = data.Data.BaseOPConfig.split('');
                xx.splice(2, 0, "-");
                model.OpActive(xx.join(""));
            }
        });
    };
    model.PhaseName = ko.observable('');
    model.PhasePhStart = ko.observable('');
    model.PhasePhFinish = ko.observable('');
    model.Activities = ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(DataHelper.Populate<WellActivity>("WEISWellActivities")
        .SelectMany(d => d.Phases).GroupBy(d => d.ActivityType).Select(d => d.Key).OrderBy(d => (d.Equals("n/a") ? "" : d)))));
</script>

<div class="col-md-12">
    <button class="btn btn-custom btn-warning btn-sm" onclick="changeMode('browser','');">
        <span class="glyphicon glyphicon-arrow-left"></span> Back to Browser
    </button>
    &nbsp;
    <button class="btn btn-custom btn-primary btn-sm" onclick="sendData();" data-bind="visible:!model.isRO()=='1'">
        <span class="glyphicon glyphicon-ok"></span> Save
    </button>
</div>

<div data-bind="visible: model.IsProcessing()">
    @Html.Partial("_processing")
</div>

<div class="col-md-12" style="margin-top:10px;" data-bind="style: { visibility: model.IsProcessing() ? 'hidden' : 'visible' }">
    <br />
         
            <div class="form-group col-md-6">
                <div class="row">
                    <label class="col-md-3">Rig Name:</label>
                    <div class="col-md-5">
                        <input data-bind="enable:!model.isRO()=='1',kendoDropDownList: { data: model.options.rigNames, value: model.SelectedActivity.RigName, optionLabel: 'Select Rig Name' }" style="width: 100%;" />
                    </div>
                </div>
                <div class="row">
                    <label class="col-md-3">Well Name:</label>
                    <div class="col-md-5">
                        <input data-bind="enable:!model.isRO()=='1',kendoDropDownList: { data: model.options.wellNames, value: model.SelectedActivity.WellName, optionLabel: 'Select Rig Name' }" style="width: 100%;" />
                        @*<input type="text" class="text" data-bind="value: model.SelectedActivity.WellName">*@
                    </div>
                </div>

                <div class="row">
                    <label class="col-md-3" data-bind="text:model.OpActive()+' Start:'"></label>
                    <div class="col-md-5">
                        <input style="width: 100%;" data-bind="enable:!model.isRO()=='1',kendoDatePicker: { format: 'dd-MMM-yyyy', value: model.SelectedActivity.PsSchedule.Start } ">
                    </div>
                </div>

                <div class="row">
                    <label class="col-md-3">Latest Sequence Start:</label>
                    <div class="col-md-5">
                        <input style="width: 100%;" data-bind="enable:!model.isRO()=='1',kendoDatePicker: { format: 'dd-MMM-yyyy', value: model.SelectedActivity.OpsSchedule.Start } ">
                    </div>
                </div>


            </div>

            <div class="form-group col-md-6">
                <div class="row">
                    <label class="col-md-3">Sequence No:</label>
                    <div class="col-md-5">
                        <input type="text" class="text" data-bind="enable:!model.isRO()=='1',value: model.SelectedActivity.UARigSequenceId, enable: false">
                    </div>
                </div>

                <div class="row">
                    <label class="col-md-3">Non OP</label>
                    <div class="col-md-5">
                        <input type="checkbox" data-bind="checked:model.SelectedActivity.NonOP" />
                    </div>
                </div>

                <div class="row">
                    <label class="col-md-3" data-bind="text:model.OpActive()+' Finish:'"></label>
                    <div class="col-md-5">
                        <input style="width: 100%;" data-bind="enable:!model.isRO()=='1',kendoDatePicker: { format: 'dd-MMM-yyyy', value: model.SelectedActivity.PsSchedule.Finish } ">
                    </div>
                </div>

                <div class="row">
                    <label class="col-md-3">Latest Sequence Finish:</label>
                    <div class="col-md-5">
                        <input style="width: 100%;" data-bind="enable:!model.isRO()=='1',kendoDatePicker: { format: 'dd-MMM-yyyy', value: model.SelectedActivity.OpsSchedule.Finish } ">
                    </div>
                </div>
            </div>
    <div style="clear:both;"></div>
    <h3>Activities</h3>

    @*<button class="btn btn-success btn-custom btn-sm" onclick="openModal();" data-bind="visible:!model.isRO()=='1'">
        <span class=" glyphicon glyphicon-plus">
        </span> Add Phase
    </button>*@

    <div style="clear: both;"></div>
    <div id="grid_wrapper" style="margin-top: 10px;"></div>
    <div style="clear:both;"></div>
    <div class="form-group col-md-12" style="margin-top:20px;text-align:center;">
        <div class="row">
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade myModal" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                        <h4 class="modal-title">New Phase</h4>
                    </div>
                    <div class="modal-body">
                        <form id="form_new_phase" class="k-content">
                            <div class="form-group">
                                <div class="col-md-4">
                                    <label style="text-align:right; font-weight:bold;" for="recipient-name" class="control-label">Phase Name:</label>
                                </div>
                                <div class="col-md-8">
                                    <input class="text" style="" placeholder="Select Activity Type ..."
                                           required data-required-msg="Insert Phase Name" name="PhaseName"
                                           data-bind="value: PhaseName" id="PhaseName" />
                                    <span class="k-invalid-msg" data-for="PhaseName"></span>
                                </div>
                            </div>
                            <div class="clearfix">&nbsp;</div>
                            <div class="form-group">
                                <div class="col-md-4">
                                    <label style="text-align:right; font-weight:bold;" class="control-label">Period Start:</label>
                                </div>
                                <div class="col-md-8">
                                    <input onblur="CalculateDaysOnPhase(this)" style="width: 200px;"
                                           required data-required-msg="Insert Period Finish" name="PhasePhStart"
                                           data-bind="kendoDatePicker: { format: 'dd-MMM-yyyy', value: model.PhasePhStart } " />
                                    <span class="k-invalid-msg" data-for="PhasePhStart"></span>
                                </div>
                            </div>
                            <div class="clearfix">&nbsp;</div>
                            <div class="form-group">
                                <div class="col-md-4">
                                    <label style="text-align:right; font-weight:bold;" class="control-label">Period Finish:</label>
                                </div>
                                <div class="col-md-8">
                                    <input onblur="CalculateDaysOnPhase(this)" style="width: 200px;"
                                           required data-required-msg="Insert Period Finish" name="PhasePhFinish"
                                           data-bind="kendoDatePicker: { format: 'dd-MMM-yyyy', value: model.PhasePhFinish } " />
                                    <span class="k-invalid-msg" data-for="PhasePhFinish"></span>
                                </div>
                            </div>
                            <div class="clearfix">&nbsp;</div>
                            <div class="form-group">
                                <div class="col-md-4">
                                    <label style="text-align:right; font-weight:bold;" class="control-label">Total days:</label>
                                </div>
                                <div class="col-md-2">
                                    <input class="text" type="text" readonly="readonly" id="DaysValueNewPhase">
                                </div>
                            </div>
                            <div class="clearfix">&nbsp;</div>
                            <div class="form-group">
                                <label class="col-md-4">Non Well Schedule:</label>
                                <div class="col-md-2">
                                    <input id="virtual" class="check" type="checkbox" />
                                </div>

                            </div>
                            <div class="clearfix">&nbsp;</div>
                            <div class="form-group">
                                <label class="col-md-4">Shift Future Event Date:</label>
                                <div class="col-md-2" style="position: relative">
                                    <input id="shift" class="check" type="checkbox" />
                                </div>

                            </div>
                            <div class="clearfix">&nbsp;</div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-custom btn-sm btn-shell" data-dismiss="modal">
                            Cancel
                        </button>
                        <button type="button" class="btn btn-custom btn-sm btn-primary" onclick="saveNewPhase();">
                            <span class="glyphicon glyphicon-ok"></span> Save
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>


</div>

<script>

    function openModal() {
        $("#myModal").modal('show');
        model.PhaseName('');
        model.PhasePhStart('');
        model.PhasePhFinish('');
        $("#PhaseName").kendoDropDownList({ dataSource: { data: model.Activities() } });
    }

    function jsonObjConvDate2(e, dateOrStr) {
        if (dateOrStr == undefined) dateOrStr = "date";
        var keys = getObjectProperties(e);
        keys.forEach(function (k) {
            if (typeof e[k] == "string" && e[k] != null && e[k] != undefined) {
                if (e[k].indexOf("/Date") >= 0) {
                    var dt = dateOrStr == "str" ? jsonDateStr(e[k]) : jsonDate(e[k]);
                    e[k] = dt;
                }
            }
            else if (typeof e[k] == "object") {
                e[k] = jsonObjConvDate2(e[k]);
            }
        });
        return e;
    }

    var isOnWeeklyReport = function (d) {
        return ((String(jsonDateStr(d)).length > 0) ? "1" : "0");
    }

    var generateEditor = function (dr) {
        var colx = "<span class='k-dirty'></span>"
        var checked = $(dr).is(':checked');
        var grid = $("#grid_wrapper").data("kendoGrid");
        var dataItem = grid.dataItem($(dr).closest('tr'));
        dataItem.VirtualPhase = checked;
        $(dr).parent().prepend(colx);
        dataItem.dirty = true;
    }

    function grid_phase(data) {
        var $grid = $("#grid_wrapper")
            .html("");
        var isAdmin = true;
        var source = new kendo.data.DataSource({
            pageSize: 5,
            data: data.Phases,
            schema: {
                model: {
                    id: "PhaseNo",
                    fields: {
                        "VirtualPhase": { type: "boolean", editable: true },
                        "LevelOfEstimate": { type: "string", editable: true },
                        "ActivityType": { type: "string", editable: false },
                        "ActivityDescEst": { type: "string", editable: false },
                        "PlanSchedule.Start": { type: "date", editable: true },
                        "PlanSchedule.Finish": { type: "date", editable: true },
                        "PhSchedule.Start": { type: "date", editable: true },
                        "PhSchedule.Finish": { type: "date", editable: true },
                        "PhSchedule.Days": { type: "number", editable: false },
                        "LESchedule.Start": { type: "date" },
                        "LESchedule.Finish": { type: "date" },
                        "LESchedule.Days": { type: "number", editable: false },
                        "Plan.Days": { type: "number" },
                        "Plan.Cost": { type: "number" },
                        "OP.Days": { type: "number", editable: false },
                        "OP.Cost": { type: "number" },
                        "AFE.Days": { type: "number", editable: isAdmin },
                        "AFE.Cost": { type: "number", editable: isAdmin },
                        "TQ.Cost": { type: "number", editable: isAdmin },
                        "TQ.Days": { type: "number", editable: isAdmin },
                        "Actual.Cost": { type: "number", editable: isAdmin },
                        "Actual.Days": { type: "number", editable: isAdmin },
                        "LE.Cost": { type: "number" },
                        "LE.Days": { type: "number" },
                        "LWE.Cost": { type: "number", editable: false },
                        "LWE.Days": { type: "number", editable: false },
                        "M1.Cost": { type: "number" },
                        "M1.Days": { type: "number" },
                        "M2.Cost": { type: "number" },
                        "M2.Days": { type: "number" },
                        "M3.Cost": { type: "number" },
                        "LastWeek": { type: "date", editable: false },
                        "M3.Days": { type: "number" },
                        "PhaseNo": { type: "number", editable: false },
                    }
                },
            },
            batch: true,
            change: onChangeValue
        });
        //alert(isRO);
        var columnPhases = [];
        var isRO = "@ViewBag.isRO";
        if (isRO != "1") {
            columnPhases.push(
                { title: "Del", field: 'PhaseNo', width: 50, locked: true, lockable: false, template: "<div style='text-align: center'><button onclick='delete_phase(\"#=PhaseNo#\")' class='btn btn-custom btn-danger btn-xs'><span class='glyphicon glyphicon-remove-circle'></span></button></div>" }

                );
        }

        columnPhases.push(
                { title: "Phase", field: "ActivityType", width: 230, locked: true, lockable: false, template: "<a style='cursor:pointer' onclick='changeMode(\"detail\",#=PhaseNo#)'>#= ActivityType #</a>" },
                //{
                //    title: "No well Schedule", field: 'VirtualPhase', width: 100, locked: true, lockable: false, editable: true,
                //    template: '<input onclick="generateEditor(this)" type="checkbox" #= VirtualPhase ? checked="checked" : "" # ></input>'
                //},
                {
                    title: "OP-14", columns: [
                      { title: "Level of<br/>Estimate", field: 'LevelOfEstimate', width: 50, template: "<div style='text-align: right'>#=LevelOfEstimate#</div>" },
                      {
                          title: "Start", field: 'PlanSchedule.Start', width: 90, locked: true, lockable: false, format: "{0:dd-MMM-yyyy}",
                          template: "#: jsonDateStr(PlanSchedule.Start) #", attributes: { style: "text-align: center;" }
                      },
                      {
                          title: "Finish", field: 'PlanSchedule.Finish', width: 90, locked: true, lockable: false, format: "{0:dd-MMM-yyyy}",
                          template: "#: jsonDateStr(PlanSchedule.Finish) #", attributes: { style: "text-align: center;" }
                      },
                      { title: "Days", field: 'Plan.Days', width: 70, template: "<div style='text-align: right'>#=kendo.toString(Plan.Days, 'N0')#</div>" },
                      { title: "Cost", field: 'Plan.Cost', width: 80, template: "<div style='text-align: right'>#=kendo.toString(Plan.Cost, 'N1')#</div>" },
                    ]
                },
                {
                    title: "Latest Sequence", columns: [
                      {
                          title: "Start", field: 'PhSchedule.Start', width: 90, locked: true, lockable: false,
                          format: "{0:dd-MMM-yyyy}", attributes: { style: "text-align: center;" }
                      },
                      {
                          title: "Finish", field: 'PhSchedule.Finish', width: 90, locked: true, lockable: false, format: "{0:dd-MMM-yyyy}",
                          template: "#: jsonDateStr(PhSchedule.Finish) #", attributes: { style: "text-align: center;" }
                      },
                      {
                          title: "Days", field: 'OP.Days', width: 60, locked: true, lockable: false, editable: false,
                          template: "<div style='text-align: center'>#=kendo.toString(OP.Days, 'N0')#</div>"
                      },
                      {
                          title: "Cost", field: 'OP.Cost', width: 80, locked: true, lockable: false,
                          template: "<div style='text-align: right'>#=kendo.toString(OP.Cost, 'N1')#</div>"
                      }
                    ]
                },
                {
                    title: "LE", columns: [
                      {
                          title: "Start", field: 'LESchedule.Start', width: 90, locked: true, lockable: false, editable: false, format: "{0:dd-MMM-yyyy}",
                          template: "#: jsonDateStr(LESchedule.Start) #", attributes: { style: "text-align: center;" }
                      },
                      {
                          title: "Finish", field: 'LESchedule.Finish', width: 90, locked: true, lockable: false, editable: false, format: "{0:dd-MMM-yyyy}",
                          template: "#: jsonDateStr(LESchedule.Finish) #", attributes: { style: "text-align: center;" }
                      },
                      { title: "Days", field: 'LE.Days', width: 50, template: "<div style='text-align: right'>#=kendo.toString(LE.Days, 'N0')#</div>", editable: false },
                      { title: "Cost", field: 'LE.Cost', width: 80, template: "<div style='text-align: right'>#=kendo.toString(LE.Cost, 'N1')#</div>", editable: false },
                    ]
                },
                {
                    title: "AFE", columns: [
                      { title: "Days", field: 'AFE.Days', width: 50, template: "<div style='text-align: right'>#=kendo.toString(AFE.Days, 'N0')#</div>" },
                      { title: "Cost", field: 'AFE.Cost', width: 80, template: "<div style='text-align: right'>#=kendo.toString(AFE.Cost, 'N1')#</div>" },
                    ]
                },
                {
                    title: "TQ/Agreed Target", columns: [
                      { title: "Days", field: 'TQ.Days', width: 50, template: "<div style='text-align: right'>#=kendo.toString(TQ.Days, 'N0')#</div>" },
                      { title: "Cost", field: 'TQ.Cost', width: 80, template: "<div style='text-align: right'>#=kendo.toString(TQ.Cost, 'N1')#</div>" },
                    ]
                },
                {
                    title: "Actual", columns: [
                      { title: "Days", field: 'Actual.Days', width: 50, template: "<div style='text-align: right'>#=kendo.toString(Actual.Days, 'N0')#</div>", editable: isAdmin },
                      { title: "Cost", field: 'Actual.Cost', width: 80, template: "<div style='text-align: right'>#=kendo.toString(Actual.Cost, 'N1')#</div>", editable: isAdmin },
                    ]
                },
                { title: "Weekly Report Date", field: 'LastWeek', width: 100, editable: false, template: "<div data-weekly-report='#= isOnWeeklyReport(LastWeek) #'>#= jsonDateStr(LastWeek) #</div>" },
                { title: "Phase No", field: 'PhaseNo', width: 80, template: "<div style='text-align: center'>#=kendo.toString(PhaseNo, 'N0')#</div>", editable: false }
               
        );
        $grid.kendoGrid({
            dataSource: source,
            pageable: {
                buttonCount: 10
            },
            navigatable: true,
            editable: false,
            sortable: true,
            filterable: false,
            columns: columnPhases,
            dataBound: function () {
                $("#grid_wrapper").find(".k-grid-content").find("[data-weekly-report=1]").each(function (i, e) {
                    $(e).closest("tr[data-uid]").find("td:gt(8):lt(4)").each(function (i, f) {
                        $(f).css("pointer-events", "none");
                    });
                });
            }
        });

        //$("#grid_wrapper").removeClass("k-widget");
    }
    function onChangeValue(e) {
        if (e.field == "LESchedule.Start" || e.field == "LESchedule.Finish") {
            var row = e.items[0];
            var lestart = row.LESchedule.Start;
            var lefinish = row.LESchedule.Finish;
            var ledays = row.LE.Days;

            if ((lefinish != "" && lefinish != null) && (lestart != "" && lestart != null)) {
                var diffInDays = (lefinish - lestart) / (24 * 60 * 60 * 1000);
                $("#grid_wrapper").find("tr[data-uid='" + row.uid + "']>td:eq(13)").find("div").html(diffInDays);
                row.LE.Days = diffInDays;
            } else {
                $("#grid_wrapper").find("tr[data-uid='" + row.uid + "']>td:eq(13)").find("div").html(0);
                row.LE.Days = 0;
            }
        }

        if (e.field == "LE.Days") {
            var row = e.items[0];
            var opstart = row.LESchedule.Start;
            var opfinish = row.LESchedule.Finish;
            var opplandays = row.LE.Days;

            if ((opfinish != "" && opfinish != null) && (opstart != "" && opstart != null)) {
                var newDateMomentFinish = moment(opstart).add(opplandays, 'days');
                opfinish = newDateMomentFinish.format("DD-MMM-YYYY");
                $("#grid_wrapper").find("tr[data-uid='" + row.uid + "']>td:eq(12)").html(opfinish);
                row.LESchedule.Finish = opfinish;
            } else {
                alert('Please select start or finish LE date');
            }
        }

        if (e.field == "PhSchedule.Start" || e.field == "PhSchedule.Finish") {
            var row = e.items[0];
            var phstart = row.PhSchedule.Start;
            var phfinish = row.PhSchedule.Finish;
            var opplandays = row.OP.Days;
            if ((phfinish != "" && phfinish != null) && (phstart != "" && phstart != null)) {
                var diffInDays = (phfinish - phstart) / (24 * 60 * 60 * 1000);
                $("#grid_wrapper").find("tr[data-uid='" + row.uid + "']>td:eq(9)").find("div").html(diffInDays);
                row.OP.Days = diffInDays;
            } else {
                $("#grid_wrapper").find("tr[data-uid='" + row.uid + "']>td:eq(9)").find("div").html(0);
                row.OP.Days = 0;
            }
        }

        if (e.field == "PlanSchedule.Start" || e.field == "PlanSchedule.Finish") {
            var row = e.items[0];
            var opstart = row.PlanSchedule.Start;
            var opfinish = row.PlanSchedule.Finish;
            var opplandays = row.Plan.Days;
            var a = { opstart: opstart, opfinish: opfinish, opplandays: opplandays };
            console.log(a);
            if ((opfinish != "" && opfinish != null) && (opstart != "" && opstart != null)) {
                var diffInDays = (opfinish - opstart) / (24 * 60 * 60 * 1000);
                $("#grid_wrapper").find("tr[data-uid='" + row.uid + "']>td:eq(5)").find("div").html(diffInDays);
                row.Plan.Days = diffInDays;
            } else {
                $("#grid_wrapper").find("tr[data-uid='" + row.uid + "']>td:eq(5)").find("div").html(0);
                row.Plan.Days = 0;
            }
        }

        if (e.field == "Plan.Days") {
            var row = e.items[0];
            var opstart = row.PlanSchedule.Start;
            var opfinish = row.PlanSchedule.Finish;
            var opplandays = row.Plan.Days;

            if ((opfinish != "" && opfinish != null) && (opstart != "" && opstart != null)) {
                var newDateMomentFinish = moment(opstart).add(opplandays, 'days');
                opfinish = newDateMomentFinish.format("DD-MMM-YYYY");
                $("#grid_wrapper").find("tr[data-uid='" + row.uid + "']>td:eq(4)").html(opfinish);
                row.PlanSchedule.Finish = opfinish;
            } else {
                var alert = "Please select start or finish " + model.OpActive() + " date";
                alert(alert);
            }
        }

    }
    function delete_phase(PhaseNo) {
        if (confirm("Are you sure you want to delete this phase?") == true) {
            var param = { id: model.selectedWellId(), PhaseNo: PhaseNo };

            ajaxPost("@Url.Action("DeletePhase")", param, function (response) {
                if (response.Success) {
                    select();
                } else {
                    alert(response.Message);
                }
            }, function (err) {
                alert('Error occured when deleting phase');
            });
        }
    }

    function CalculateDaysOnPhase(t)
    {
        var start = model.PhasePhStart();
        var finish = model.PhasePhFinish();

        console.log(start);
        console.log(finish);

        if (start != null && start != "" && finish != null && finish != "") {
            var diffInDays = (finish - start) / (24 * 60 * 60 * 1000);
            $("#DaysValueNewPhase").val(diffInDays);

        }
        else {
            $("#DaysValueNewPhase").val(0);
        }

    }

    function saveNewPhase() {
        var validator = $("#form_new_phase").kendoValidator().data("kendoValidator");

        if (!validator.validate()) {
            return;
        }

        var data = {};
        data.ActivityId = model.SelectedActivity._id;
        data.PhStart = moment(model.PhasePhStart()).toDate();
        data.PhFinish = moment(model.PhasePhFinish()).toDate();
        data.ActivityType = model.PhaseName();

        var virtual = false;
        var shift = false;
        if ($("#virtual").is(':checked'))
        {
            virtual = true;
        }
        if ($("#shift").is(':checked')) {
            shift = true;
        }

        data.Virtual = virtual;
        data.Shift = shift;

        console.log(data);
        ajaxPost("@Url.Action("SaveNewPhase")", data, function (response) {
            select();
            $("#myModal").modal('hide');
        }, function (err) {
            alert('Error occured when saving new phase')
        });
    }

    function sendData() {
        var updatedRecords = [];

        $("#grid_wrapper").data("kendoGrid").dataSource._data.forEach(function (f) {
            if (f.dirty) updatedRecords.push(f);
        });

        var data = {};
        data.id = model.selectedWellId();
        data.updatedPhases = updatedRecords;

        for (var a = 0; a < data.updatedPhases.length; a++) {
            var b = data.updatedPhases[a];
            for (i in b) if (b.hasOwnProperty(i)) {
                if (i.indexOf(".") > -1) {
                    delete data.updatedPhases[a][i];
                }
            }

            var phstart = data.updatedPhases[a].PhSchedule.Start;
            if (phstart instanceof Date) {
                data.updatedPhases[a].PhSchedule.Start = phstart;
            } else {
                data.updatedPhases[a].PhSchedule.Start = jsonDateStr(phstart);
            }

            var phfinish = data.updatedPhases[a].PhSchedule.Finish;
            if (phfinish instanceof Date) {
                data.updatedPhases[a].PhSchedule.Finish = phfinish;
            } else {
                data.updatedPhases[a].PhSchedule.Finish = jsonDateStr(phfinish);
            }
        }

        data.updateActivity = model.SelectedActivity;

        var virtual1 = false;
        var shift1 = false;
        if ($("#virtual1").is(':checked')) {
            virtual1 = true;
        }
        if ($("#shift1").is(':checked')) {
            shift1 = true;
        }

        data.updateActivity.ShiftFutureEventDate = shift1;
        data.updateActivity.VirtualPhase = virtual1;

        console.log(ks(data.updatedPhases));
        console.log(data);

        ajaxPost("@Url.Action("UpdatePhase")", data,
            function (response) {
                if (response.Success == false) {
                    alert(response.Message);
                    return;
                }
                select();
                model.reloadData();
                alert("Data Saved!");
            }, function (err) {
                alert(err.responseText);
            });
    }

    function backToBrowser() {
        model.ShowBrowser(true);
        model.ShowEditForm(false);
        model.ShowOnePageEst(false);
        model.selectedWellId();
        model.reloadData();
    }

</script>
