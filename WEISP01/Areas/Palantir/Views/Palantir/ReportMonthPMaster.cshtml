@{
    ViewBag.Title = "Report Month PMaster";
    Layout = "~/Views/Shared/_common_v1.cshtml";
}

@using ECIS.Client.WEIS
@using Newtonsoft.Json
@using ECIS.Core
@{
    var ActivityEntityIDSel = DataHelper.Populate("WEISPalantirMasterResult").Select(x => BsonHelper.GetString(x, "ActivityEntityID")).Distinct().ToList<string>();
}

<script>
    model.IsProcessing = ko.observable(false);
</script>

<style>
    .grids .grid {
        height: 100%;
        width: 100%;
    }

    .grids {
        margin-top: 15px;
    }

    .grids {
        padding: 0px 15px 0px 0px !important;
    }

        .grids .cell-number {
            text-align: right;
        }

        .grids .cell-date {
            text-align: center;
        }

        .grids .k-grid .k-grid-content {
            min-height: 100px;
            /*max-height: 600px;*/
        }



        .grids .k-header.k-grid-toolbar {
            /*background-color: #F9F9FB;*/
        }

        .grids .k-header[role=columnheader] {
            vertical-align: middle;
        }

            .grids .k-header[role=columnheader][data-colspan] {
                text-align: center;
                font-weight: bold;
                color: #a8a8a8;
            }

        .grids [role=rowgroup] [role=row]:nth-child(n+2) [role=columnheader] {
            text-align: center;
            vertical-align: top;
        }

    .k-grid .k-grid-content-locked {
        height: auto !important;
    }
</style>



<div class="col-md-12" style="margin-bottom: 10px;">
    <!-- filters -->
    @Html.Partial("FilterForPalantir")

    <script>
        //model.FilterVisibility.LineOfBusiness(true);
        //model.FilterVisibility.Asset(true);
        //model.FilterVisibility.FundingType(true);

        model.FilterVisibility.MoneyType(true);
        model.FilterVisibility.Currency(true);
        model.FilterVisibility.SSTG(true);
        model.FilterVisibility.InPlan(true);

        //model.FilterVisibility.ReportingEntity(true);
        //model.FilterVisibility.PlanningEntity(true);
        //model.FilterVisibility.PlanningEntityID(true);
        //model.FilterVisibility.ActivityEntity(true);
        //model.FilterVisibility.ActivityEntityID(true);
        model.FilterVisibility.BtnGenerateMpmaster(true);

    </script>

    <div data-bind="visible: model.IsProcessing()">
        @Html.Partial("_processing")
    </div>

    <div data-bind="style: { visibility: (!model.IsProcessing() ? 'visible' : 'hidden'), height: (!model.IsProcessing() ? '' : '0px'), overflow: (!model.IsProcessing() ? '' : 'hidden') }">

        <div class="col-md-12 grids by-monthlypm">
            @*<div class="row" style="margin-bottom:10px;visibility:hidden">
                <div class="col-md-1">
                    <button class="btn btn-custom btn-sm btn-danger" data-bind="click: deleteaggrmpmaster">
                        <span class="glyphicon glyphicon-trash"></span> Delete
                    </button>
                </div>
                <div class="col-md-3" style="visibility:hidden">
                    <div class="col-md-5">
                        <label>Activity Entity ID: </label>
                    </div>
                    <div class="col-md-6">
                        <select data-model="ActivityEntityIDSelect" data-placeholder="Select Activity Entity ID ..."></select>
                    </div>
                </div>
                <div class="col-md-2" style="visibility:hidden">
                    <button class="btn btn-custom btn-sm btn-danger" data-bind="click: deletemapmpmaster">
                        <span class="glyphicon glyphicon-trash"></span> Delete Map
                    </button>
                </div>
            </div>*@
            <div class="row">
                <div class="col-md-12">
                    <div id="grid_monthly" class="grid"></div>
                </div>
            </div>
        </div>

        <div style="clear: both;"></div>
    </div>

</div>

<script type="text/javascript">
    model.ActivityEntityIDSelectnew = ko.observableArray(@MvcHtmlString.Create(JsonConvert.SerializeObject(ActivityEntityIDSel)));
    $(document).ready(function () {
        console.log(model.ActivityEntityIDSelectnew);
        ActivityEntityIDSelect: ko.observable(false)
        $('[data-model="ActivityEntityIDSelect"]').kendoMultiSelect({
            placeholder: $(this).attr('data-placeholder'),
            dataSource: model.ActivityEntityIDSelectnew,
            //value: model.CaseNameSelnew().length == 0 ? [] : [model.CaseNameSelnew()[0]],
            value: (function (v) { return typeof v === 'undefined' ? '' : v; }($(this).attr('data-value'))),
            filter: "contains",
        });
        model.reloadData();
    });

    model.reloadData = function () {
        if (model.IsProcessing()) return;
        model.IsProcessing(true);
        model.GetDataReport("@Url.Action("GetPMasterMonthlyReport")");
    }

    model.GetDataReport = function (url) {
        var param = model.getFilterValues();
        ajaxPost(url, param, function (res) {
            model.IsProcessing(false);
            if (res.Result != "OK") {
                alert(res.Message);
                return;
            }

            if (res.Data.length > 0) {
                renderGridUsingData(res.Data);
            }

        }, function (res) {
            model.IsProcessing(false);
            alert(res);
        });
    }

    var uniqueArray = function (a) {
        return a.reduce(function (p, c) {
            if (p.indexOf(c) < 0) p.push(c);
            return p;
        }, []);
    };

    function toggleCheckMonthly(sender) {
        var s = $(sender);
        var cbxs = s.closest("#grid_monthly.k-grid").find("input[type='checkbox'].checkme");
        cbxs.prop("checked", s.prop("checked"));
    }

    model.renderGridColumnsMonthly = function (data) {
        var gridColumns = [];
        gridColumns.push({
            width: 30,
            template: "<input type='checkbox' class='checkme' value='#: _id #'>",
            headerTemplate: "<input type='checkbox' class='check_toggle' onchange='javascript:toggleCheckMonthly(this)'>",
            locked: true,
            lockable: false
        }, {
            field: "reportEntity",
            title: "Reporting Entity",
            width: 110,
            locked: true
        },
        {
            field: "planningEntity",
            title: "Planning Entity",
            width: 110,
            locked: true
        }, {
            field: "planningEntityID",
            title: "Planning<br/> Entity ID",
            width: 90,
            locked: true
        }, {
            field: "activityEntity",
            title: "Activity Entity",
            width: 110,
            locked: true
        }, {
            field: "activityEntityID",
            title: "Activity<br/> Entity ID",
            width: 90,
            locked: true
        }, {
            field: "probabilityofSuccess",
            title: "Probability<br/> Of Success",
            width: 90,
            format: "{0} %"
        }, {
            field: "averageShellShare",
            title: "Average<br/> ShellShare",
            width: 90
        }, {
            field: "unit",
            title: "Unit",
            width: 80
        }, {
            field: "pMasterField",
            title: "PMaster Field",
            width: 80
        }, {
            field: "pMatserRef",
            title: "PMaster<br/> Reference",
            width: 80
        }
        );

        //for (var i = 0; i < data[0].UIOMonthly.length; i++) {
        //    var dasuChild = [];
        //    for (var j = 0; j < data[0].UIOMonthly[i].month.length; j++) {
        //        //resultDynm = { field: "OPList[" + i + "].OPSchedule.Start", template: "#: jsonDateStr(OPList[" + i + "].OPSchedule.Start) #", title: "Start", width: 90, attributes: { style: 'text-align: center;' } },;
        //        dasuChild.push({ field: "UIOMonthly[" + i + "].MonthValue[" + j + "]", title: data[0].UIOMonthly[i].month[j], width: 60, format: "{0:N1}", attributes: { style: 'text-align: right;' } });
        //        //dasuChild[j] = "{dsadsd}";
        //    }
        //    gridColumns.push({ title: data[0].UIOMonthly[i].TopHeader, columns: dasuChild });
        //}

        //for (var i = 0; i < data[0].UIOAnnual.length; i++) {
        //    gridColumns.push({ field: "UIOAnnual[" + i + "].value", title: data[0].UIOAnnual[i].year.toString(), width: 60, format: "{0:N1}", attributes: { style: 'text-align:right;' } });
        //}

        //var record = data[0].UIDummyYear;
        //for (var key in record) {
        //    if (record.hasOwnProperty(key)) {
        //        //alert(key + " -> " + data[0].UIDummyYear[key]);
        //        gridColumns.push({ field: ("UIDummyYear." + key), title: key.replace(/_/g, " "), width: 60, format: "{0:N1}", attributes: { style: 'text-align:right;' } });
        //    }
        //}


        var transMonthly = [];
        var yearMonthly = [];
        var recordMonthly = data[0].Monthly;
        var iMonthly = 0;
        for (var key in recordMonthly) {
            if (recordMonthly.hasOwnProperty(key)) {
                for (var keyitem in recordMonthly[key]) {
                    yearMonthly.push(keyitem.split('_')[2]);
                    transMonthly.push({ field: ("Monthly[" + iMonthly + "]." + keyitem), title: keyitem.split('_')[1], width: 50, format: "{0:N1}", attributes: { style: 'text-align:right;' } });
                }
                iMonthly++;
            }
        }

        var yearMonthlyUnique = uniqueArray(yearMonthly);
        for (var j = 0; j < yearMonthlyUnique.length; j++) {
            var tempyearMonthly = [];
            for (var i = 0; i < transMonthly.length; i++) {
                if (yearMonthlyUnique[j] == transMonthly[i].field.split('.')[1].split('_')[2]) {
                    tempyearMonthly.push(transMonthly[i]);
                }
            }
            gridColumns.push({ title: yearMonthlyUnique[j], columns: tempyearMonthly });
        }

        var recordAnnual = data[0].Annual;
        var iAnnual = 0;
        for (var key in recordAnnual) {
            if (recordAnnual.hasOwnProperty(key)) {
                //alert(key + " -> " + data[0].UIDummyYear[key]);
                for (var keyitem in recordAnnual[key]) {
                    gridColumns.push({ field: ("Annual[" + iAnnual + "]." + keyitem), title: keyitem.split('_')[1], width: 70, format: "{0:N1}", attributes: { style: 'text-align:right;' } });
                }
                iAnnual++;
            }
        }
        return gridColumns;
    }

    function renderGridUsingData(data) {
        $('#grid_monthly').replaceWith($('<div />').attr('id', 'grid_monthly'));
        $('#grid_monthly').kendoGrid({
            toolbar: ["pdf", "excel"],
            pdf: { filename: "Data Monthly.pdf" },
            excel: { fileName: "Data Monthly.xlsx", allPages: true, filterable: true },
            dataSource: {
                data: data,
                type: "json",
                pageSize: 10
            },
            pageable: true,
            sortable: true,
            resizable: true,
            columns: model.renderGridColumnsMonthly(data),
            excelExport: function (e) {
                var sheet = e.workbook.sheets[0];
                for (var rowIndex = 0; rowIndex < sheet.rows.length; rowIndex++) {
                    var row = sheet.rows[rowIndex];
                    for (var cellIndex = 0; cellIndex < row.cells.length; cellIndex++) {
                        if (rowIndex == 0) {
                            row.cells[cellIndex].value = row.cells[cellIndex].value.replace("<br/>", "");
                        }
                    }
                }
            }
        });

    }

    model.deleteaggrmpmaster = function () {
        var conf = confirm("Are you sure want to delete?");
        if (conf) {
            model.deleteaggr("grid_monthly", "pmasterMonthly");
        }
    }

    model.deleteaggr = function (idgrid, report) {
        var ids = $("#" + idgrid).find("input.checkme:checked");
        var idValues = $.map(ids, function (obj, idx) {
            var $obj = $(obj);
            return $obj.val();
        });
        if (idValues.length == 0) {
            alert("Please select record Report to be reminded");
            return;
        }
     
        model.IsProcessing(true);
        ajaxPost("@Url.Action("DeleteAggr")", { ids: idValues, report: report }, function (res) {
            if (res.Success) {
                model.IsProcessing(false);
                model.reloadData();
            } else {
                alert(res.Message);
                model.IsProcessing(false);
            }
        }, function () {
            alert(res.Message);
            model.IsProcessing(false);
        });
    }

    model.deletemapmpmaster = function () {
        var conf = confirm("Are you sure want to delete?");
        if (conf) {
            model.deletemap("pmasterMonthly");
        }
    }

    model.deletemap = function (report) {
        model.IsProcessing(true);
        ajaxPost("@Url.Action("DeleteMap")", { caseName: casename, report: report }, function (res) {
            if (res.Success) {
                model.IsProcessing(false);
                model.reloadData();
            } else {
                alert(res.Message);
                model.IsProcessing(false);
            }
        }, function () {
            alert(res.Message);
            model.IsProcessing(false);
        });
    }

</script>